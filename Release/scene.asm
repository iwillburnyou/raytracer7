; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	F:\BaiduYunDownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A	; Raytracer::KdTree::s_MManager
PUBLIC	?modulo@Raytracer@@3PAIA			; Raytracer::modulo
_BSS	SEGMENT
?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A DD 01H DUP (?) ; Raytracer::KdTree::s_MManager
_BSS	ENDS
_DATA	SEGMENT
?modulo@Raytracer@@3PAIA DD 00H				; Raytracer::modulo
	DD	01H
	DD	02H
	DD	00H
	DD	01H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_acosf
PUBLIC	_fabsf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0vector3@Raytracer@@QAE@XZ			; Raytracer::vector3::vector3
PUBLIC	??0vector3@Raytracer@@QAE@MMM@Z			; Raytracer::vector3::vector3
PUBLIC	?Normalize@vector3@Raytracer@@QAEXXZ		; Raytracer::vector3::Normalize
PUBLIC	?Length@vector3@Raytracer@@QAEMXZ		; Raytracer::vector3::Length
PUBLIC	?Dot@vector3@Raytracer@@QAEMV12@@Z		; Raytracer::vector3::Dot
PUBLIC	?Cross@vector3@Raytracer@@QAE?AV12@V12@@Z	; Raytracer::vector3::Cross
PUBLIC	??Yvector3@Raytracer@@QAEXAAV01@@Z		; Raytracer::vector3::operator+=
PUBLIC	??Xvector3@Raytracer@@QAEXM@Z			; Raytracer::vector3::operator*=
PUBLIC	??HRaytracer@@YA?AVvector3@0@ABV10@0@Z		; Raytracer::operator+
PUBLIC	??GRaytracer@@YA?AVvector3@0@ABV10@0@Z		; Raytracer::operator-
PUBLIC	??DRaytracer@@YA?AVvector3@0@ABV10@M@Z		; Raytracer::operator*
PUBLIC	??DRaytracer@@YA?AVvector3@0@ABV10@AAV10@@Z	; Raytracer::operator*
PUBLIC	??DRaytracer@@YA?AVvector3@0@MABV10@@Z		; Raytracer::operator*
PUBLIC	??0aabb@Raytracer@@QAE@XZ			; Raytracer::aabb::aabb
PUBLIC	??0aabb@Raytracer@@QAE@AAVvector3@1@0@Z		; Raytracer::aabb::aabb
PUBLIC	?GetPos@aabb@Raytracer@@QAEAAVvector3@2@XZ	; Raytracer::aabb::GetPos
PUBLIC	?GetSize@aabb@Raytracer@@QAEAAVvector3@2@XZ	; Raytracer::aabb::GetSize
PUBLIC	?w@aabb@Raytracer@@QAEMXZ			; Raytracer::aabb::w
PUBLIC	?h@aabb@Raytracer@@QAEMXZ			; Raytracer::aabb::h
PUBLIC	?d@aabb@Raytracer@@QAEMXZ			; Raytracer::aabb::d
PUBLIC	?GetOrigin@Ray@Raytracer@@QAEAAVvector3@2@XZ	; Raytracer::Ray::GetOrigin
PUBLIC	?GetDirection@Ray@Raytracer@@QAEAAVvector3@2@XZ	; Raytracer::Ray::GetDirection
PUBLIC	??0Texture@Raytracer@@QAE@PAVvector3@1@HH@Z	; Raytracer::Texture::Texture
PUBLIC	??0Texture@Raytracer@@QAE@PAD@Z			; Raytracer::Texture::Texture
PUBLIC	?GetTexel@Texture@Raytracer@@QAE?AVvector3@2@MM@Z ; Raytracer::Texture::GetTexel
PUBLIC	??0Material@Raytracer@@QAE@XZ			; Raytracer::Material::Material
PUBLIC	?GetColor@Material@Raytracer@@QAE?AVvector3@2@XZ ; Raytracer::Material::GetColor
PUBLIC	?SetParameters@Material@Raytracer@@QAEXMMAAVvector3@2@MM@Z ; Raytracer::Material::SetParameters
PUBLIC	?SetRefrIndex@Material@Raytracer@@QAEXM@Z	; Raytracer::Material::SetRefrIndex
PUBLIC	?GetTexture@Material@Raytracer@@QAEPAVTexture@2@XZ ; Raytracer::Material::GetTexture
PUBLIC	?SetUVScale@Material@Raytracer@@QAEXMM@Z	; Raytracer::Material::SetUVScale
PUBLIC	?GetUScaleReci@Material@Raytracer@@QAEMXZ	; Raytracer::Material::GetUScaleReci
PUBLIC	?GetVScaleReci@Material@Raytracer@@QAEMXZ	; Raytracer::Material::GetVScaleReci
PUBLIC	??0Vertex@Raytracer@@QAE@Vvector3@1@MM@Z	; Raytracer::Vertex::Vertex
PUBLIC	?GetU@Vertex@Raytracer@@QAEMXZ			; Raytracer::Vertex::GetU
PUBLIC	?GetV@Vertex@Raytracer@@QAEMXZ			; Raytracer::Vertex::GetV
PUBLIC	?GetNormal@Vertex@Raytracer@@QAEAAVvector3@2@XZ	; Raytracer::Vertex::GetNormal
PUBLIC	?GetPos@Vertex@Raytracer@@QAEAAVvector3@2@XZ	; Raytracer::Vertex::GetPos
PUBLIC	?SetUV@Vertex@Raytracer@@QAEXMM@Z		; Raytracer::Vertex::SetUV
PUBLIC	?SetNormal@Vertex@Raytracer@@QAEXAAVvector3@2@@Z ; Raytracer::Vertex::SetNormal
PUBLIC	??0Light@Raytracer@@QAE@HAAVvector3@1@0@Z	; Raytracer::Light::Light
PUBLIC	??0Light@Raytracer@@QAE@HAAVvector3@1@000@Z	; Raytracer::Light::Light
PUBLIC	??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z	; Raytracer::Primitive::Primitive
PUBLIC	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z	; Raytracer::Primitive::Primitive
PUBLIC	??1Primitive@Raytracer@@QAE@XZ			; Raytracer::Primitive::~Primitive
PUBLIC	?GetMaterial@Primitive@Raytracer@@QAEPAVMaterial@2@XZ ; Raytracer::Primitive::GetMaterial
PUBLIC	?SetMaterial@Primitive@Raytracer@@QAEXPAVMaterial@2@@Z ; Raytracer::Primitive::SetMaterial
PUBLIC	?GetType@Primitive@Raytracer@@QAEHXZ		; Raytracer::Primitive::GetType
PUBLIC	?Intersect@Primitive@Raytracer@@QAEHAAVRay@2@AAM@Z ; Raytracer::Primitive::Intersect
PUBLIC	?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z ; Raytracer::Primitive::IntersectBox
PUBLIC	?CalculateRange@Primitive@Raytracer@@QAEXAAM0H@Z ; Raytracer::Primitive::CalculateRange
PUBLIC	?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z ; Raytracer::Primitive::GetNormal
PUBLIC	?GetColor@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z ; Raytracer::Primitive::GetColor
PUBLIC	?PlaneBoxOverlap@Primitive@Raytracer@@QAE_NAAVvector3@2@00@Z ; Raytracer::Primitive::PlaneBoxOverlap
PUBLIC	?IntersectTriBox@Primitive@Raytracer@@QAE_NAAVvector3@2@0000@Z ; Raytracer::Primitive::IntersectTriBox
PUBLIC	?IntersectSphereBox@Primitive@Raytracer@@QAE_NAAVvector3@2@AAVaabb@2@@Z ; Raytracer::Primitive::IntersectSphereBox
PUBLIC	?GetCentre@Primitive@Raytracer@@QAEAAVvector3@2@XZ ; Raytracer::Primitive::GetCentre
PUBLIC	?GetRadius@Primitive@Raytracer@@QAEMXZ		; Raytracer::Primitive::GetRadius
PUBLIC	?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@XZ ; Raytracer::Primitive::GetNormal
PUBLIC	?GetVertex@Primitive@Raytracer@@QAEPAVVertex@2@H@Z ; Raytracer::Primitive::GetVertex
PUBLIC	?SetPrimitive@ObjectList@Raytracer@@QAEXPAVPrimitive@2@@Z ; Raytracer::ObjectList::SetPrimitive
PUBLIC	?GetPrimitive@ObjectList@Raytracer@@QAEPAVPrimitive@2@XZ ; Raytracer::ObjectList::GetPrimitive
PUBLIC	?SetNext@ObjectList@Raytracer@@QAEXPAV12@@Z	; Raytracer::ObjectList::SetNext
PUBLIC	?GetNext@ObjectList@Raytracer@@QAEPAV12@XZ	; Raytracer::ObjectList::GetNext
PUBLIC	??0KdTreeNode@Raytracer@@QAE@XZ			; Raytracer::KdTreeNode::KdTreeNode
PUBLIC	?SetAxis@KdTreeNode@Raytracer@@QAEXH@Z		; Raytracer::KdTreeNode::SetAxis
PUBLIC	?GetAxis@KdTreeNode@Raytracer@@QAEHXZ		; Raytracer::KdTreeNode::GetAxis
PUBLIC	?SetSplitPos@KdTreeNode@Raytracer@@QAEXM@Z	; Raytracer::KdTreeNode::SetSplitPos
PUBLIC	?SetLeft@KdTreeNode@Raytracer@@QAEXPAV12@@Z	; Raytracer::KdTreeNode::SetLeft
PUBLIC	?Add@KdTreeNode@Raytracer@@QAEXPAVPrimitive@2@@Z ; Raytracer::KdTreeNode::Add
PUBLIC	?SetLeaf@KdTreeNode@Raytracer@@QAEX_N@Z		; Raytracer::KdTreeNode::SetLeaf
PUBLIC	?GetList@KdTreeNode@Raytracer@@QAEPAVObjectList@2@XZ ; Raytracer::KdTreeNode::GetList
PUBLIC	?SetList@KdTreeNode@Raytracer@@QAEXPAVObjectList@2@@Z ; Raytracer::KdTreeNode::SetList
PUBLIC	??0KdTree@Raytracer@@QAE@XZ			; Raytracer::KdTree::KdTree
PUBLIC	?Build@KdTree@Raytracer@@QAEXPAVScene@2@@Z	; Raytracer::KdTree::Build
PUBLIC	?InsertSplitPos@KdTree@Raytracer@@QAEXM@Z	; Raytracer::KdTree::InsertSplitPos
PUBLIC	?Subdivide@KdTree@Raytracer@@QAEXPAVKdTreeNode@2@AAVaabb@2@HH@Z ; Raytracer::KdTree::Subdivide
PUBLIC	??0Scene@Raytracer@@QAE@XZ			; Raytracer::Scene::Scene
PUBLIC	??1Scene@Raytracer@@QAE@XZ			; Raytracer::Scene::~Scene
PUBLIC	?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z ; Raytracer::Scene::InitScene
PUBLIC	?GetNrPrimitives@Scene@Raytracer@@QAEHXZ	; Raytracer::Scene::GetNrPrimitives
PUBLIC	?GetPrimitive@Scene@Raytracer@@QAEPAVPrimitive@2@H@Z ; Raytracer::Scene::GetPrimitive
PUBLIC	?GetExtends@Scene@Raytracer@@QAEAAVaabb@2@XZ	; Raytracer::Scene::GetExtends
PUBLIC	?AddBox@Scene@Raytracer@@QAEXVvector3@2@0@Z	; Raytracer::Scene::AddBox
PUBLIC	?AddPlane@Scene@Raytracer@@QAEXVvector3@2@000PAVMaterial@2@@Z ; Raytracer::Scene::AddPlane
PUBLIC	?Load3DS@Scene@Raytracer@@QAEXPADPAVMaterial@2@AAVvector3@2@M@Z ; Raytracer::Scene::Load3DS
PUBLIC	?EatChunk@Scene@Raytracer@@QAEJPAD@Z		; Raytracer::Scene::EatChunk
PUBLIC	?getf@Raytracer@@YAMPAD@Z			; Raytracer::getf
PUBLIC	?getw@Raytracer@@YAGPAD@Z			; Raytracer::getw
PUBLIC	?getd@Raytracer@@YAKPAD@Z			; Raytracer::getd
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	?temp@Raytracer@@3PAEA				; Raytracer::temp
PUBLIC	?aligned@Raytracer@@3PAEA			; Raytracer::aligned
PUBLIC	??_C@_0BG@JCPNHFAO@constructing?5geometry?$AA@	; `string'
PUBLIC	??_C@_0BA@NINGDJMO@meshes?1knot?43ds?$AA@	; `string'
PUBLIC	??_C@_0BO@JIHJDMAN@building?5kdtree?5?9?5please?5wait?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3b800000
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3ea2f983
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f22f983
PUBLIC	__real@3f333333
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@4089999a
PUBLIC	__real@40900000
PUBLIC	__real@40eccccd
PUBLIC	__real@41080000
PUBLIC	__real@41200000
PUBLIC	__real@41500000
PUBLIC	__real@41600000
PUBLIC	__real@41e00000
PUBLIC	__real@447a0000
PUBLIC	__real@447a2000
PUBLIC	__real@461c4000
PUBLIC	__real@c08ccccd
PUBLIC	__real@c0c00000
PUBLIC	__real@c1500000
PUBLIC	__real@c1600000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	?NewObjectList@MManager@Raytracer@@QAEPAVObjectList@2@XZ:PROC ; Raytracer::MManager::NewObjectList
EXTRN	?FreeObjectList@MManager@Raytracer@@QAEXPAVObjectList@2@@Z:PROC ; Raytracer::MManager::FreeObjectList
EXTRN	?NewKdTreeNodePair@MManager@Raytracer@@QAEPAVKdTreeNode@2@XZ:PROC ; Raytracer::MManager::NewKdTreeNodePair
EXTRN	?Print@Surface@Raytracer@@QAEXPADHHI@Z:PROC	; Raytracer::Surface::Print
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_floor:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?temp@Raytracer@@3PAEA DD 01H DUP (?)			; Raytracer::temp
?aligned@Raytracer@@3PAEA DD 01H DUP (?)		; Raytracer::aligned
_BSS	ENDS
CRT$XCU	SEGMENT
_temp$initializer$ DD FLAT:??__Etemp@Raytracer@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@c1600000
CONST	SEGMENT
__real@c1600000 DD 0c1600000r			; -14
CONST	ENDS
;	COMDAT __real@c1500000
CONST	SEGMENT
__real@c1500000 DD 0c1500000r			; -13
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c08ccccd
CONST	SEGMENT
__real@c08ccccd DD 0c08ccccdr			; -4.4
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@447a2000
CONST	SEGMENT
__real@447a2000 DD 0447a2000r			; 1000.5
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@41e00000
CONST	SEGMENT
__real@41e00000 DD 041e00000r			; 28
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41080000
CONST	SEGMENT
__real@41080000 DD 041080000r			; 8.5
CONST	ENDS
;	COMDAT __real@40eccccd
CONST	SEGMENT
__real@40eccccd DD 040eccccdr			; 7.4
CONST	ENDS
;	COMDAT __real@40900000
CONST	SEGMENT
__real@40900000 DD 040900000r			; 4.5
CONST	ENDS
;	COMDAT __real@4089999a
CONST	SEGMENT
__real@4089999a DD 04089999ar			; 4.3
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f22f983
CONST	SEGMENT
__real@3f22f983 DD 03f22f983r			; 0.63662
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ea2f983
CONST	SEGMENT
__real@3ea2f983 DD 03ea2f983r			; 0.31831
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3b800000
CONST	SEGMENT
__real@3b800000 DD 03b800000r			; 0.00390625
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0BO@JIHJDMAN@building?5kdtree?5?9?5please?5wait?$AA@
CONST	SEGMENT
??_C@_0BO@JIHJDMAN@building?5kdtree?5?9?5please?5wait?$AA@ DB 'building k'
	DB	'dtree - please wait', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NINGDJMO@meshes?1knot?43ds?$AA@
CONST	SEGMENT
??_C@_0BA@NINGDJMO@meshes?1knot?43ds?$AA@ DB 'meshes/knot.3ds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JCPNHFAO@constructing?5geometry?$AA@
CONST	SEGMENT
??_C@_0BG@JCPNHFAO@constructing?5geometry?$AA@ DB 'constructing geometry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$11
xdata$x	ENDS
CRT$XCU	SEGMENT
_aligned$initializer$ DD FLAT:??__Ealigned@Raytracer@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?getd@Raytracer@@YAKPAD@Z
_TEXT	SEGMENT
_addr$ = 8						; size = 4
?getd@Raytracer@@YAKPAD@Z PROC				; Raytracer::getd, COMDAT

; 555  : {

	push	ebp
	mov	ebp, esp

; 556  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	DWORD PTR [eax], ecx

; 557  : 	return *(unsigned long*)aligned;

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	eax, DWORD PTR [eax]

; 558  : }

	pop	ebp
	ret	0
?getd@Raytracer@@YAKPAD@Z ENDP				; Raytracer::getd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?getw@Raytracer@@YAGPAD@Z
_TEXT	SEGMENT
_addr$ = 8						; size = 4
?getw@Raytracer@@YAGPAD@Z PROC				; Raytracer::getw, COMDAT

; 550  : {

	push	ebp
	mov	ebp, esp

; 551  : 	memcpy( aligned, addr, 2 );

	mov	eax, DWORD PTR _addr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	WORD PTR [eax], cx

; 552  : 	return *(unsigned short*)aligned;

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ax, WORD PTR [eax]

; 553  : }

	pop	ebp
	ret	0
?getw@Raytracer@@YAGPAD@Z ENDP				; Raytracer::getw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?getf@Raytracer@@YAMPAD@Z
_TEXT	SEGMENT
_addr$ = 8						; size = 4
?getf@Raytracer@@YAMPAD@Z PROC				; Raytracer::getf, COMDAT

; 545  : {

	push	ebp
	mov	ebp, esp

; 546  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	DWORD PTR [eax], ecx

; 547  : 	return *(float*)aligned;

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	fld	DWORD PTR [eax]

; 548  : }

	pop	ebp
	ret	0
?getf@Raytracer@@YAMPAD@Z ENDP				; Raytracer::getf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??__Ealigned@Raytracer@@YAXXZ
text$di	SEGMENT
??__Ealigned@Raytracer@@YAXXZ PROC			; Raytracer::`dynamic initializer for 'aligned'', COMDAT

; 543  : unsigned char* aligned = (unsigned char*)(((unsigned long)temp + 4) & 0xFFFFFFFC);

	mov	eax, DWORD PTR ?temp@Raytracer@@3PAEA	; Raytracer::temp
	add	eax, 4
	and	eax, -4					; fffffffcH
	mov	DWORD PTR ?aligned@Raytracer@@3PAEA, eax ; Raytracer::aligned
	ret	0
??__Ealigned@Raytracer@@YAXXZ ENDP			; Raytracer::`dynamic initializer for 'aligned''
text$di	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??__Etemp@Raytracer@@YAXXZ
text$di	SEGMENT
??__Etemp@Raytracer@@YAXXZ PROC				; Raytracer::`dynamic initializer for 'temp'', COMDAT

; 542  : unsigned char* temp = new unsigned char[8];

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR ?temp@Raytracer@@3PAEA, eax	; Raytracer::temp
	ret	0
??__Etemp@Raytracer@@YAXXZ ENDP				; Raytracer::`dynamic initializer for 'temp''
text$di	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?EatChunk@Scene@Raytracer@@QAEJPAD@Z
_TEXT	SEGMENT
_chunklength$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_j$2$ = 8						; size = 4
_j$1$ = 8						; size = 4
_tcoords$1$ = 8						; size = 4
_buffer$ = 8						; size = 4
?EatChunk@Scene@Raytracer@@QAEJPAD@Z PROC		; Raytracer::Scene::EatChunk, COMDAT
; _this$ = ecx

; 561  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	push	ebx
	mov	ebx, DWORD PTR _buffer$[ebp]
	push	esi

; 561  : {

	mov	DWORD PTR _this$1$[ebp], ecx
	push	edi

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	dx, WORD PTR [ebx]

; 564  : 	int j, i = 6, cp = 0, tcoords = 0;

	mov	edi, 6

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	WORD PTR [eax], dx

; 562  : 	short chunkid = getw( buffer );

	mov	edx, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned

; 552  : 	return *(unsigned short*)aligned;
; 553  : }
; 554  : inline unsigned long getd( char* addr )
; 555  : {
; 556  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR [ebx+2]

; 562  : 	short chunkid = getw( buffer );

	movzx	esi, WORD PTR [edx]

; 552  : 	return *(unsigned short*)aligned;
; 553  : }
; 554  : inline unsigned long getd( char* addr )
; 555  : {
; 556  : 	memcpy( aligned, addr, 4 );

	mov	DWORD PTR [edx], eax

; 563  : 	long chunklength = getd( buffer + 2 );

	mov	edx, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned

; 565  : 	switch (chunkid)

	movsx	ecx, si
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chunklength$1$[ebp], eax
	cmp	ecx, 16656				; 00004110H
	jg	$LN27@EatChunk
	je	SHORT $LN16@EatChunk
	cmp	ecx, 15677				; 00003d3dH
	je	SHORT $LN123@EatChunk
	cmp	ecx, 16384				; 00004000H
	je	SHORT $LL18@EatChunk
	cmp	ecx, 16640				; 00004100H
	jne	$LN1@EatChunk
$LN123@EatChunk:
	mov	esi, DWORD PTR _this$1$[ebp]
$LN5@EatChunk:

; 608  : 		}
; 609  : 	case 0x3D3D:
; 610  : 	case 0x4100:
; 611  : 		break;
; 612  : 	default:
; 613  : 		i = chunklength;
; 614  : 	break;
; 615  : 	}
; 616  : 	while (i < chunklength) i += EatChunk( buffer + i );

	mov	ecx, DWORD PTR _chunklength$1$[ebp]
	cmp	edi, ecx
	jge	$LN112@EatChunk
$LL2@EatChunk:
	lea	eax, DWORD PTR [edi+ebx]
	mov	ecx, esi
	push	eax
	call	?EatChunk@Scene@Raytracer@@QAEJPAD@Z	; Raytracer::Scene::EatChunk
	add	edi, eax
	mov	eax, DWORD PTR _chunklength$1$[ebp]
	cmp	edi, eax
	jl	SHORT $LL2@EatChunk
	pop	edi
	pop	esi
	pop	ebx

; 618  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LL18@EatChunk:

; 570  : 	case 0x4000:
; 571  : 		while (*(buffer + (i++)) != 0);

	mov	al, BYTE PTR [edi+ebx]
	inc	edi
	test	al, al
	jne	SHORT $LL18@EatChunk

; 572  : 		break;

	jmp	SHORT $LN123@EatChunk
$LN16@EatChunk:

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	ax, WORD PTR [ebx+6]

; 573  : 	case 0x4110:
; 574  : 		m_NrVerts = getw( buffer + i );

	mov	esi, DWORD PTR _this$1$[ebp]

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	WORD PTR [edx], ax

; 573  : 	case 0x4110:
; 574  : 		m_NrVerts = getw( buffer + i );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned

; 575  : 		delete m_Verts;

	push	DWORD PTR [esi+48]
	movzx	eax, WORD PTR [eax]
	mov	DWORD PTR [esi+56], eax
	call	??3@YAXPAX@Z				; operator delete

; 576  : 		m_Verts = new float[m_NrVerts * 3];

	mov	eax, DWORD PTR [esi+56]
	xor	ecx, ecx
	mov	edx, 4
	lea	eax, DWORD PTR [eax+eax*2]
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 8
	mov	DWORD PTR [esi+48], eax

; 577  : 		i += 2;
; 578  : 		for ( j = 0; j < m_NrVerts; j++ )

	cmp	DWORD PTR [esi+56], 0
	mov	edi, 8
	mov	DWORD PTR _j$1$[ebp], 0
	jle	$LN5@EatChunk

; 573  : 	case 0x4110:
; 574  : 		m_NrVerts = getw( buffer + i );

	xor	edx, edx
$LL126@EatChunk:

; 546  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned

; 577  : 		i += 2;
; 578  : 		for ( j = 0; j < m_NrVerts; j++ )

	lea	edx, DWORD PTR [edx+12]

; 546  : 	memcpy( aligned, addr, 4 );

	mov	ecx, DWORD PTR [ebx+edi]
	mov	DWORD PTR [eax], ecx

; 579  : 		{
; 580  : 			m_Verts[j * 3] = getf( buffer + i );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+48]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx-12], eax

; 546  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [ebx+edi+4]
	mov	DWORD PTR [eax], ecx

; 581  : 			m_Verts[j * 3 + 1] = getf( buffer + i + 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+48]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx-8], eax

; 546  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [ebx+edi+8]

; 583  : 			i += 12;

	add	edi, 12					; 0000000cH

; 546  : 	memcpy( aligned, addr, 4 );

	mov	DWORD PTR [eax], ecx

; 582  : 			m_Verts[j * 3 + 2] = getf( buffer + i + 8 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+48]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx-4], eax
	mov	eax, DWORD PTR _j$1$[ebp]
	inc	eax
	mov	DWORD PTR _j$1$[ebp], eax
	cmp	eax, DWORD PTR [esi+56]
	jl	SHORT $LL126@EatChunk

; 584  : 		}
; 585  : 		break;

	jmp	$LN5@EatChunk
$LN27@EatChunk:

; 565  : 	switch (chunkid)

	sub	ecx, 16672				; 00004120H
	je	SHORT $LN12@EatChunk
	sub	ecx, 32					; 00000020H
	je	$LN124@EatChunk
	sub	ecx, 3085				; 00000c0dH
	jne	$LN1@EatChunk

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	ax, WORD PTR [ebx+6]
	mov	WORD PTR [edx], ax

; 566  : 	{
; 567  : 	case 0x4D4D:
; 568  : 		while ((getw( buffer + i) != 0x3D3D) && (getw( buffer + i) != 0xB000)) i += 2;

	mov	edx, 15677				; 00003d3dH
	mov	ecx, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	cmp	WORD PTR [ecx], dx
	je	$LN123@EatChunk
	mov	esi, 45056				; 0000b000H
	npad	1
$LL21@EatChunk:

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	ax, WORD PTR [edi+ebx]
	mov	WORD PTR [ecx], ax

; 566  : 	{
; 567  : 	case 0x4D4D:
; 568  : 		while ((getw( buffer + i) != 0x3D3D) && (getw( buffer + i) != 0xB000)) i += 2;

	mov	ecx, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	cmp	WORD PTR [ecx], si
	je	$LN123@EatChunk

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	ax, WORD PTR [edi+ebx+2]

; 566  : 	{
; 567  : 	case 0x4D4D:
; 568  : 		while ((getw( buffer + i) != 0x3D3D) && (getw( buffer + i) != 0xB000)) i += 2;

	add	edi, 2

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	WORD PTR [ecx], ax

; 566  : 	{
; 567  : 	case 0x4D4D:
; 568  : 		while ((getw( buffer + i) != 0x3D3D) && (getw( buffer + i) != 0xB000)) i += 2;

	mov	ecx, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	cmp	WORD PTR [ecx], dx
	jne	SHORT $LL21@EatChunk

; 569  : 		break;

	jmp	$LN123@EatChunk
$LN12@EatChunk:

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	ax, WORD PTR [ebx+6]

; 586  : 	case 0x4120:
; 587  : 		m_NrFaces = getw( buffer + i );

	mov	esi, DWORD PTR _this$1$[ebp]

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	WORD PTR [edx], ax

; 586  : 	case 0x4120:
; 587  : 		m_NrFaces = getw( buffer + i );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned

; 588  : 		delete m_Faces;

	push	DWORD PTR [esi+64]
	movzx	eax, WORD PTR [eax]
	mov	DWORD PTR [esi+60], eax
	call	??3@YAXPAX@Z				; operator delete

; 589  : 		m_Faces = new unsigned short[m_NrFaces * 3];

	mov	eax, DWORD PTR [esi+60]
	xor	ecx, ecx
	mov	edx, 2
	lea	eax, DWORD PTR [eax+eax*2]
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 8
	mov	DWORD PTR [esi+64], eax

; 590  : 		i += 2;
; 591  : 		for ( j = 0; j < m_NrFaces; j++ )

	cmp	DWORD PTR [esi+60], 0
	mov	edi, 8
	mov	DWORD PTR _j$2$[ebp], 0
	jle	SHORT $LN113@EatChunk

; 586  : 	case 0x4120:
; 587  : 		m_NrFaces = getw( buffer + i );

	xor	edx, edx
$LL128@EatChunk:

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned

; 590  : 		i += 2;
; 591  : 		for ( j = 0; j < m_NrFaces; j++ )

	lea	edx, DWORD PTR [edx+6]

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	movzx	ecx, WORD PTR [ebx+edi]
	mov	WORD PTR [eax], cx

; 592  : 		{
; 593  : 			m_Faces[j * 3] = getw( buffer + i );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+64]
	movzx	eax, WORD PTR [eax]
	mov	WORD PTR [edx+ecx-6], ax

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	movzx	ecx, WORD PTR [ebx+edi+2]
	mov	WORD PTR [eax], cx

; 594  : 			m_Faces[j * 3 + 1] = getw( buffer + i + 2 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+64]
	movzx	eax, WORD PTR [eax]
	mov	WORD PTR [edx+ecx-4], ax

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	movzx	ecx, WORD PTR [ebx+edi+4]

; 596  : 			i += 8;

	add	edi, 8

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	WORD PTR [eax], cx

; 595  : 			m_Faces[j * 3 + 2] = getw( buffer + i + 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+64]
	movzx	eax, WORD PTR [eax]
	mov	WORD PTR [edx+ecx-2], ax
	mov	eax, DWORD PTR _j$2$[ebp]
	inc	eax
	mov	DWORD PTR _j$2$[ebp], eax
	cmp	eax, DWORD PTR [esi+60]
	jl	SHORT $LL128@EatChunk
$LN113@EatChunk:

; 590  : 		i += 2;
; 591  : 		for ( j = 0; j < m_NrFaces; j++ )

	mov	edx, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	jmp	SHORT $LN9@EatChunk
$LN124@EatChunk:
	mov	esi, DWORD PTR _this$1$[ebp]
$LN9@EatChunk:

; 547  : 	return *(float*)aligned;
; 548  : }
; 549  : inline unsigned short getw( char* addr )
; 550  : {
; 551  : 	memcpy( aligned, addr, 2 );

	mov	ax, WORD PTR [edi+ebx]
	mov	WORD PTR [edx], ax

; 597  : 		}
; 598  : 	case 0x4140:
; 599  : 		tcoords = getw( buffer + i );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned

; 600  : 		delete m_TCoords;

	push	DWORD PTR [esi+52]
	movzx	eax, WORD PTR [eax]
	mov	DWORD PTR _tcoords$1$[ebp], eax
	call	??3@YAXPAX@Z				; operator delete

; 601  : 		m_TCoords = new float[tcoords * 2];

	mov	eax, DWORD PTR _tcoords$1$[ebp]
	xor	ecx, ecx
	add	eax, eax
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new

; 602  : 		i += 2;
; 603  : 		for ( j = 0; j < tcoords; j++ )

	xor	edx, edx
	mov	DWORD PTR [esi+52], eax
	add	esp, 8
	add	edi, 2
	cmp	DWORD PTR _tcoords$1$[ebp], edx
	jle	$LN5@EatChunk
$LL129@EatChunk:

; 546  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [ebx+edi]
	mov	DWORD PTR [eax], ecx

; 604  : 		{
; 605  : 			m_TCoords[j * 2] = getf( buffer + i );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*8], eax

; 546  : 	memcpy( aligned, addr, 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [ebx+edi+4]

; 607  : 			i += 8;

	add	edi, 8

; 546  : 	memcpy( aligned, addr, 4 );

	mov	DWORD PTR [eax], ecx

; 606  : 			m_TCoords[j * 2 + 1] = getf( buffer + i + 4 );

	mov	eax, DWORD PTR ?aligned@Raytracer@@3PAEA ; Raytracer::aligned
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*8+4], eax
	inc	edx
	cmp	edx, DWORD PTR _tcoords$1$[ebp]
	jl	SHORT $LL129@EatChunk
	jmp	$LN5@EatChunk
$LN112@EatChunk:

; 617  : 	return chunklength;

	mov	eax, ecx
$LN1@EatChunk:
	pop	edi
	pop	esi
	pop	ebx

; 618  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EatChunk@Scene@Raytracer@@QAEJPAD@Z ENDP		; Raytracer::Scene::EatChunk
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?Load3DS@Scene@Raytracer@@QAEXPADPAVMaterial@2@AAVvector3@2@M@Z
_TEXT	SEGMENT
_N$1 = -76						; size = 12
$T2 = -76						; size = 12
_min$ = -76						; size = 12
_offset$2$ = -64					; size = 4
_offset$3$ = -60					; size = 4
_z$1$ = -56						; size = 4
$T3 = -52						; size = 4
_idx$2$ = -48						; size = 4
tv1519 = -48						; size = 4
_vertface$1$ = -44					; size = 4
_vertfaces$1$ = -40					; size = 4
_offset$1$ = -36					; size = 4
_size$1$ = -36						; size = 4
tv1517 = -36						; size = 4
_idx$3$ = -32						; size = 4
tv1518 = -32						; size = 4
tv1515 = -32						; size = 4
tv1503 = -32						; size = 4
_scale$1$ = -28						; size = 4
_v$1$ = -28						; size = 4
_size$2$ = -24						; size = 4
_vert$1$ = -24						; size = 4
_i$1$ = -20						; size = 4
_i$1$ = -20						; size = 4
_i$1$ = -20						; size = 4
$T4 = -16						; size = 12
_max$ = -16						; size = 12
$T5 = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_a_Material$ = 12					; size = 4
_a_Pos$ = 16						; size = 4
_a_Size$ = 20						; size = 4
?Load3DS@Scene@Raytracer@@QAEXPADPAVMaterial@2@AAVvector3@2@M@Z PROC ; Raytracer::Scene::Load3DS, COMDAT
; _this$ = ecx

; 474  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _filename$[ebp]
	push	ebx
	push	esi
	push	edi

; 475  : 	// load 3ds file to memory
; 476  : 	FILE* f = fopen( filename, "rb" );

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	eax
	mov	ebx, ecx
	call	_fopen

; 477  : 	char* memfile = new char[800 * 1024];

	push	819200					; 000c8000H
	mov	esi, eax
	call	??2@YAPAXI@Z				; operator new

; 478  : 	unsigned long filelength = fread( memfile, 800 * 1024, 1, f );

	push	esi
	push	1
	mov	edi, eax
	push	819200					; 000c8000H
	push	edi
	call	_fread

; 479  : 	fclose( f );

	push	esi
	call	_fclose
	add	esp, 32					; 00000020H

; 480  : 	// initialize chunk parser
; 481  : 	m_Verts = m_TCoords = 0;

	mov	DWORD PTR [ebx+52], 0

; 482  : 	m_Faces = 0;
; 483  : 	// process chunks
; 484  : 	EatChunk( memfile );

	mov	ecx, ebx
	mov	DWORD PTR [ebx+48], 0
	mov	DWORD PTR [ebx+64], 0
	push	edi
	call	?EatChunk@Scene@Raytracer@@QAEJPAD@Z	; Raytracer::Scene::EatChunk

; 485  : 	delete memfile;

	push	edi
	call	??3@YAXPAX@Z				; operator delete

; 486  : 	// determine extends
; 487  : 	vector3 min( vector3( m_Verts[0], m_Verts[1], m_Verts[2] ) );

	mov	ecx, DWORD PTR [ebx+48]
	add	esp, 4

; 489  : 	for ( int i = 1; i < m_NrVerts; i++ )

	mov	esi, DWORD PTR [ebx+56]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm6, DWORD PTR [ecx]
	movss	xmm7, DWORD PTR [ecx+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 488  : 	vector3 max = min;

	movss	xmm0, xmm6
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm5, DWORD PTR [ecx+8]
	movss	DWORD PTR _min$[ebp+8], xmm5
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 488  : 	vector3 max = min;

	mov	eax, DWORD PTR _min$[ebp+8]
	unpcklps xmm0, xmm7
	movq	QWORD PTR _max$[ebp], xmm0

; 490  : 	{
; 491  : 		if (m_Verts[i * 3] < min.x) min.x = m_Verts[i * 3];

	movss	xmm4, DWORD PTR _max$[ebp+4]
	movss	xmm3, DWORD PTR _max$[ebp]
	mov	DWORD PTR _max$[ebp+8], eax
	movss	xmm2, DWORD PTR _max$[ebp+8]
	cmp	esi, 1
	jle	SHORT $LN30@Load3DS
	mov	eax, 12					; 0000000cH
	lea	edx, DWORD PTR [esi-1]
$LL32@Load3DS:
	movss	xmm0, DWORD PTR [ecx+eax]
	comiss	xmm6, xmm0
	jbe	SHORT $LN29@Load3DS
	movaps	xmm6, xmm0
$LN29@Load3DS:

; 492  : 		if (m_Verts[i * 3] > max.x) max.x = m_Verts[i * 3];

	comiss	xmm0, xmm3
	jbe	SHORT $LN28@Load3DS
	movaps	xmm3, xmm0
$LN28@Load3DS:

; 493  : 		if (m_Verts[i * 3 + 1] < min.y) min.y = m_Verts[i * 3 + 1];

	movss	xmm0, DWORD PTR [ecx+eax+4]
	comiss	xmm7, xmm0
	jbe	SHORT $LN27@Load3DS
	movaps	xmm7, xmm0
$LN27@Load3DS:

; 494  : 		if (m_Verts[i * 3 + 1] > max.y) max.y = m_Verts[i * 3 + 1];

	comiss	xmm0, xmm4
	jbe	SHORT $LN26@Load3DS
	movaps	xmm4, xmm0
$LN26@Load3DS:

; 495  : 		if (m_Verts[i * 3 + 2] < min.z) min.z = m_Verts[i * 3 + 2];

	movss	xmm0, DWORD PTR [ecx+eax+8]
	comiss	xmm5, xmm0
	jbe	SHORT $LN25@Load3DS
	movaps	xmm5, xmm0
$LN25@Load3DS:

; 496  : 		if (m_Verts[i * 3 + 2] > max.z) max.z = m_Verts[i * 3 + 2];

	comiss	xmm0, xmm2
	jbe	SHORT $LN31@Load3DS
	movaps	xmm2, xmm0
$LN31@Load3DS:

; 489  : 	for ( int i = 1; i < m_NrVerts; i++ )

	add	eax, 12					; 0000000cH
	dec	edx
	jne	SHORT $LL32@Load3DS
$LN30@Load3DS:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movaps	xmm0, xmm4
	movaps	xmm1, xmm3
	subss	xmm0, xmm7
	subss	xmm1, xmm6
	movss	DWORD PTR _size$2$[ebp], xmm0
	movaps	xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 501  : 	if ((size.x > size.y) && (size.x > size.z)) scale = a_Size / size.x;

	comiss	xmm1, DWORD PTR _size$2$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	DWORD PTR _size$1$[ebp], xmm1
	subss	xmm0, xmm5
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 501  : 	if ((size.x > size.y) && (size.x > size.z)) scale = a_Size / size.x;

	jbe	SHORT $LN23@Load3DS
	comiss	xmm1, xmm0
	jbe	SHORT $LN23@Load3DS
	movss	xmm1, DWORD PTR _a_Size$[ebp]
	divss	xmm1, DWORD PTR _size$1$[ebp]
	jmp	SHORT $LN123@Load3DS
$LN23@Load3DS:

; 502  : 	else if (size.y > size.z) scale = a_Size / size.y; 

	movss	xmm1, DWORD PTR _size$2$[ebp]
	comiss	xmm1, xmm0
	movss	xmm1, DWORD PTR _a_Size$[ebp]
	jbe	SHORT $LN21@Load3DS
	divss	xmm1, DWORD PTR _size$2$[ebp]
	jmp	SHORT $LN123@Load3DS
$LN21@Load3DS:

; 503  : 	else scale = a_Size / size.z;

	divss	xmm1, xmm0
$LN123@Load3DS:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR __real@3f000000

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm3, xmm6

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	ecx, DWORD PTR _a_Pos$[ebp]

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm4, xmm7
	addss	xmm2, xmm5
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 503  : 	else scale = a_Size / size.z;

	movss	DWORD PTR _scale$1$[ebp], xmm1

; 508  : 	Vertex** vert = new Vertex*[m_NrVerts];

	mov	eax, esi
	mov	esi, 4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm3, xmm0
	mulss	xmm4, xmm0
	mulss	xmm2, xmm0
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	subss	xmm3, DWORD PTR [ecx]

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm2, xmm1

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	subss	xmm4, DWORD PTR [ecx+4]
	subss	xmm2, DWORD PTR [ecx+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 508  : 	Vertex** vert = new Vertex*[m_NrVerts];

	xor	ecx, ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	DWORD PTR _offset$1$[ebp], xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 508  : 	Vertex** vert = new Vertex*[m_NrVerts];

	mul	esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	DWORD PTR _offset$2$[ebp], xmm4
	movss	DWORD PTR _offset$3$[ebp], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 508  : 	Vertex** vert = new Vertex*[m_NrVerts];

	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	DWORD PTR _vert$1$[ebp], eax

; 509  : 	Primitive*** vertface = new Primitive**[m_NrVerts];

	xor	ecx, ecx
	mov	eax, DWORD PTR [ebx+56]
	mul	esi
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	DWORD PTR _vertface$1$[ebp], eax

; 510  : 	int* vertfaces = new int[m_NrVerts];

	xor	ecx, ecx
	mov	eax, DWORD PTR [ebx+56]
	mul	esi
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _vertfaces$1$[ebp], eax

; 511  : 	for (int i = 0; i < m_NrVerts; i++ ) 

	cmp	DWORD PTR [ebx+56], 0
	mov	DWORD PTR _i$1$[ebp], 0
	jle	$LN17@Load3DS
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	mov	edx, DWORD PTR _vertface$1$[ebp]
	xor	edi, edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 511  : 	for (int i = 0; i < m_NrVerts; i++ ) 

	mov	ecx, DWORD PTR _vert$1$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	mov	esi, edx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 511  : 	for (int i = 0; i < m_NrVerts; i++ ) 

	sub	ecx, edx
	sub	eax, edx
	mov	DWORD PTR tv1519[ebp], ecx
	mov	DWORD PTR tv1518[ebp], eax
	npad	2
$LL19@Load3DS:

; 512  : 	{
; 513  : 		real x = m_Verts[i * 3], z = m_Verts[i * 3 + 1], y = m_Verts[i * 3 + 2];

	mov	eax, DWORD PTR [ebx+48]

; 514  : 		vert[i] = new Vertex( vector3( (x * scale) - offset.x, (y * scale ) - offset.y, (z * scale) - offset.z ), 0, 0 );

	push	32					; 00000020H
	movss	xmm0, DWORD PTR [eax+edi]
	movq	QWORD PTR $T5[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+edi+4]
	movss	DWORD PTR _z$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+edi+8]
	movss	DWORD PTR $T3[ebp], xmm0
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	test	ecx, ecx
	je	SHORT $LN35@Load3DS
	movss	xmm1, DWORD PTR _scale$1$[ebp]
	movq	xmm0, QWORD PTR $T5[ebp]
	movss	xmm3, DWORD PTR $T3[ebp]
	movss	xmm2, DWORD PTR _z$1$[ebp]
	mulss	xmm0, xmm1
	mulss	xmm3, xmm1
	subss	xmm0, DWORD PTR _offset$1$[ebp]
	mulss	xmm2, xmm1
	subss	xmm3, DWORD PTR _offset$2$[ebp]
	subss	xmm2, DWORD PTR _offset$3$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	unpcklps xmm0, xmm3
	movq	QWORD PTR [ecx], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T2[ebp+8], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 514  : 		vert[i] = new Vertex( vector3( (x * scale) - offset.x, (y * scale ) - offset.y, (z * scale) - offset.z ), 0, 0 );

	jmp	SHORT $LN36@Load3DS
$LN35@Load3DS:
	xor	ecx, ecx
$LN36@Load3DS:

; 515  : 		vert[i]->SetUV( vert[i]->GetPos().cell[0] / a_Size, vert[i]->GetPos().cell[1] / a_Size );

	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx]
	divss	xmm1, DWORD PTR _a_Size$[ebp]
	mov	eax, DWORD PTR tv1519[ebp]

; 516  : 		vertface[i] = new Primitive*[10];

	push	40					; 00000028H
	mov	DWORD PTR [eax+esi], ecx
	divss	xmm0, DWORD PTR _a_Size$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 91   : 	void SetUV( real a_U, real a_V ) { m_U = a_U; m_V = a_V; }

	movss	DWORD PTR [ecx+28], xmm1
	movss	DWORD PTR [ecx+24], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 516  : 		vertface[i] = new Primitive*[10];

	call	??2@YAPAXI@Z				; operator new
	mov	DWORD PTR [esi], eax
	add	esp, 4

; 517  : 		vertfaces[i] = 0;

	mov	eax, DWORD PTR tv1518[ebp]
	add	edi, 12					; 0000000cH
	mov	DWORD PTR [eax+esi], 0
	add	esi, 4
	mov	eax, DWORD PTR _i$1$[ebp]
	inc	eax
	mov	DWORD PTR _i$1$[ebp], eax
	cmp	eax, DWORD PTR [ebx+56]
	jl	$LL19@Load3DS
$LN17@Load3DS:

; 518  : 	}
; 519  : 	// convert to ray tracer primitives
; 520  : 	for (int i = 0; i < m_NrFaces; i++)

	cmp	DWORD PTR [ebx+60], 0
	mov	DWORD PTR _i$1$[ebp], 0
	jle	$LN14@Load3DS

; 521  : 	{
; 522  : 		int idx[3];
; 523  : 		for ( int v = 0; v < 3; v++ ) idx[v] = m_Faces[i * 3 + v];

	xor	edi, edi
	npad	3
$LL16@Load3DS:
	mov	eax, DWORD PTR [ebx+64]

; 524  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::TRIANGLE, vert[idx[0]], vert[idx[1]], vert[idx[2]] );

	push	72					; 00000048H
	movzx	ecx, WORD PTR [edi+eax+2]
	movzx	esi, WORD PTR [edi+eax]
	movzx	eax, WORD PTR [edi+eax+4]
	mov	DWORD PTR _idx$2$[ebp], ecx
	mov	DWORD PTR _idx$3$[ebp], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN37@Load3DS
	mov	edx, DWORD PTR _vert$1$[ebp]
	mov	ecx, DWORD PTR _idx$3$[ebp]
	push	DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _idx$2$[ebp]
	push	DWORD PTR [edx+ecx*4]
	mov	ecx, eax
	push	DWORD PTR [edx+esi*4]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN38@Load3DS
$LN37@Load3DS:
	xor	edx, edx
$LN38@Load3DS:
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [eax+ecx*4], edx

; 525  : 		m_Primitive[m_Primitives++]->SetMaterial( a_Material );

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR [ebx], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 136  : 	void SetMaterial( Material* a_Mat ) { m_Material = a_Mat; }

	mov	eax, DWORD PTR _a_Material$[ebp]
	mov	DWORD PTR [edx], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 526  : 		for (int v = 0; v < 1; v++) if (vertfaces[idx[v]] < 10) vertface[idx[v]][vertfaces[idx[v]]++] = m_Primitive[m_Primitives - 1];

	mov	eax, DWORD PTR _vertfaces$1$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR tv1515[ebp], eax
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN9@Load3DS
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR _vertface$1$[ebp]
	mov	eax, DWORD PTR [eax+edx*4-4]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	edx, DWORD PTR tv1515[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	eax, DWORD PTR _vertfaces$1$[ebp]
	inc	DWORD PTR [eax+esi*4]
$LN9@Load3DS:

; 518  : 	}
; 519  : 	// convert to ray tracer primitives
; 520  : 	for (int i = 0; i < m_NrFaces; i++)

	mov	eax, DWORD PTR _i$1$[ebp]
	add	edi, 6
	inc	eax
	mov	DWORD PTR _i$1$[ebp], eax
	cmp	eax, DWORD PTR [ebx+60]
	jl	$LL16@Load3DS
$LN14@Load3DS:

; 527  : 	}
; 528  : 	// calculate vertex normals
; 529  : 	for (int i = 0; i < m_NrVerts; i++)

	cmp	DWORD PTR [ebx+56], 0
	mov	DWORD PTR _i$1$[ebp], 0
	jle	$LN4@Load3DS
	mov	edx, DWORD PTR _vert$1$[ebp]
	mov	eax, DWORD PTR _vertfaces$1$[ebp]
	sub	edx, eax
	mov	edi, DWORD PTR _vertface$1$[ebp]
	sub	eax, edi
	mov	DWORD PTR tv1503[ebp], edx
	mov	DWORD PTR tv1517[ebp], eax
$LL6@Load3DS:

; 532  : 		for ( int v = 0; v < vertfaces[i]; v++ ) N += vertface[i][v]->GetNormal();

	mov	esi, DWORD PTR [eax+edi]
	xor	ecx, ecx
	mov	DWORD PTR _v$1$[ebp], ecx
	xorps	xmm2, xmm2
	xorps	xmm3, xmm3
	xorps	xmm4, xmm4
	cmp	esi, 4
	jl	$LC113@Load3DS
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	edx, DWORD PTR [edi]
	lea	ecx, DWORD PTR [esi-4]
	shr	ecx, 2
	add	edx, 8
	inc	ecx
	lea	eax, DWORD PTR [ecx*4]
	mov	DWORD PTR _v$1$[ebp], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 532  : 		for ( int v = 0; v < vertfaces[i]; v++ ) N += vertface[i][v]->GetNormal();

$LL114@Load3DS:
	mov	eax, DWORD PTR [edx-8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	movq	xmm0, QWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR $T4[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 532  : 		for ( int v = 0; v < vertfaces[i]; v++ ) N += vertface[i][v]->GetNormal();

	mov	eax, DWORD PTR [edx-4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	movq	QWORD PTR $T4[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	movss	xmm1, DWORD PTR $T4[ebp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR $T4[ebp+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	movq	xmm0, QWORD PTR [eax+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR $T4[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	mov	eax, DWORD PTR [eax+16]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	addss	xmm3, xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	movq	QWORD PTR $T4[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	movss	xmm4, DWORD PTR $T4[ebp]
	addss	xmm4, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	mov	DWORD PTR $T4[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 532  : 		for ( int v = 0; v < vertfaces[i]; v++ ) N += vertface[i][v]->GetNormal();

	mov	eax, DWORD PTR [edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	movss	xmm1, DWORD PTR $T4[ebp+4]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR $T4[ebp+8]
	addss	xmm2, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	movq	xmm0, QWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+16]
	movq	QWORD PTR $T4[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	movss	xmm3, DWORD PTR $T4[ebp]
	addss	xmm3, xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	mov	DWORD PTR $T4[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 532  : 		for ( int v = 0; v < vertfaces[i]; v++ ) N += vertface[i][v]->GetNormal();

	mov	eax, DWORD PTR [edx+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	add	edx, 16					; 00000010H
	movss	xmm4, DWORD PTR $T4[ebp+4]
	addss	xmm4, xmm1
	movss	xmm1, DWORD PTR $T4[ebp+8]
	addss	xmm1, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	movq	xmm0, QWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+16]
	movq	QWORD PTR $T4[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	movss	xmm2, DWORD PTR $T4[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	mov	DWORD PTR $T4[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR $T4[ebp+4]
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR $T4[ebp+8]
	addss	xmm4, xmm1
	dec	ecx
	jne	$LL114@Load3DS
	mov	ecx, DWORD PTR _v$1$[ebp]
$LC113@Load3DS:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 532  : 		for ( int v = 0; v < vertfaces[i]; v++ ) N += vertface[i][v]->GetNormal();

	cmp	ecx, esi
	jge	SHORT $LN112@Load3DS
	mov	eax, DWORD PTR [edi]
	mov	edx, esi
	sub	edx, DWORD PTR _v$1$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
$LC3@Load3DS:
	mov	eax, DWORD PTR [ecx]
	add	ecx, 4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 152  : 	vector3 GetNormal() { return m_N; }

	movq	xmm0, QWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+16]
	movq	QWORD PTR $T4[ebp], xmm0
	mov	DWORD PTR $T4[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	addss	xmm2, DWORD PTR $T4[ebp]
	addss	xmm3, DWORD PTR $T4[ebp+4]
	addss	xmm4, DWORD PTR $T4[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 532  : 		for ( int v = 0; v < vertfaces[i]; v++ ) N += vertface[i][v]->GetNormal();

	dec	edx
	jne	SHORT $LC3@Load3DS
$LN112@Load3DS:

; 533  : 		N *= 1.0f / vertfaces[i];

	movss	xmm1, DWORD PTR __real@3f800000
	movd	xmm0, esi
	cvtdq2ps xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 93   : 	void SetNormal( vector3& a_N ) { m_Normal = a_N; }

	mov	ecx, DWORD PTR tv1517[ebp]
	mov	edx, DWORD PTR tv1503[ebp]
	add	ecx, edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 533  : 		N *= 1.0f / vertfaces[i];

	divss	xmm1, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 93   : 	void SetNormal( vector3& a_N ) { m_Normal = a_N; }

	mov	ecx, DWORD PTR [ecx+edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }

	mulss	xmm2, xmm1
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 93   : 	void SetNormal( vector3& a_N ) { m_Normal = a_N; }

	unpcklps xmm2, xmm3
	movq	QWORD PTR [ecx+12], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }

	movss	DWORD PTR _N$1[ebp+8], xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 93   : 	void SetNormal( vector3& a_N ) { m_Normal = a_N; }

	mov	eax, DWORD PTR _N$1[ebp+8]
	mov	DWORD PTR [ecx+20], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 535  : 		delete vertface[i];

	push	DWORD PTR [edi]
	call	??3@YAXPAX@Z				; operator delete
	mov	edx, DWORD PTR _i$1$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR tv1517[ebp]
	inc	edx
	add	edi, 4
	mov	DWORD PTR _i$1$[ebp], edx
	cmp	edx, DWORD PTR [ebx+56]
	jl	$LL6@Load3DS
$LN4@Load3DS:

; 536  : 	}
; 537  : 	delete vertface;

	push	DWORD PTR _vertface$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete

; 538  : 	delete vertfaces;

	push	DWORD PTR _vertfaces$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete

; 539  : 	delete vert;

	push	DWORD PTR _vert$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete

; 540  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 12					; 0000000cH
	xor	ecx, ebp
	pop	edi
	pop	esi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Load3DS@Scene@Raytracer@@QAEXPADPAVMaterial@2@AAVvector3@2@M@Z ENDP ; Raytracer::Scene::Load3DS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?AddPlane@Scene@Raytracer@@QAEXVvector3@2@000PAVMaterial@2@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
$T1 = -4						; size = 4
_a_P1$ = 8						; size = 12
_a_P2$ = 20						; size = 12
_a_P3$ = 32						; size = 12
_a_P4$ = 44						; size = 12
_a_Mat$ = 56						; size = 4
?AddPlane@Scene@Raytracer@@QAEXVvector3@2@000PAVMaterial@2@@Z PROC ; Raytracer::Scene::AddPlane, COMDAT
; _this$ = ecx

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi

; 654  : 	v[0] = new Vertex( a_P1, 0, 0 );

	push	32					; 00000020H
	mov	DWORD PTR _this$1$[ebp], ecx
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN3@AddPlane
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	movq	xmm0, QWORD PTR _a_P1$[ebp]
	movq	QWORD PTR [edi], xmm0
	mov	ecx, DWORD PTR _a_P1$[ebp+8]
	mov	DWORD PTR [edi+8], ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [edi+12], 0
	mov	DWORD PTR [edi+16], 0
	mov	DWORD PTR [edi+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [edi+24], 0
	mov	DWORD PTR [edi+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 654  : 	v[0] = new Vertex( a_P1, 0, 0 );

	jmp	SHORT $LN4@AddPlane
$LN3@AddPlane:
	xor	edi, edi
$LN4@AddPlane:

; 655  : 	v[1] = new Vertex( a_P2, 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN5@AddPlane
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	movq	xmm0, QWORD PTR _a_P2$[ebp]
	movq	QWORD PTR [esi], xmm0
	mov	ecx, DWORD PTR _a_P2$[ebp+8]
	mov	DWORD PTR [esi+8], ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 655  : 	v[1] = new Vertex( a_P2, 0, 0 );

	jmp	SHORT $LN6@AddPlane
$LN5@AddPlane:
	xor	esi, esi
$LN6@AddPlane:

; 656  : 	v[2] = new Vertex( a_P3, 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	test	eax, eax
	je	SHORT $LN7@AddPlane
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	movq	xmm0, QWORD PTR _a_P3$[ebp]
	movq	QWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _a_P3$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [eax+12], 0
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 656  : 	v[2] = new Vertex( a_P3, 0, 0 );

	jmp	SHORT $LN8@AddPlane
$LN7@AddPlane:
	mov	DWORD PTR $T1[ebp], 0
$LN8@AddPlane:

; 657  : 	v[3] = new Vertex( a_P4, 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	je	SHORT $LN9@AddPlane
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	movq	xmm0, QWORD PTR _a_P4$[ebp]
	movq	QWORD PTR [ebx], xmm0
	mov	ecx, DWORD PTR _a_P4$[ebp+8]
	mov	DWORD PTR [ebx+8], ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ebx+12], 0
	mov	DWORD PTR [ebx+16], 0
	mov	DWORD PTR [ebx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ebx+24], 0
	mov	DWORD PTR [ebx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 657  : 	v[3] = new Vertex( a_P4, 0, 0 );

	jmp	SHORT $LN10@AddPlane
$LN9@AddPlane:
	xor	ebx, ebx
$LN10@AddPlane:

; 658  : 	m_Primitive[m_Primitives] = new Primitive( Primitive::TRIANGLE, v[0], v[1], v[3] );

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@AddPlane
	push	ebx
	push	esi
	push	edi
	push	2
	mov	ecx, eax
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN12@AddPlane
$LN11@AddPlane:
	xor	edx, edx
$LN12@AddPlane:
	mov	edi, DWORD PTR _this$1$[ebp]

; 660  : 	m_Primitive[m_Primitives] = new Primitive( Primitive::TRIANGLE, v[1], v[2], v[3] );

	push	72					; 00000048H
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR [edi], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 136  : 	void SetMaterial( Material* a_Mat ) { m_Material = a_Mat; }

	mov	eax, DWORD PTR _a_Mat$[ebp]
	mov	DWORD PTR [edx], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 660  : 	m_Primitive[m_Primitives] = new Primitive( Primitive::TRIANGLE, v[1], v[2], v[3] );

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@AddPlane
	push	ebx
	push	DWORD PTR $T1[ebp]
	mov	ecx, eax
	push	esi
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN14@AddPlane
$LN13@AddPlane:
	xor	edx, edx
$LN14@AddPlane:
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+ecx*4], edx

; 661  : 	m_Primitive[m_Primitives++]->SetMaterial( a_Mat );

	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR [edi], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 136  : 	void SetMaterial( Material* a_Mat ) { m_Material = a_Mat; }

	mov	eax, DWORD PTR _a_Mat$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR [edx], eax
	pop	ebx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 662  : }

	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
?AddPlane@Scene@Raytracer@@QAEXVvector3@2@000PAVMaterial@2@@Z ENDP ; Raytracer::Scene::AddPlane
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?AddBox@Scene@Raytracer@@QAEXVvector3@2@0@Z
_TEXT	SEGMENT
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 12
$T4 = -32						; size = 12
$T5 = -32						; size = 12
$T6 = -32						; size = 12
$T7 = -32						; size = 12
$T8 = -32						; size = 12
$T9 = -32						; size = 12
$T10 = -32						; size = 12
$T11 = -20						; size = 4
$T12 = -16						; size = 4
$T13 = -12						; size = 4
$T14 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_a_Pos$ = 8						; size = 12
_a_Size$ = 20						; size = 12
?AddBox@Scene@Raytracer@@QAEXVvector3@2@0@Z PROC	; Raytracer::Scene::AddBox, COMDAT
; _this$ = ecx

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 623  : 	v[0] = new Vertex( vector3( a_Pos.x, a_Pos.y, a_Pos.z ), 0, 0 );

	push	32					; 00000020H
	mov	esi, ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR $T2[ebp], ebx
	test	ebx, ebx
	je	SHORT $LN3@AddBox
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm2, DWORD PTR _a_Pos$[ebp]
	movss	xmm1, DWORD PTR _a_Pos$[ebp+4]
	movss	xmm0, DWORD PTR _a_Pos$[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	unpcklps xmm2, xmm1
	movq	QWORD PTR [ebx], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T10[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T10[ebp+8]
	mov	DWORD PTR [ebx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ebx+12], 0
	mov	DWORD PTR [ebx+16], 0
	mov	DWORD PTR [ebx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ebx+24], 0
	mov	DWORD PTR [ebx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 623  : 	v[0] = new Vertex( vector3( a_Pos.x, a_Pos.y, a_Pos.z ), 0, 0 );

	jmp	SHORT $LN4@AddBox
$LN3@AddBox:
	mov	DWORD PTR $T2[ebp], 0
$LN4@AddBox:

; 624  : 	v[1] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y, a_Pos.z ), 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN5@AddBox
	movss	xmm2, DWORD PTR _a_Size$[ebp]
	addss	xmm2, DWORD PTR _a_Pos$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm1, DWORD PTR _a_Pos$[ebp+4]
	movss	xmm0, DWORD PTR _a_Pos$[ebp+8]
	movss	DWORD PTR $T9[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T9[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edi], xmm2
	mov	DWORD PTR [edi+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [edi+12], 0
	mov	DWORD PTR [edi+16], 0
	mov	DWORD PTR [edi+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [edi+24], 0
	mov	DWORD PTR [edi+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 624  : 	v[1] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y, a_Pos.z ), 0, 0 );

	jmp	SHORT $LN6@AddBox
$LN5@AddBox:
	xor	edi, edi
$LN6@AddBox:

; 625  : 	v[2] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y + a_Size.y, a_Pos.z ), 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	je	SHORT $LN7@AddBox
	movss	xmm2, DWORD PTR _a_Size$[ebp]
	movss	xmm1, DWORD PTR _a_Size$[ebp+4]
	addss	xmm2, DWORD PTR _a_Pos$[ebp]
	addss	xmm1, DWORD PTR _a_Pos$[ebp+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm0, DWORD PTR _a_Pos$[ebp+8]
	movss	DWORD PTR $T8[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T8[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [ebx], xmm2
	mov	DWORD PTR [ebx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ebx+12], 0
	mov	DWORD PTR [ebx+16], 0
	mov	DWORD PTR [ebx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ebx+24], 0
	mov	DWORD PTR [ebx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 625  : 	v[2] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y + a_Size.y, a_Pos.z ), 0, 0 );

	jmp	SHORT $LN8@AddBox
$LN7@AddBox:
	xor	ebx, ebx
$LN8@AddBox:

; 626  : 	v[3] = new Vertex( vector3( a_Pos.x, a_Pos.y + a_Size.y, a_Pos.z ), 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR $T14[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN9@AddBox
	movss	xmm1, DWORD PTR _a_Size$[ebp+4]
	addss	xmm1, DWORD PTR _a_Pos$[ebp+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm2, DWORD PTR _a_Pos$[ebp]
	movss	xmm0, DWORD PTR _a_Pos$[ebp+8]
	movss	DWORD PTR $T7[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T7[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [ecx], xmm2
	mov	DWORD PTR [ecx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 626  : 	v[3] = new Vertex( vector3( a_Pos.x, a_Pos.y + a_Size.y, a_Pos.z ), 0, 0 );

	jmp	SHORT $LN10@AddBox
$LN9@AddBox:
	mov	DWORD PTR $T14[ebp], 0
$LN10@AddBox:

; 627  : 	v[4] = new Vertex( vector3( a_Pos.x, a_Pos.y, a_Pos.z + a_Size.z ), 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR $T12[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN11@AddBox
	movss	xmm0, DWORD PTR _a_Size$[ebp+8]
	addss	xmm0, DWORD PTR _a_Pos$[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm2, DWORD PTR _a_Pos$[ebp]
	movss	xmm1, DWORD PTR _a_Pos$[ebp+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	unpcklps xmm2, xmm1
	movq	QWORD PTR [ecx], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T6[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T6[ebp+8]
	mov	DWORD PTR [ecx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 627  : 	v[4] = new Vertex( vector3( a_Pos.x, a_Pos.y, a_Pos.z + a_Size.z ), 0, 0 );

	jmp	SHORT $LN12@AddBox
$LN11@AddBox:
	mov	DWORD PTR $T12[ebp], 0
$LN12@AddBox:

; 628  : 	v[5] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y, a_Pos.z + a_Size.z ), 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR $T13[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN13@AddBox
	movss	xmm2, DWORD PTR _a_Size$[ebp]
	movss	xmm0, DWORD PTR _a_Size$[ebp+8]
	addss	xmm2, DWORD PTR _a_Pos$[ebp]
	addss	xmm0, DWORD PTR _a_Pos$[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm1, DWORD PTR _a_Pos$[ebp+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	unpcklps xmm2, xmm1
	movq	QWORD PTR [ecx], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T5[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T5[ebp+8]
	mov	DWORD PTR [ecx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 628  : 	v[5] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y, a_Pos.z + a_Size.z ), 0, 0 );

	jmp	SHORT $LN14@AddBox
$LN13@AddBox:
	mov	DWORD PTR $T13[ebp], 0
$LN14@AddBox:

; 629  : 	v[6] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y + a_Size.y, a_Pos.z + a_Size.z ), 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR $T1[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN15@AddBox
	movss	xmm2, DWORD PTR _a_Size$[ebp]
	movss	xmm1, DWORD PTR _a_Size$[ebp+4]
	movss	xmm0, DWORD PTR _a_Size$[ebp+8]
	addss	xmm2, DWORD PTR _a_Pos$[ebp]
	addss	xmm1, DWORD PTR _a_Pos$[ebp+4]
	addss	xmm0, DWORD PTR _a_Pos$[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	unpcklps xmm2, xmm1
	movq	QWORD PTR [ecx], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T4[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 629  : 	v[6] = new Vertex( vector3( a_Pos.x + a_Size.x, a_Pos.y + a_Size.y, a_Pos.z + a_Size.z ), 0, 0 );

	jmp	SHORT $LN16@AddBox
$LN15@AddBox:
	mov	DWORD PTR $T1[ebp], 0
$LN16@AddBox:

; 630  : 	v[7] = new Vertex( vector3( a_Pos.x, a_Pos.y + a_Size.y, a_Pos.z + a_Size.z ), 0, 0 );

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR $T11[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN17@AddBox
	movss	xmm1, DWORD PTR _a_Size$[ebp+4]
	movss	xmm0, DWORD PTR _a_Size$[ebp+8]
	addss	xmm1, DWORD PTR _a_Pos$[ebp+4]
	addss	xmm0, DWORD PTR _a_Pos$[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm2, DWORD PTR _a_Pos$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	unpcklps xmm2, xmm1
	movq	QWORD PTR [ecx], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T3[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 630  : 	v[7] = new Vertex( vector3( a_Pos.x, a_Pos.y + a_Size.y, a_Pos.z + a_Size.z ), 0, 0 );

	jmp	SHORT $LN18@AddBox
$LN17@AddBox:
	mov	DWORD PTR $T11[ebp], 0
$LN18@AddBox:

; 631  : 	// front plane
; 632  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[0], v[1], v[3] );

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN19@AddBox
	push	DWORD PTR $T14[ebp]
	mov	ecx, eax
	push	edi
	push	DWORD PTR $T2[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN20@AddBox
$LN19@AddBox:
	xor	edx, edx
$LN20@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 633  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[1], v[2], v[3] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@AddBox
	push	DWORD PTR $T14[ebp]
	mov	ecx, eax
	push	ebx
	push	edi
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN22@AddBox
$LN21@AddBox:
	xor	edx, edx
$LN22@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 634  : 	// back plane
; 635  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[5], v[4], v[7] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN23@AddBox
	push	DWORD PTR $T11[ebp]
	mov	ecx, eax
	push	DWORD PTR $T12[ebp]
	push	DWORD PTR $T13[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN24@AddBox
$LN23@AddBox:
	xor	edx, edx
$LN24@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 636  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[5], v[7], v[6] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN25@AddBox
	push	DWORD PTR $T1[ebp]
	mov	ecx, eax
	push	DWORD PTR $T11[ebp]
	push	DWORD PTR $T13[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN26@AddBox
$LN25@AddBox:
	xor	edx, edx
$LN26@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 637  : 	// left plane
; 638  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[4], v[0], v[3] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN27@AddBox
	push	DWORD PTR $T14[ebp]
	mov	ecx, eax
	push	DWORD PTR $T2[ebp]
	push	DWORD PTR $T12[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN28@AddBox
$LN27@AddBox:
	xor	edx, edx
$LN28@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 639  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[4], v[3], v[7] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN29@AddBox
	push	DWORD PTR $T11[ebp]
	mov	ecx, eax
	push	DWORD PTR $T14[ebp]
	push	DWORD PTR $T12[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN30@AddBox
$LN29@AddBox:
	xor	edx, edx
$LN30@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 640  : 	// right plane
; 641  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[1], v[5], v[2] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN31@AddBox
	push	ebx
	push	DWORD PTR $T13[ebp]
	mov	ecx, eax
	push	edi
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN32@AddBox
$LN31@AddBox:
	xor	edx, edx
$LN32@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 642  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[5], v[6], v[2] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN33@AddBox
	push	ebx
	push	DWORD PTR $T1[ebp]
	mov	ecx, eax
	push	DWORD PTR $T13[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN34@AddBox
$LN33@AddBox:
	xor	edx, edx
$LN34@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 643  : 	// top plane
; 644  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[4], v[5], v[1] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN35@AddBox
	push	edi
	push	DWORD PTR $T13[ebp]
	mov	ecx, eax
	push	DWORD PTR $T12[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN36@AddBox
$LN35@AddBox:
	xor	edx, edx
$LN36@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 645  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[4], v[1], v[0] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN37@AddBox
	push	DWORD PTR $T2[ebp]
	mov	ecx, eax
	push	edi
	push	DWORD PTR $T12[ebp]
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN38@AddBox
$LN37@AddBox:
	xor	edx, edx
$LN38@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 646  : 	// bottom plane
; 647  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[6], v[7], v[2] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	mov	edi, DWORD PTR $T11[ebp]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN39@AddBox
	push	ebx
	push	edi
	push	DWORD PTR $T1[ebp]
	mov	ecx, eax
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN40@AddBox
$LN39@AddBox:
	xor	edx, edx
$LN40@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 648  : 	m_Primitive[m_Primitives++] = new Primitive( Primitive::TRIANGLE, v[7], v[3], v[2] );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN41@AddBox
	push	ebx
	push	DWORD PTR $T14[ebp]
	mov	ecx, eax
	push	edi
	push	2
	call	??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN42@AddBox
$LN41@AddBox:
	xor	edx, edx
$LN42@AddBox:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	pop	edi
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi]

; 649  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?AddBox@Scene@Raytracer@@QAEXVvector3@2@0@Z ENDP	; Raytracer::Scene::AddBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetExtends@Scene@Raytracer@@QAEAAVaabb@2@XZ
_TEXT	SEGMENT
?GetExtends@Scene@Raytracer@@QAEAAVaabb@2@XZ PROC	; Raytracer::Scene::GetExtends, COMDAT
; _this$ = ecx

; 271  : 	aabb& GetExtends() { return m_Extends; }

	lea	eax, DWORD PTR [ecx+16]
	ret	0
?GetExtends@Scene@Raytracer@@QAEAAVaabb@2@XZ ENDP	; Raytracer::Scene::GetExtends
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetPrimitive@Scene@Raytracer@@QAEPAVPrimitive@2@H@Z
_TEXT	SEGMENT
_a_Idx$ = 8						; size = 4
?GetPrimitive@Scene@Raytracer@@QAEPAVPrimitive@2@H@Z PROC ; Raytracer::Scene::GetPrimitive, COMDAT
; _this$ = ecx

; 268  : 	Primitive* GetPrimitive( int a_Idx ) { return m_Primitive[a_Idx]; }

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _a_Idx$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	pop	ebp
	ret	4
?GetPrimitive@Scene@Raytracer@@QAEPAVPrimitive@2@H@Z ENDP ; Raytracer::Scene::GetPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetNrPrimitives@Scene@Raytracer@@QAEHXZ
_TEXT	SEGMENT
?GetNrPrimitives@Scene@Raytracer@@QAEHXZ PROC		; Raytracer::Scene::GetNrPrimitives, COMDAT
; _this$ = ecx

; 267  : 	int GetNrPrimitives() { return m_Primitives; }

	mov	eax, DWORD PTR [ecx]
	ret	0
?GetNrPrimitives@Scene@Raytracer@@QAEHXZ ENDP		; Raytracer::Scene::GetNrPrimitives
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z
_TEXT	SEGMENT
$T2 = -116						; size = 12
$T3 = -116						; size = 12
$T4 = -116						; size = 12
$T5 = -116						; size = 12
$T6 = -116						; size = 12
$T7 = -104						; size = 12
$T8 = -104						; size = 12
$T9 = -104						; size = 12
$T10 = -104						; size = 12
$T11 = -104						; size = 12
$T12 = -104						; size = 12
$T13 = -92						; size = 24
$T14 = -80						; size = 12
$T15 = -80						; size = 12
$T16 = -80						; size = 12
$T17 = -68						; size = 12
$T18 = -68						; size = 12
$T19 = -68						; size = 12
$T20 = -56						; size = 12
$T21 = -56						; size = 12
$T22 = -56						; size = 12
$T23 = -56						; size = 12
$T24 = -56						; size = 12
$T25 = -52						; size = 8
$T26 = -44						; size = 12
$T27 = -44						; size = 12
$T28 = -44						; size = 12
$T29 = -44						; size = 12
$T30 = -44						; size = 12
$T31 = -44						; size = 12
$T32 = -44						; size = 12
$T33 = -44						; size = 12
$T34 = -40						; size = 8
$T35 = -32						; size = 12
$T36 = -32						; size = 12
$T37 = -32						; size = 12
$T38 = -28						; size = 8
$T39 = -20						; size = 8
__$EHRec$ = -12						; size = 12
$T40 = 8						; size = 4
$T41 = 8						; size = 4
$T42 = 8						; size = 4
$T43 = 8						; size = 4
$T44 = 8						; size = 4
$T45 = 8						; size = 4
_a_MsgSurf$ = 8						; size = 4
?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z PROC	; Raytracer::Scene::InitScene, COMDAT
; _this$ = ecx

; 665  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 666  : 	Material* mat;
; 667  : 	int x;
; 668  : 	vector3 p1, p2;
; 669  : 	switch (m_State)

	mov	eax, DWORD PTR [esi+44]
	cmp	eax, 3
	ja	$LN1@InitScene
	jmp	DWORD PTR $LN199@InitScene[eax*4]
$LN23@InitScene:

; 670  : 	{
; 671  : 	case 0:
; 672  : 		a_MsgSurf->Print( "constructing geometry", 2, 2, 0xffffffff );

	mov	ecx, DWORD PTR _a_MsgSurf$[ebp]
	push	-1
	push	2
	push	2
	push	OFFSET ??_C@_0BG@JCPNHFAO@constructing?5geometry?$AA@
	call	?Print@Surface@Raytracer@@QAEXPADHHI@Z	; Raytracer::Surface::Print

; 746  : 	};
; 747  : 	m_State++;

	inc	DWORD PTR [esi+44]

; 748  : 	return false;

	xor	al, al

; 749  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN22@InitScene:

; 673  : 		break;
; 674  : 	case 1:
; 675  : 		m_Primitive = new Primitive*[20000];

	push	80000					; 00013880H
	call	??2@YAPAXI@Z				; operator new

; 676  : 		m_Primitives = 0;
; 677  : 		m_Light = new Light*[MAXLIGHTS];

	push	40					; 00000028H
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi], 0
	call	??2@YAPAXI@Z				; operator new

; 678  : 		m_Lights = 0;
; 679  : 		// ground plane
; 680  : 		mat = new Material();

	push	56					; 00000038H
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+4], 0
	call	??2@YAPAXI@Z				; operator new
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN28@InitScene
	mov	ecx, eax
	call	??0Material@Raytracer@@QAE@XZ		; Raytracer::Material::Material
	mov	ecx, eax
	jmp	SHORT $LN29@InitScene
$LN28@InitScene:
	xor	ecx, ecx
$LN29@InitScene:

; 103  : 	m_Color = a_Col;

	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3e99999a

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	movss	xmm3, DWORD PTR __real@c08ccccd
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm2, DWORD PTR __real@41500000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	unpcklps xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm1, DWORD PTR __real@c1500000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [ecx], xmm0

; 104  : 	m_Diff = a_Diff;

	movss	xmm0, DWORD PTR __real@3f800000

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	push	ecx

; 89   : }
; 90   : 
; 91   : void Material::SetUVScale( real a_UScale, real a_VScale )
; 92   : { 
; 93   : 	m_UScale = a_UScale; 
; 94   : 	m_VScale = a_VScale; 
; 95   : 	m_RUScale = 1.0f / a_UScale;
; 96   : 	m_RVScale = 1.0f / a_VScale;
; 97   : }
; 98   : 
; 99   : void Material::SetParameters( real a_Refl, real a_Refr, Color& a_Col, real a_Diff, real a_Spec )
; 100  : {
; 101  : 	m_Refl = a_Refl;

	mov	DWORD PTR [ecx+12], 0

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	sub	esp, 12					; 0000000cH

; 102  : 	m_Refr = a_Refr;

	mov	DWORD PTR [ecx+16], 0

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [ecx+20], 1065353216		; 3f800000H

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [ecx+24], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T24[ebp+8], 1050253722	; 3e99999aH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	mov	eax, DWORD PTR $T24[ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	mov	ecx, esp

; 104  : 	m_Diff = a_Diff;

	movq	QWORD PTR $T25[ebp], xmm0

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	sub	esp, 12					; 0000000cH
	movaps	xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T33[ebp+8], 1105723392	; 41e80000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	mov	eax, DWORD PTR $T33[ebp+8]
	unpcklps xmm0, xmm3
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, xmm2
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm0, xmm3
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T19[ebp+8], 1105723392	; 41e80000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	mov	eax, DWORD PTR $T19[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, xmm2
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm0, xmm3
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T16[ebp+8], -1062207488	; c0b00000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	mov	eax, DWORD PTR $T16[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, xmm1
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm0, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T12[ebp+8], -1062207488	; c0b00000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	mov	eax, DWORD PTR $T12[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movq	QWORD PTR $T38[ebp], xmm1
	movq	QWORD PTR $T39[ebp], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 683  : 				  vector3(  13, -4.4f, 29 ), vector3( -13, -4.4f, 29 ), mat );

	call	?AddPlane@Scene@Raytracer@@QAEXVvector3@2@000PAVMaterial@2@@Z ; Raytracer::Scene::AddPlane

; 684  : 		// back plane
; 685  : 		mat = new Material();

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN30@InitScene
	mov	ecx, eax
	call	??0Material@Raytracer@@QAE@XZ		; Raytracer::Material::Material
	mov	ecx, eax
	jmp	SHORT $LN31@InitScene
$LN30@InitScene:
	xor	ecx, ecx
$LN31@InitScene:

; 103  : 	m_Color = a_Col;

	movss	xmm1, DWORD PTR __real@3e99999a
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm0, DWORD PTR __real@3f000000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	movss	xmm3, DWORD PTR __real@40eccccd
	movq	xmm2, QWORD PTR $T39[ebp]

; 103  : 	m_Color = a_Col;

	unpcklps xmm0, xmm1

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	movq	xmm1, QWORD PTR $T38[ebp]

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [ecx], xmm0

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	movss	xmm0, xmm1
	push	ecx

; 89   : }
; 90   : 
; 91   : void Material::SetUVScale( real a_UScale, real a_VScale )
; 92   : { 
; 93   : 	m_UScale = a_UScale; 
; 94   : 	m_VScale = a_VScale; 
; 95   : 	m_RUScale = 1.0f / a_UScale;
; 96   : 	m_RVScale = 1.0f / a_VScale;
; 97   : }
; 98   : 
; 99   : void Material::SetParameters( real a_Refl, real a_Refr, Color& a_Col, real a_Diff, real a_Spec )
; 100  : {
; 101  : 	m_Refl = a_Refl;

	mov	DWORD PTR [ecx+12], 0

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	sub	esp, 12					; 0000000cH

; 102  : 	m_Refr = a_Refr;

	mov	DWORD PTR [ecx+16], 0

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [ecx+20], 1058642330		; 3f19999aH

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [ecx+24], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T11[ebp+8], 1056964608	; 3f000000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	mov	eax, DWORD PTR $T11[ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	mov	ecx, esp
	unpcklps xmm0, xmm3
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T10[ebp+8], 1090519040	; 41000000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	mov	eax, DWORD PTR $T10[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, xmm2
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm0, xmm3
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T15[ebp+8], 1098907648	; 41800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	mov	eax, DWORD PTR $T15[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, xmm2
	movss	xmm2, DWORD PTR __real@c08ccccd
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm0, xmm2
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T18[ebp+8], 1098907648	; 41800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	mov	eax, DWORD PTR $T18[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, xmm1
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T32[ebp+8], 1090519040	; 41000000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 688  : 				  vector3(  13,  7.4f, 16 ), vector3( -13, 7.4f, 8 ), mat );

	mov	eax, DWORD PTR $T32[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esi
	call	?AddPlane@Scene@Raytracer@@QAEXVvector3@2@000PAVMaterial@2@@Z ; Raytracer::Scene::AddPlane

; 689  : 		// ceiling plane
; 690  : 		mat = new Material();

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN32@InitScene
	mov	ecx, eax
	call	??0Material@Raytracer@@QAE@XZ		; Raytracer::Material::Material
	mov	ecx, eax
	jmp	SHORT $LN33@InitScene
$LN32@InitScene:
	xor	ecx, ecx
$LN33@InitScene:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm1, DWORD PTR __real@3f333333
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	movss	xmm0, DWORD PTR __real@3ecccccd

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	movq	xmm2, QWORD PTR $T39[ebp]
	movss	xmm3, DWORD PTR __real@40eccccd
	push	ecx

; 103  : 	m_Color = a_Col;

	unpcklps xmm0, xmm1

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	sub	esp, 12					; 0000000cH

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [ecx], xmm0

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	movss	xmm0, xmm2

; 89   : }
; 90   : 
; 91   : void Material::SetUVScale( real a_UScale, real a_VScale )
; 92   : { 
; 93   : 	m_UScale = a_UScale; 
; 94   : 	m_VScale = a_VScale; 
; 95   : 	m_RUScale = 1.0f / a_UScale;
; 96   : 	m_RVScale = 1.0f / a_VScale;
; 97   : }
; 98   : 
; 99   : void Material::SetParameters( real a_Refl, real a_Refr, Color& a_Col, real a_Diff, real a_Spec )
; 100  : {
; 101  : 	m_Refl = a_Refl;

	mov	DWORD PTR [ecx+12], 0

; 102  : 	m_Refr = a_Refr;

	mov	DWORD PTR [ecx+16], 0

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [ecx+20], 1056964608		; 3f000000H

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [ecx+24], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T9[ebp+8], 1060320051	; 3f333333H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	mov	eax, DWORD PTR $T9[ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	mov	ecx, esp
	unpcklps xmm0, xmm3
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movq	QWORD PTR $T34[ebp], xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	movq	xmm1, QWORD PTR $T38[ebp]
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T8[ebp+8], 1105723392	; 41e80000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	mov	eax, DWORD PTR $T8[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm0, xmm3
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T14[ebp+8], 1105723392	; 41e80000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	mov	eax, DWORD PTR $T14[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm1, xmm3
	sub	esp, 12					; 0000000cH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T17[ebp+8], -1062207488	; c0b00000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	mov	eax, DWORD PTR $T17[ebp+8]
	movq	QWORD PTR [ecx], xmm1
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	unpcklps xmm2, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T6[ebp+8], -1062207488	; c0b00000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 693  : 				  vector3( -13, 7.4f, 29 ), vector3( 13, 7.4f, 29 ), mat );

	mov	eax, DWORD PTR $T6[ebp+8]
	movq	QWORD PTR [ecx], xmm2
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esi
	call	?AddPlane@Scene@Raytracer@@QAEXVvector3@2@000PAVMaterial@2@@Z ; Raytracer::Scene::AddPlane

; 698  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -5.5f, -0.5, 7 ), 2 );

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T45[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN34@InitScene
	push	ecx
	mov	DWORD PTR [esp], 1073741824		; 40000000H
	lea	ecx, DWORD PTR $T37[ebp]
	push	ecx
	push	1
	mov	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T37[ebp], -1062207488	; c0b00000H
	mov	DWORD PTR $T37[ebp+4], -1090519040	; bf000000H
	mov	DWORD PTR $T37[ebp+8], 1088421888	; 40e00000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 698  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -5.5f, -0.5, 7 ), 2 );

	call	??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN35@InitScene
$LN34@InitScene:
	xor	edx, edx
$LN35@InitScene:
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 103  : 	m_Color = a_Col;

	movq	xmm0, QWORD PTR $T34[ebp]
	unpcklps xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T5[ebp+8], 1065353216	; 3f800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 698  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -5.5f, -0.5, 7 ), 2 );

	mov	DWORD PTR [eax+ecx*4], edx

; 699  : 		m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.5f, 0.0f, Color( 0.7f, 0.7f, 1.0f ), 0.1f, 0.8f );

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]

; 706  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( 0, 5, 5 ), Color( 0.4f, 0.4f, 0.4f ) );

	push	56					; 00000038H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi], eax

; 103  : 	m_Color = a_Col;

	mov	eax, DWORD PTR $T5[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 135  : 	Material* GetMaterial() { return m_Material; }

	mov	ecx, DWORD PTR [edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+12], 1056964608		; 3f000000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+8], eax

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [ecx+20], 1036831949		; 3dcccccdH

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [ecx+24], 1061997773		; 3f4ccccdH

; 706  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( 0, 5, 5 ), Color( 0.4f, 0.4f, 0.4f ) );

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN36@InitScene
	lea	ecx, DWORD PTR $T31[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T31[ebp], 1053609165		; 3ecccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 706  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( 0, 5, 5 ), Color( 0.4f, 0.4f, 0.4f ) );

	push	ecx
	lea	ecx, DWORD PTR $T36[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T31[ebp+4], 1053609165	; 3ecccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 706  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( 0, 5, 5 ), Color( 0.4f, 0.4f, 0.4f ) );

	push	ecx
	push	1
	mov	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T31[ebp+8], 1053609165	; 3ecccccdH
	mov	DWORD PTR $T36[ebp], 0
	mov	DWORD PTR $T36[ebp+4], 1084227584	; 40a00000H
	mov	DWORD PTR $T36[ebp+8], 1084227584	; 40a00000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 706  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( 0, 5, 5 ), Color( 0.4f, 0.4f, 0.4f ) );

	call	??0Light@Raytracer@@QAE@HAAVvector3@1@0@Z ; Raytracer::Light::Light
	mov	edx, eax
	jmp	SHORT $LN37@InitScene
$LN36@InitScene:
	xor	edx, edx
$LN37@InitScene:
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+12]

; 707  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( -3, 5, 1 ), Color( 0.6f, 0.6f, 0.8f ) );

	push	56					; 00000038H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi+4]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN38@InitScene
	lea	ecx, DWORD PTR $T30[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T30[ebp], 1058642330		; 3f19999aH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 707  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( -3, 5, 1 ), Color( 0.6f, 0.6f, 0.8f ) );

	push	ecx
	lea	ecx, DWORD PTR $T35[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T30[ebp+4], 1058642330	; 3f19999aH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 707  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( -3, 5, 1 ), Color( 0.6f, 0.6f, 0.8f ) );

	push	ecx
	push	1
	mov	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T30[ebp+8], 1061997773	; 3f4ccccdH
	mov	DWORD PTR $T35[ebp], -1069547520	; c0400000H
	mov	DWORD PTR $T35[ebp+4], 1084227584	; 40a00000H
	mov	DWORD PTR $T35[ebp+8], 1065353216	; 3f800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 707  : 		m_Light[m_Lights++] = new Light( Light::POINT, vector3( -3, 5, 1 ), Color( 0.6f, 0.6f, 0.8f ) );

	call	??0Light@Raytracer@@QAE@HAAVvector3@1@0@Z ; Raytracer::Light::Light
	mov	edx, eax
	jmp	SHORT $LN39@InitScene
$LN38@InitScene:
	xor	edx, edx
$LN39@InitScene:
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+12]

; 710  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -1.5f, -3.8f, 1 ), 1.5f );

	push	72					; 00000048H
	mov	DWORD PTR [eax+ecx*4], edx
	inc	DWORD PTR [esi+4]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T44[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	test	eax, eax
	je	SHORT $LN40@InitScene
	push	ecx
	mov	DWORD PTR [esp], 1069547520		; 3fc00000H
	lea	ecx, DWORD PTR $T29[ebp]
	push	ecx
	push	1
	mov	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T29[ebp], -1077936128	; bfc00000H
	mov	DWORD PTR $T29[ebp+4], -1066192077	; c0733333H
	mov	DWORD PTR $T29[ebp+8], 1065353216	; 3f800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 710  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -1.5f, -3.8f, 1 ), 1.5f );

	call	??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN41@InitScene
$LN40@InitScene:
	xor	edx, edx
$LN41@InitScene:
	mov	ecx, DWORD PTR [esi]

; 712  : 		// grid
; 713  : 		for (int x = 0; x < 8; x++) for (int y = 0; y < 7; y++)

	xor	ebx, ebx
	mov	eax, DWORD PTR [esi+8]

; 103  : 	m_Color = a_Col;

	movq	xmm0, QWORD PTR $T25[ebp]
	movss	xmm1, DWORD PTR __real@3ecccccd
	unpcklps xmm0, xmm1

; 710  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -1.5f, -3.8f, 1 ), 1.5f );

	mov	DWORD PTR [eax+ecx*4], edx

; 711  : 		m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.8f, Color( 1.0f, 0.4f, 0.4f ), 0.2f, 0.8f );

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T4[ebp+8], 1053609165	; 3ecccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 710  : 		m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -1.5f, -3.8f, 1 ), 1.5f );

	mov	DWORD PTR __$EHRec$[ebp+8], -1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T23[ebp], 1050253722		; 3e99999aH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 711  : 		m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.8f, Color( 1.0f, 0.4f, 0.4f ), 0.2f, 0.8f );

	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi], eax

; 103  : 	m_Color = a_Col;

	mov	eax, DWORD PTR $T4[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T23[ebp+4], 1065353216	; 3f800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 135  : 	Material* GetMaterial() { return m_Material; }

	mov	ecx, DWORD PTR [edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T23[ebp+8], 1053609165	; 3ecccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 1061997773		; 3f4ccccdH
	mov	DWORD PTR [ecx+8], eax

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [ecx+20], 1045220557		; 3e4ccccdH

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [ecx+24], 1061997773		; 3f4ccccdH
$LL21@InitScene:

; 712  : 		// grid
; 713  : 		for (int x = 0; x < 8; x++) for (int y = 0; y < 7; y++)

	xor	edi, edi
$LL18@InitScene:

; 715  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f + y * 1.5f, 10 ), 0.3f );

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T43[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	test	eax, eax
	je	SHORT $LN42@InitScene
	movd	xmm0, ebx
	cvtdq2ps xmm0, xmm0
	push	ecx
	mov	DWORD PTR [esp], 1050253722		; 3e99999aH
	lea	ecx, DWORD PTR $T28[ebp]
	push	ecx
	push	1
	mov	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T28[ebp+8], 1092616192	; 41200000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 715  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f + y * 1.5f, 10 ), 0.3f );

	mulss	xmm0, DWORD PTR __real@3fc00000
	subss	xmm0, DWORD PTR __real@40900000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T28[ebp], xmm0
	movd	xmm0, edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 715  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f + y * 1.5f, 10 ), 0.3f );

	cvtdq2ps xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@3fc00000
	subss	xmm0, DWORD PTR __real@4089999a
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T28[ebp+4], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 715  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f + y * 1.5f, 10 ), 0.3f );

	call	??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN43@InitScene
$LN42@InitScene:
	xor	edx, edx
$LN43@InitScene:
	mov	ecx, DWORD PTR [esi]
	inc	edi
	mov	eax, DWORD PTR [esi+8]

; 103  : 	m_Color = a_Col;

	movq	xmm0, QWORD PTR $T23[ebp]

; 715  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f + y * 1.5f, 10 ), 0.3f );

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [eax+ecx*4], edx

; 716  : 			m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.0f, Color( 0.3f, 1.0f, 0.4f ), 0.6f, 0.6f );

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]

; 103  : 	m_Color = a_Col;

	mov	ecx, DWORD PTR $T23[ebp+8]

; 716  : 			m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.0f, Color( 0.3f, 1.0f, 0.4f ), 0.6f, 0.6f );

	mov	DWORD PTR [esi], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 135  : 	Material* GetMaterial() { return m_Material; }

	mov	eax, DWORD PTR [edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+12], 0
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+8], ecx

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [eax+20], 1058642330		; 3f19999aH

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [eax+24], 1058642330		; 3f19999aH

; 712  : 		// grid
; 713  : 		for (int x = 0; x < 8; x++) for (int y = 0; y < 7; y++)

	cmp	edi, 7
	jl	$LL18@InitScene
	inc	ebx
	cmp	ebx, 8
	jl	$LL21@InitScene

; 718  : 		for (int x = 0; x < 8; x++) for (int y = 0; y < 8; y++)

	xor	ebx, ebx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T22[ebp], 1050253722		; 3e99999aH
	mov	DWORD PTR $T22[ebp+4], 1065353216	; 3f800000H
	mov	DWORD PTR $T22[ebp+8], 1053609165	; 3ecccccdH
	npad	4
$LL15@InitScene:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 718  : 		for (int x = 0; x < 8; x++) for (int y = 0; y < 8; y++)

	xor	edi, edi
$LL12@InitScene:

; 720  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f, 10.0f - y * 1.5f ), 0.3f );

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	test	eax, eax
	je	SHORT $LN44@InitScene
	movd	xmm0, ebx
	cvtdq2ps xmm0, xmm0
	push	ecx
	lea	ecx, DWORD PTR $T27[ebp]
	mov	DWORD PTR [esp], 1050253722		; 3e99999aH
	push	ecx
	mov	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T27[ebp+4], -1064724070	; c089999aH
	movd	xmm1, edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 720  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f, 10.0f - y * 1.5f ), 0.3f );

	mulss	xmm0, DWORD PTR __real@3fc00000
	push	1
	cvtdq2ps xmm1, xmm1
	subss	xmm0, DWORD PTR __real@40900000
	mulss	xmm1, DWORD PTR __real@3fc00000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T27[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 720  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f, 10.0f - y * 1.5f ), 0.3f );

	movss	xmm0, DWORD PTR __real@41200000
	subss	xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T27[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 720  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f, 10.0f - y * 1.5f ), 0.3f );

	call	??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN45@InitScene
$LN44@InitScene:
	xor	edx, edx
$LN45@InitScene:
	mov	ecx, DWORD PTR [esi]
	inc	edi
	mov	eax, DWORD PTR [esi+8]

; 103  : 	m_Color = a_Col;

	movq	xmm0, QWORD PTR $T22[ebp]

; 720  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -4.5f + x * 1.5f, -4.3f, 10.0f - y * 1.5f ), 0.3f );

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [eax+ecx*4], edx

; 721  : 			m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.0f, Color( 0.3f, 1.0f, 0.4f ), 0.6f, 0.6f );

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]

; 103  : 	m_Color = a_Col;

	mov	ecx, DWORD PTR $T22[ebp+8]

; 721  : 			m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.0f, Color( 0.3f, 1.0f, 0.4f ), 0.6f, 0.6f );

	mov	DWORD PTR [esi], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 135  : 	Material* GetMaterial() { return m_Material; }

	mov	eax, DWORD PTR [edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+12], 0
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+8], ecx

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [eax+20], 1058642330		; 3f19999aH

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [eax+24], 1058642330		; 3f19999aH

; 718  : 		for (int x = 0; x < 8; x++) for (int y = 0; y < 8; y++)

	cmp	edi, 8
	jl	$LL12@InitScene
	inc	ebx
	cmp	ebx, 8
	jl	$LL15@InitScene

; 723  : 		for (int x = 0; x < 16; x++) for (int y = 0; y < 8; y++)

	xor	ebx, ebx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T21[ebp], 1050253722		; 3e99999aH
	mov	DWORD PTR $T21[ebp+4], 1065353216	; 3f800000H
	mov	DWORD PTR $T21[ebp+8], 1053609165	; 3ecccccdH
	npad	4
$LL9@InitScene:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 723  : 		for (int x = 0; x < 16; x++) for (int y = 0; y < 8; y++)

	xor	edi, edi
$LL6@InitScene:

; 725  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -8.5f + x * 1.5f, 4.3f, 10.0f - y ), 0.3f );

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T41[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	test	eax, eax
	je	SHORT $LN46@InitScene
	movss	xmm1, DWORD PTR __real@41200000
	movd	xmm0, ebx
	cvtdq2ps xmm0, xmm0
	push	ecx
	mov	DWORD PTR [esp], 1050253722		; 3e99999aH
	lea	ecx, DWORD PTR $T26[ebp]
	push	ecx
	push	1
	mov	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T26[ebp+4], 1082759578	; 4089999aH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 725  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -8.5f + x * 1.5f, 4.3f, 10.0f - y ), 0.3f );

	mulss	xmm0, DWORD PTR __real@3fc00000
	subss	xmm0, DWORD PTR __real@41080000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T26[ebp], xmm0
	movd	xmm0, edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 725  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -8.5f + x * 1.5f, 4.3f, 10.0f - y ), 0.3f );

	cvtdq2ps xmm0, xmm0
	subss	xmm1, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T26[ebp+8], xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 725  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -8.5f + x * 1.5f, 4.3f, 10.0f - y ), 0.3f );

	call	??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z ; Raytracer::Primitive::Primitive
	mov	edx, eax
	jmp	SHORT $LN47@InitScene
$LN46@InitScene:
	xor	edx, edx
$LN47@InitScene:
	mov	ecx, DWORD PTR [esi]
	inc	edi
	mov	eax, DWORD PTR [esi+8]

; 103  : 	m_Color = a_Col;

	movq	xmm0, QWORD PTR $T21[ebp]

; 725  : 			m_Primitive[m_Primitives] = new Primitive( Primitive::SPHERE, vector3( -8.5f + x * 1.5f, 4.3f, 10.0f - y ), 0.3f );

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [eax+ecx*4], edx

; 726  : 			m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.0f, Color( 0.3f, 1.0f, 0.4f ), 0.6f, 0.6f );

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [ecx+1]

; 103  : 	m_Color = a_Col;

	mov	ecx, DWORD PTR $T21[ebp+8]

; 726  : 			m_Primitive[m_Primitives++]->GetMaterial()->SetParameters( 0.0f, 0.0f, Color( 0.3f, 1.0f, 0.4f ), 0.6f, 0.6f );

	mov	DWORD PTR [esi], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 135  : 	Material* GetMaterial() { return m_Material; }

	mov	eax, DWORD PTR [edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+12], 0
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+8], ecx

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [eax+20], 1058642330		; 3f19999aH

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [eax+24], 1058642330		; 3f19999aH

; 723  : 		for (int x = 0; x < 16; x++) for (int y = 0; y < 8; y++)

	cmp	edi, 8
	jl	$LL6@InitScene
	inc	ebx
	cmp	ebx, 16					; 00000010H
	jl	$LL9@InitScene

; 727  : 		}
; 728  : 		mat = new Material();

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	test	ecx, ecx
	je	SHORT $LN48@InitScene
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR [ecx], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [ecx+4], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [ecx+8], 1045220557		; 3e4ccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 88   : {

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+20], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [ecx+24], 1061997773		; 3f4ccccdH
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 1069547520		; 3fc00000H
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+44], 1065353216		; 3f800000H

; 727  : 		}
; 728  : 		mat = new Material();

	jmp	SHORT $LN49@InitScene
$LN48@InitScene:
	xor	ecx, ecx
$LN49@InitScene:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm0, DWORD PTR __real@3f666666
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 732  : 		Load3DS( "meshes/knot.3ds", mat, vector3( 0, 0.5f, 4 ), 6 );

	push	ecx

; 103  : 	m_Color = a_Col;

	unpcklps xmm0, xmm0
	movq	QWORD PTR [ecx], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T3[ebp+8], 1065353216	; 3f800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 103  : 	m_Color = a_Col;

	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 732  : 		Load3DS( "meshes/knot.3ds", mat, vector3( 0, 0.5f, 4 ), 6 );

	lea	eax, DWORD PTR $T20[ebp]
	mov	DWORD PTR [esp], 1086324736		; 40c00000H
	push	eax
	push	ecx

; 89   : }
; 90   : 
; 91   : void Material::SetUVScale( real a_UScale, real a_VScale )
; 92   : { 
; 93   : 	m_UScale = a_UScale; 
; 94   : 	m_VScale = a_VScale; 
; 95   : 	m_RUScale = 1.0f / a_UScale;
; 96   : 	m_RVScale = 1.0f / a_VScale;
; 97   : }
; 98   : 
; 99   : void Material::SetParameters( real a_Refl, real a_Refr, Color& a_Col, real a_Diff, real a_Spec )
; 100  : {
; 101  : 	m_Refl = a_Refl;

	mov	DWORD PTR [ecx+12], 1063675494		; 3f666666H

; 102  : 	m_Refr = a_Refr;

	mov	DWORD PTR [ecx+16], 0

; 104  : 	m_Diff = a_Diff;

	mov	DWORD PTR [ecx+20], 1050253722		; 3e99999aH

; 105  : 	m_Spec = a_Spec;

	mov	DWORD PTR [ecx+24], 1060320051		; 3f333333H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 57   : 	void SetRefrIndex( real a_Refr ) { m_RIndex = a_Refr; }

	mov	DWORD PTR [ecx+32], 1067869798		; 3fa66666H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 732  : 		Load3DS( "meshes/knot.3ds", mat, vector3( 0, 0.5f, 4 ), 6 );

	mov	ecx, esi
	push	OFFSET ??_C@_0BA@NINGDJMO@meshes?1knot?43ds?$AA@
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T20[ebp], 0
	mov	DWORD PTR $T20[ebp+4], 1056964608	; 3f000000H
	mov	DWORD PTR $T20[ebp+8], 1082130432	; 40800000H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 732  : 		Load3DS( "meshes/knot.3ds", mat, vector3( 0, 0.5f, 4 ), 6 );

	call	?Load3DS@Scene@Raytracer@@QAEXPADPAVMaterial@2@AAVvector3@2@M@Z ; Raytracer::Scene::Load3DS

; 746  : 	};
; 747  : 	m_State++;

	inc	DWORD PTR [esi+44]

; 748  : 	return false;

	xor	al, al

; 749  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN3@InitScene:

; 733  : 		break;
; 734  : 	case 2:
; 735  : 		a_MsgSurf->Print( "building kdtree - please wait", 2, 10, 0xffffffff );

	mov	ecx, DWORD PTR _a_MsgSurf$[ebp]
	push	-1
	push	10					; 0000000aH
	push	2
	push	OFFSET ??_C@_0BO@JIHJDMAN@building?5kdtree?5?9?5please?5wait?$AA@
	call	?Print@Surface@Raytracer@@QAEXPADHHI@Z	; Raytracer::Surface::Print

; 746  : 	};
; 747  : 	m_State++;

	inc	DWORD PTR [esi+44]

; 748  : 	return false;

	xor	al, al

; 749  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@InitScene:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm0, DWORD PTR __real@c0c00000
	movss	xmm2, DWORD PTR __real@c1600000
	movss	xmm3, DWORD PTR __real@41e00000
	movss	xmm1, DWORD PTR __real@41600000

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	unpcklps xmm2, xmm0
	unpcklps xmm3, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T2[ebp+8], -1061158912	; c0c00000H

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR $T13[ebp+8], eax
	movq	QWORD PTR $T13[ebp+12], xmm3
	movq	QWORD PTR $T13[ebp], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 740  : 		m_Extends = aabb( p1, p2 - p1 );

	movdqu	xmm0, XMMWORD PTR $T13[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T7[ebp+8], 1108344832	; 42100000H

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	mov	eax, DWORD PTR $T7[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 740  : 		m_Extends = aabb( p1, p2 - p1 );

	movdqu	XMMWORD PTR [esi+16], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	mov	DWORD PTR $T13[ebp+20], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 740  : 		m_Extends = aabb( p1, p2 - p1 );

	movq	xmm0, QWORD PTR $T13[ebp+16]

; 741  : 		m_KdTree = new KdTree();

	push	12					; 0000000cH
	movq	QWORD PTR [esi+32], xmm0
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T40[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	test	eax, eax
	je	SHORT $LN50@InitScene
	mov	ecx, eax
	call	??0KdTree@Raytracer@@QAE@XZ		; Raytracer::KdTree::KdTree
	jmp	SHORT $LN51@InitScene
$LN50@InitScene:
	xor	eax, eax
$LN51@InitScene:

; 742  : 		m_KdTree->Build( this );

	push	esi
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [esi+40], eax
	call	?Build@KdTree@Raytracer@@QAEXPAVScene@2@@Z ; Raytracer::KdTree::Build

; 746  : 	};
; 747  : 	m_State++;

	inc	DWORD PTR [esi+44]

; 748  : 	return false;

	xor	al, al

; 749  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN1@InitScene:

; 743  : 		break;
; 744  : 	default:
; 745  : 		return true;

	mov	al, 1

; 749  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN199@InitScene:
	DD	$LN23@InitScene
	DD	$LN22@InitScene
	DD	$LN3@InitScene
	DD	$LN2@InitScene
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$3:
	mov	eax, DWORD PTR $T45[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$6:
	mov	eax, DWORD PTR $T44[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$7:
	mov	eax, DWORD PTR $T43[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$8:
	mov	eax, DWORD PTR $T42[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$9:
	mov	eax, DWORD PTR $T41[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z$11:
	mov	eax, DWORD PTR $T40[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitScene@Scene@Raytracer@@QAE_NPAVSurface@2@@Z ENDP	; Raytracer::Scene::InitScene
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??1Scene@Raytracer@@QAE@XZ
_TEXT	SEGMENT
??1Scene@Raytracer@@QAE@XZ PROC				; Raytracer::Scene::~Scene, COMDAT
; _this$ = ecx

; 470  : 	delete m_Primitive;

	push	DWORD PTR [ecx+8]
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 471  : }

	ret	0
??1Scene@Raytracer@@QAE@XZ ENDP				; Raytracer::Scene::~Scene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0Scene@Raytracer@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
??0Scene@Raytracer@@QAE@XZ PROC				; Raytracer::Scene::Scene, COMDAT
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	xorps	xmm1, xmm1
	mov	DWORD PTR [ecx], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	movss	xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 465  : {

	mov	DWORD PTR [ecx+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	unpcklps xmm0, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T2[ebp+8], 0

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx+16], xmm0
	mov	DWORD PTR [ecx+24], eax
	unpcklps xmm1, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T1[ebp+8], 0

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+28], xmm1
	mov	DWORD PTR [ecx+36], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 466  : }

	mov	eax, ecx
	mov	DWORD PTR [ecx+44], 0
	mov	esp, ebp
	pop	ebp
	ret	0
??0Scene@Raytracer@@QAE@XZ ENDP				; Raytracer::Scene::Scene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?Subdivide@KdTree@Raytracer@@QAEXPAVKdTreeNode@2@AAVaabb@2@HH@Z
_TEXT	SEGMENT
_b2$ = -160						; size = 24
_b1$ = -136						; size = 24
_b4$ = -112						; size = 24
_pos1$1 = -100						; size = 12
_b3$ = -88						; size = 24
_pos$2 = -76						; size = 12
_s$ = -76						; size = 12
_b1p1$1$ = -64						; size = 4
_b4p2$1$ = -64						; size = 4
_eleft$1$ = -60						; size = 4
_b3p1$1$ = -56						; size = 4
tv1465 = -56						; size = 4
_p$1$ = -52						; size = 4
tv1468 = -52						; size = 4
_eright$1$ = -48					; size = 4
_parray$1$ = -44					; size = 4
_b1p2$1$ = -40						; size = 4
_Cleaf$1$ = -40						; size = 4
_b3p2$1$ = -40						; size = 4
_pos2$1$ = -36						; size = 4
_b2p1$1$ = -32						; size = 4
_pright$1$ = -32					; size = 4
_this$1$ = -28						; size = 4
_pos1$1$ = -24						; size = 4
_bestpos$1$ = -20					; size = 4
_p2$1$ = -20						; size = 4
tv1467 = -20						; size = 4
tv1461 = -20						; size = 4
_b2p2$1$ = -16						; size = 4
tv1462 = -16						; size = 4
_b4p1$1$ = -12						; size = 4
_n1count$1$ = -12					; size = 4
tv1466 = -12						; size = 4
_l$1$ = -8						; size = 4
tv1460 = -8						; size = 4
tv1459 = -8						; size = 4
_axis$1$ = -4						; size = 4
_a_Node$ = 8						; size = 4
_SAV$1$ = 12						; size = 4
_n2count$1$ = 12					; size = 4
_a_Box$ = 12						; size = 4
_a_Depth$ = 16						; size = 4
_a_Prims$ = 20						; size = 4
?Subdivide@KdTree@Raytracer@@QAEXPAVKdTreeNode@2@AAVaabb@2@HH@Z PROC ; Raytracer::KdTree::Subdivide, COMDAT
; _this$ = ecx

; 814  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H

; 815  : 	// recycle used split list nodes
; 816  : 	if (m_SList)

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _this$1$[ebp], ecx
	test	edx, edx
	je	SHORT $LN42@Subdivide

; 817  : 	{
; 818  : 		SplitList* list = m_SList;
; 819  : 		while (list->next) list = list->next;

	cmp	DWORD PTR [edx+12], 0
	lea	eax, DWORD PTR [edx+12]
	je	SHORT $LN40@Subdivide
	npad	4
$LL41@Subdivide:
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx+12], 0
	lea	eax, DWORD PTR [edx+12]
	jne	SHORT $LL41@Subdivide
$LN40@Subdivide:

; 820  : 		list->next = m_SPool;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+12], eax

; 821  : 		m_SPool = m_SList, m_SList = 0;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+4], 0
$LN42@Subdivide:

; 822  : 	}
; 823  : 	// determine split axis
; 824  : 	vector3 s = a_Box.GetSize();

	mov	ecx, DWORD PTR _a_Box$[ebp]
	push	ebx
	push	esi
	push	edi
	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR _s$[ebp], xmm0

; 825  : 	if ((s.x >= s.y) && (s.x >= s.z)) a_Node->SetAxis( 0 );

	movss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR _s$[ebp+4]
	comiss	xmm0, xmm1
	mov	DWORD PTR _s$[ebp+8], eax
	movss	xmm2, DWORD PTR _s$[ebp+8]
	jb	SHORT $LN39@Subdivide
	comiss	xmm0, xmm2
	jb	SHORT $LN39@Subdivide
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 210  : 	void SetAxis( int a_Axis ) { m_Data = (m_Data & 0xfffffffc) + a_Axis; }

	mov	ebx, DWORD PTR _a_Node$[ebp]
	and	DWORD PTR [ebx+4], -4			; fffffffcH
	jmp	SHORT $LN49@Subdivide
$LN39@Subdivide:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 826  : 	else if ((s.y >= s.x) && (s.y >= s.z)) a_Node->SetAxis( 1 );

	comiss	xmm1, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 210  : 	void SetAxis( int a_Axis ) { m_Data = (m_Data & 0xfffffffc) + a_Axis; }

	mov	ebx, DWORD PTR _a_Node$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 826  : 	else if ((s.y >= s.x) && (s.y >= s.z)) a_Node->SetAxis( 1 );

	jb	SHORT $LN49@Subdivide
	comiss	xmm1, xmm2
	jb	SHORT $LN49@Subdivide
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 210  : 	void SetAxis( int a_Axis ) { m_Data = (m_Data & 0xfffffffc) + a_Axis; }

	mov	eax, DWORD PTR [ebx+4]
	and	eax, -4					; fffffffcH
	inc	eax
	mov	DWORD PTR [ebx+4], eax
$LN49@Subdivide:

; 211  : 	int GetAxis() { return m_Data & 3; }

	mov	ebx, DWORD PTR [ebx+4]
	mov	esi, ebx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 833  : 	bool* pright = new bool[a_Prims];

	push	DWORD PTR _a_Prims$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 211  : 	int GetAxis() { return m_Data & 3; }

	and	esi, 3

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	and	ebx, -8					; fffffff8H

; 211  : 	int GetAxis() { return m_Data & 3; }

	mov	DWORD PTR _axis$1$[ebp], esi

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	DWORD PTR _l$1$[ebp], ebx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 831  : 	real pos1 = a_Box.GetPos().cell[axis];

	movss	xmm1, DWORD PTR [ecx+esi*4]

; 832  : 	real pos2 = a_Box.GetPos().cell[axis] + a_Box.GetSize().cell[axis];

	movss	xmm0, DWORD PTR [ecx+esi*4+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos1$1$[ebp], xmm1
	movss	DWORD PTR _pos2$1$[ebp], xmm0

; 833  : 	bool* pright = new bool[a_Prims];

	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax

; 834  : 	float* eleft = new float[a_Prims], *eright = new float[a_Prims];

	xor	ecx, ecx
	mov	eax, DWORD PTR _a_Prims$[ebp]
	mov	edx, 4
	mul	edx
	mov	DWORD PTR _pright$1$[ebp], edi
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	DWORD PTR _eleft$1$[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _a_Prims$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	DWORD PTR _eright$1$[ebp], eax

; 835  : 	Primitive** parray = new Primitive*[a_Prims];

	xor	ecx, ecx
	mov	eax, DWORD PTR _a_Prims$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 16					; 00000010H
	mov	ecx, eax
	mov	DWORD PTR _parray$1$[ebp], ecx

; 837  : 	while (l)

	test	ebx, ebx
	je	$LN35@Subdivide
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 211  : 	int GetAxis() { return m_Data & 3; }

	mov	esi, DWORD PTR _eright$1$[ebp]
	mov	edx, edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 837  : 	while (l)

	mov	ecx, DWORD PTR _eleft$1$[ebp]
	sub	eax, esi
	sub	ecx, esi
	mov	DWORD PTR tv1466[ebp], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 211  : 	int GetAxis() { return m_Data & 3; }

	mov	edi, esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 837  : 	while (l)

	mov	DWORD PTR tv1465[ebp], ecx
	npad	7
$LL36@Subdivide:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 193  : 	Primitive* GetPrimitive() { return m_Primitive; }

	mov	esi, DWORD PTR [ebx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 839  : 		Primitive* p = parray[aidx] = l->GetPrimitive();

	mov	DWORD PTR [eax+edi], esi

; 840  : 		pright[aidx] = true;

	mov	BYTE PTR [edx], 1

; 406  : 	if (m_Type == SPHERE)

	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN69@Subdivide

; 407  : 	{
; 408  : 		a_Pos1 = m_Centre.cell[a_Axis] - m_Radius;

	mov	eax, DWORD PTR _axis$1$[ebp]
	movss	xmm0, DWORD PTR [esi+eax*4+8]
	subss	xmm0, DWORD PTR [esi+24]
	movss	DWORD PTR [ecx+edi], xmm0

; 409  : 		a_Pos2 = m_Centre.cell[a_Axis] + m_Radius;

	mov	ecx, eax
	movss	xmm0, DWORD PTR [esi+ecx*4+8]
	addss	xmm0, DWORD PTR [esi+24]
	movss	DWORD PTR [edi], xmm0

; 410  : 	}
; 411  : 	else

	jmp	$LN236@Subdivide
$LN69@Subdivide:

; 412  : 	{
; 413  : 		vector3 pos1 = m_Vertex[0]->GetPos();

	mov	eax, DWORD PTR [esi+20]
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _pos1$1[ebp+8], eax

; 414  : 		a_Pos1 = pos1.cell[a_Axis], a_Pos2 = pos1.cell[a_Axis];

	mov	eax, DWORD PTR _axis$1$[ebp]
	movq	QWORD PTR _pos1$1[ebp], xmm0
	movss	xmm0, DWORD PTR _pos1$1[ebp+eax*4]

; 415  : 		for ( int i = 1; i < 3; i++ )
; 416  : 		{
; 417  : 			vector3 pos = m_Vertex[i]->GetPos();

	mov	eax, DWORD PTR [esi+24]
	movss	DWORD PTR [ecx+edi], xmm0
	movss	DWORD PTR [edi], xmm0
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$2[ebp+8], eax

; 418  : 			if (pos.cell[a_Axis] < a_Pos1) a_Pos1 = pos.cell[a_Axis];

	mov	eax, DWORD PTR _axis$1$[ebp]
	movq	QWORD PTR _pos$2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+edi]
	movss	xmm1, DWORD PTR _pos$2[ebp+eax*4]
	comiss	xmm0, xmm1
	jbe	SHORT $LN64@Subdivide
	movss	DWORD PTR [ecx+edi], xmm1
$LN64@Subdivide:

; 419  : 			if (pos.cell[a_Axis] > a_Pos2) a_Pos2 = pos.cell[a_Axis];

	comiss	xmm1, DWORD PTR [edi]
	jbe	SHORT $LN66@Subdivide
	movss	DWORD PTR [edi], xmm1
$LN66@Subdivide:

; 415  : 		for ( int i = 1; i < 3; i++ )
; 416  : 		{
; 417  : 			vector3 pos = m_Vertex[i]->GetPos();

	mov	eax, DWORD PTR [esi+28]
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$2[ebp+8], eax

; 418  : 			if (pos.cell[a_Axis] < a_Pos1) a_Pos1 = pos.cell[a_Axis];

	mov	eax, DWORD PTR _axis$1$[ebp]
	movq	QWORD PTR _pos$2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+edi]
	movss	xmm1, DWORD PTR _pos$2[ebp+eax*4]
	comiss	xmm0, xmm1
	jbe	SHORT $LN235@Subdivide
	movss	DWORD PTR [ecx+edi], xmm1
$LN235@Subdivide:

; 419  : 			if (pos.cell[a_Axis] > a_Pos2) a_Pos2 = pos.cell[a_Axis];

	comiss	xmm1, DWORD PTR [edi]
	mov	ecx, DWORD PTR _axis$1$[ebp]
	jbe	SHORT $LN236@Subdivide
	movss	DWORD PTR [edi], xmm1
$LN236@Subdivide:

; 841  : 		p->CalculateRange( eleft[aidx], eright[aidx], axis );
; 842  : 		aidx++;

	inc	edx
	add	edi, 4

; 843  : 		if (p->GetType() == Primitive::SPHERE)

	cmp	DWORD PTR [esi+4], 1
	mov	DWORD PTR tv1468[ebp], edx
	mov	DWORD PTR tv1467[ebp], edi
	jne	SHORT $LN34@Subdivide

; 844  : 		{
; 845  : 			p1 = p->GetCentre().cell[axis] - p->GetRadius();

	movss	xmm1, DWORD PTR [esi+24]
	movss	xmm2, DWORD PTR [esi+ecx*4+8]

; 846  : 			p2 = p->GetCentre().cell[axis] + p->GetRadius();
; 847  : 			if ((p1 >= pos1) && (p1 <= pos2)) InsertSplitPos( p1 );

	movss	xmm0, DWORD PTR _pos2$1$[ebp]
	subss	xmm2, xmm1
	addss	xmm1, DWORD PTR [esi+ecx*4+8]
	mov	esi, DWORD PTR _this$1$[ebp]
	comiss	xmm2, DWORD PTR _pos1$1$[ebp]
	movss	DWORD PTR _p2$1$[ebp], xmm1
	jb	SHORT $LN33@Subdivide
	comiss	xmm0, xmm2
	jb	SHORT $LN33@Subdivide
	push	ecx
	mov	ecx, esi
	movss	DWORD PTR [esp], xmm2
	call	?InsertSplitPos@KdTree@Raytracer@@QAEXM@Z ; Raytracer::KdTree::InsertSplitPos
	movss	xmm1, DWORD PTR _p2$1$[ebp]
	movss	xmm0, DWORD PTR _pos2$1$[ebp]
$LN33@Subdivide:

; 848  : 			if ((p2 >= pos1) && (p2 <= pos2)) InsertSplitPos( p2 );

	comiss	xmm1, DWORD PTR _pos1$1$[ebp]
	jb	SHORT $LN28@Subdivide
	comiss	xmm0, xmm1
	jb	SHORT $LN28@Subdivide
	push	ecx
	mov	ecx, esi
	movss	DWORD PTR [esp], xmm1
	call	?InsertSplitPos@KdTree@Raytracer@@QAEXM@Z ; Raytracer::KdTree::InsertSplitPos

; 849  : 		}
; 850  : 		else

	jmp	SHORT $LN28@Subdivide
$LN34@Subdivide:
	movss	xmm1, DWORD PTR _pos1$1$[ebp]

; 851  : 		{
; 852  : 			for ( int i = 0; i < 3; i++ )

	add	esi, 20					; 00000014H
	mov	edi, DWORD PTR _this$1$[ebp]
	mov	ebx, 3
$LL30@Subdivide:

; 853  : 			{
; 854  : 				p1 = p->GetVertex( i )->GetPos().cell[axis];

	mov	eax, DWORD PTR [esi]
	movss	xmm0, DWORD PTR [eax+ecx*4]

; 855  : 				if ((p1 >= pos1) && (p1 <= pos2)) InsertSplitPos( p1 );

	comiss	xmm0, xmm1
	jb	SHORT $LN29@Subdivide
	movss	xmm1, DWORD PTR _pos2$1$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN248@Subdivide
	push	ecx
	mov	ecx, edi
	movss	DWORD PTR [esp], xmm0
	call	?InsertSplitPos@KdTree@Raytracer@@QAEXM@Z ; Raytracer::KdTree::InsertSplitPos
	mov	ecx, DWORD PTR _axis$1$[ebp]
$LN248@Subdivide:
	movss	xmm1, DWORD PTR _pos1$1$[ebp]
$LN29@Subdivide:

; 851  : 		{
; 852  : 			for ( int i = 0; i < 3; i++ )

	add	esi, 4
	dec	ebx
	jne	SHORT $LL30@Subdivide
	mov	edi, DWORD PTR tv1467[ebp]
	mov	ebx, DWORD PTR _l$1$[ebp]
$LN28@Subdivide:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 195  : 	ObjectList* GetNext() { return m_Next; }

	mov	ebx, DWORD PTR [ebx+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 837  : 	while (l)

	mov	ecx, DWORD PTR tv1465[ebp]
	mov	edx, DWORD PTR tv1468[ebp]
	mov	eax, DWORD PTR tv1466[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 195  : 	ObjectList* GetNext() { return m_Next; }

	mov	DWORD PTR _l$1$[ebp], ebx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 837  : 	while (l)

	test	ebx, ebx
	jne	$LL36@Subdivide
	mov	esi, DWORD PTR _axis$1$[ebp]
	mov	ecx, DWORD PTR _parray$1$[ebp]
$LN35@Subdivide:

; 861  : 	aabb b1, b2, b3 = a_Box, b4 = a_Box;

	mov	ebx, DWORD PTR _a_Box$[ebp]
	xorps	xmm0, xmm0

; 862  : 	SplitList* splist = m_SList;

	mov	eax, DWORD PTR _this$1$[ebp]
	movups	XMMWORD PTR _b1$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR _b1$[ebp+16], 0
	movss	DWORD PTR _bestpos$1$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 862  : 	SplitList* splist = m_SList;

	mov	edi, DWORD PTR [eax+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR _b1$[ebp+20], 0
	mov	DWORD PTR _b2$[ebp+16], 0
	mov	DWORD PTR _b2$[ebp+20], 0
	movups	XMMWORD PTR _b2$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 861  : 	aabb b1, b2, b3 = a_Box, b4 = a_Box;

	movdqu	xmm0, XMMWORD PTR [ebx]
	movdqu	XMMWORD PTR _b3$[ebp], xmm0
	movq	xmm0, QWORD PTR [ebx+16]
	movq	QWORD PTR _b3$[ebp+16], xmm0

; 863  : 	float b3p1 = b3.GetPos().cell[axis];

	movss	xmm2, DWORD PTR _b3$[ebp+esi*4]
	movss	DWORD PTR _b3p1$1$[ebp], xmm2
	movdqu	xmm0, XMMWORD PTR [ebx]
	movdqu	XMMWORD PTR _b4$[ebp], xmm0
	movq	xmm0, QWORD PTR [ebx+16]
	movq	QWORD PTR _b4$[ebp+16], xmm0

; 864  : 	float b4p2 = b4.GetPos().cell[axis] + b4.GetSize().cell[axis];

	movss	xmm0, DWORD PTR _b4$[ebp+esi*4+12]
	addss	xmm0, DWORD PTR _b4$[ebp+esi*4]
	movss	DWORD PTR _b4p2$1$[ebp], xmm0

; 865  : 	while (splist)

	test	edi, edi
	je	$LN25@Subdivide
	movss	xmm3, DWORD PTR _pos1$1$[ebp]
	mov	eax, DWORD PTR _a_Prims$[ebp]
	npad	7
$LL26@Subdivide:

; 866  : 	{
; 867  : 		b4.GetPos().cell[axis] = splist->splitpos;

	movss	xmm1, DWORD PTR [edi]

; 868  : 		b4.GetSize().cell[axis] = pos2 - splist->splitpos;
; 869  : 		b3.GetSize().cell[axis] = splist->splitpos - pos1;
; 870  : 		float b3p2 = b3.GetPos().cell[axis] + b3.GetSize().cell[axis];
; 871  : 		float b4p1 = b4.GetPos().cell[axis];
; 872  : 		for ( int i = 0; i < a_Prims; i++ ) if (pright[i])

	xor	ebx, ebx
	movss	xmm0, DWORD PTR _pos2$1$[ebp]
	movss	DWORD PTR _b4p1$1$[ebp], xmm1
	subss	xmm0, xmm1
	movss	DWORD PTR _b4$[ebp+esi*4], xmm1
	movss	DWORD PTR _b4$[ebp+esi*4+12], xmm0
	movaps	xmm0, xmm1
	subss	xmm0, xmm3
	movss	DWORD PTR _b3$[ebp+esi*4+12], xmm0
	addss	xmm0, xmm2
	movss	DWORD PTR _b3p2$1$[ebp], xmm0
	test	eax, eax
	jle	$LN22@Subdivide

; 878  : 				if (p->IntersectBox( b4 )) splist->n2count++; else pright[i] = false;

	mov	edx, DWORD PTR _eleft$1$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _eright$1$[ebp]
	sub	eax, edx
	sub	ecx, edx
	mov	DWORD PTR tv1462[ebp], eax
	mov	esi, edx
	mov	DWORD PTR tv1460[ebp], ecx
$LL24@Subdivide:

; 868  : 		b4.GetSize().cell[axis] = pos2 - splist->splitpos;
; 869  : 		b3.GetSize().cell[axis] = splist->splitpos - pos1;
; 870  : 		float b3p2 = b3.GetPos().cell[axis] + b3.GetSize().cell[axis];
; 871  : 		float b4p1 = b4.GetPos().cell[axis];
; 872  : 		for ( int i = 0; i < a_Prims; i++ ) if (pright[i])

	mov	edx, DWORD PTR _pright$1$[ebp]
	cmp	BYTE PTR [ebx+edx], 0
	je	$LN21@Subdivide

; 873  : 		{
; 874  : 			Primitive* p = parray[i];
; 875  : 			if ((eleft[i] <= b3p2) && (eright[i] >= b3p1))

	comiss	xmm0, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+esi]
	mov	DWORD PTR _p$1$[ebp], eax
	jb	SHORT $LN19@Subdivide
	movss	xmm0, DWORD PTR [ecx+esi]
	comiss	xmm0, xmm2
	jb	SHORT $LN19@Subdivide

; 876  : 				if (p->IntersectBox( b3 )) splist->n1count++;

	lea	ecx, DWORD PTR _b3$[ebp]
	push	ecx
	mov	ecx, eax
	call	?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z ; Raytracer::Primitive::IntersectBox
	movss	xmm1, DWORD PTR _b4p1$1$[ebp]
	test	al, al
	mov	ecx, DWORD PTR tv1460[ebp]
	mov	eax, DWORD PTR _p$1$[ebp]
	je	SHORT $LN19@Subdivide
	inc	DWORD PTR [edi+4]
$LN19@Subdivide:

; 877  : 			if ((eleft[i] <= b4p2) && (eright[i] >= b4p1))

	movss	xmm0, DWORD PTR _b4p2$1$[ebp]
	comiss	xmm0, DWORD PTR [esi]
	jb	SHORT $LN253@Subdivide
	movss	xmm0, DWORD PTR [ecx+esi]
	comiss	xmm0, xmm1
	jb	SHORT $LN253@Subdivide

; 878  : 				if (p->IntersectBox( b4 )) splist->n2count++; else pright[i] = false;

	lea	ecx, DWORD PTR _b4$[ebp]
	push	ecx
	mov	ecx, eax
	call	?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z ; Raytracer::Primitive::IntersectBox
	test	al, al
	je	$LN17@Subdivide
	inc	DWORD PTR [edi+8]
$LN253@Subdivide:
	mov	eax, DWORD PTR tv1462[ebp]
$LN23@Subdivide:

; 868  : 		b4.GetSize().cell[axis] = pos2 - splist->splitpos;
; 869  : 		b3.GetSize().cell[axis] = splist->splitpos - pos1;
; 870  : 		float b3p2 = b3.GetPos().cell[axis] + b3.GetSize().cell[axis];
; 871  : 		float b4p1 = b4.GetPos().cell[axis];
; 872  : 		for ( int i = 0; i < a_Prims; i++ ) if (pright[i])

	movss	xmm0, DWORD PTR _b3p2$1$[ebp]
	inc	ebx
	movss	xmm1, DWORD PTR _b4p1$1$[ebp]
	add	esi, 4
	movss	xmm2, DWORD PTR _b3p1$1$[ebp]
	mov	ecx, DWORD PTR tv1460[ebp]
	cmp	ebx, DWORD PTR _a_Prims$[ebp]
	jl	$LL24@Subdivide
	movss	xmm3, DWORD PTR _pos1$1$[ebp]
	mov	esi, DWORD PTR _axis$1$[ebp]
	mov	eax, DWORD PTR _a_Prims$[ebp]
$LN22@Subdivide:

; 881  : 		splist = splist->next;

	mov	edi, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR _parray$1$[ebp]
	test	edi, edi
	jne	$LL26@Subdivide
	mov	ebx, DWORD PTR _a_Box$[ebp]
$LN25@Subdivide:

; 882  : 	}
; 883  : 	delete pright;

	push	DWORD PTR _pright$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete

; 884  : 	// calculate surface area for current node
; 885  : 	real SAV = 0.5f / (a_Box.w() * a_Box.d() + a_Box.w() * a_Box.h() + a_Box.d() * a_Box.h());

	movss	xmm2, DWORD PTR [ebx+16]
	add	esp, 4
	movss	xmm0, DWORD PTR [ebx+12]
	movaps	xmm1, xmm2
	mulss	xmm2, DWORD PTR [ebx+20]

; 886  : 	// calculate cost for not splitting
; 887  : 	real Cleaf = a_Prims * 1.0f;
; 888  : 	// determine optimal split plane position
; 889  : 	splist = m_SList;

	mov	eax, DWORD PTR _this$1$[ebp]
	movss	xmm3, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	mulss	xmm0, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [eax+4]

; 890  : 	real lowcost = 10000;

	movss	xmm7, DWORD PTR __real@461c4000
	addss	xmm1, xmm0
	movd	xmm0, DWORD PTR _a_Prims$[ebp]
	cvtdq2ps xmm0, xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR _Cleaf$1$[ebp], xmm0
	divss	xmm3, xmm1
	movss	DWORD PTR _SAV$1$[ebp], xmm3

; 891  : 	real bestpos = 0;
; 892  : 	while (splist)

	test	eax, eax
	je	$LN13@Subdivide
	npad	5
$LL14@Subdivide:

; 893  : 	{
; 894  : 		// calculate child node extends
; 895  : 		b4.GetPos().cell[axis] = splist->splitpos;

	movss	xmm6, DWORD PTR [eax]

; 896  : 		b4.GetSize().cell[axis] = pos2 - splist->splitpos;

	movss	xmm0, DWORD PTR _pos2$1$[ebp]
	subss	xmm0, xmm6
	movss	DWORD PTR _b4$[ebp+esi*4], xmm6
	movss	DWORD PTR _b4$[ebp+esi*4+12], xmm0

; 897  : 		b3.GetSize().cell[axis] = splist->splitpos - pos1;

	movaps	xmm0, xmm6
	subss	xmm0, DWORD PTR _pos1$1$[ebp]

; 898  : 		// calculate child node cost
; 899  : 		real SA1 = 2 * (b3.w() * b3.d() + b3.w() * b3.h() + b3.d() * b3.h());
; 900  : 		real SA2 = 2 * (b4.w() * b4.d() + b4.w() * b4.h() + b4.d() * b4.h());

	movss	xmm4, DWORD PTR _b4$[ebp+12]
	mulss	xmm4, DWORD PTR _b4$[ebp+20]
	movss	DWORD PTR _b3$[ebp+esi*4+12], xmm0
	movss	xmm2, DWORD PTR _b3$[ebp+16]
	movss	xmm1, DWORD PTR _b3$[ebp+12]
	movaps	xmm5, xmm2
	mulss	xmm2, DWORD PTR _b3$[ebp+20]
	movd	xmm0, DWORD PTR [eax+4]
	mulss	xmm5, xmm1
	mulss	xmm1, DWORD PTR _b3$[ebp+20]

; 901  : 		real splitcost = 0.3f + 1.0f * (SA1 * SAV * splist->n1count + SA2 * SAV * splist->n2count);

	cvtdq2ps xmm0, xmm0
	addss	xmm5, xmm1
	addss	xmm5, xmm2
	movss	xmm2, DWORD PTR _b4$[ebp+16]
	mulss	xmm5, DWORD PTR __real@40000000
	mulss	xmm5, xmm3
	movss	xmm3, DWORD PTR _SAV$1$[ebp]
	mulss	xmm5, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _b4$[ebp+12]
	mulss	xmm2, DWORD PTR _b4$[ebp+20]
	addss	xmm4, xmm0
	movd	xmm0, DWORD PTR [eax+8]
	cvtdq2ps xmm0, xmm0
	addss	xmm4, xmm2
	mulss	xmm4, DWORD PTR __real@40000000
	mulss	xmm4, xmm3
	mulss	xmm4, xmm0
	addss	xmm5, xmm4
	addss	xmm5, DWORD PTR __real@3e99999a

; 902  : 		// update best cost tracking variables
; 903  : 		if (splitcost < lowcost)

	comiss	xmm7, xmm5
	jbe	SHORT $LN12@Subdivide

; 904  : 		{
; 905  : 			lowcost = splitcost;
; 906  : 			bestpos = splist->splitpos;
; 907  : 			b1 = b3, b2 = b4;

	movdqu	xmm0, XMMWORD PTR _b3$[ebp]
	movaps	xmm7, xmm5
	movss	DWORD PTR _bestpos$1$[ebp], xmm6
	movdqu	XMMWORD PTR _b1$[ebp], xmm0
	movq	xmm0, QWORD PTR _b3$[ebp+16]
	movq	QWORD PTR _b1$[ebp+16], xmm0
	movdqu	xmm0, XMMWORD PTR _b4$[ebp]
	movdqu	XMMWORD PTR _b2$[ebp], xmm0
	movq	xmm0, QWORD PTR _b4$[ebp+16]
	movq	QWORD PTR _b2$[ebp+16], xmm0
$LN12@Subdivide:

; 908  : 		}
; 909  : 		splist = splist->next;

	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	jne	$LL14@Subdivide
	movss	xmm0, DWORD PTR _Cleaf$1$[ebp]
$LN13@Subdivide:

; 910  : 	}
; 911  : 	if (lowcost > Cleaf) return;

	comiss	xmm7, xmm0
	ja	$LN1@Subdivide
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 212  : 	void SetSplitPos( real a_Pos ) { m_Split = a_Pos; }

	mov	eax, DWORD PTR _a_Node$[ebp]
	movss	xmm0, DWORD PTR _bestpos$1$[ebp]
	movss	DWORD PTR [eax], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 914  : 	KdTreeNode* left = s_MManager->NewKdTreeNodePair();

	mov	ecx, DWORD PTR ?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A ; Raytracer::KdTree::s_MManager
	call	?NewKdTreeNodePair@MManager@Raytracer@@QAEPAVKdTreeNode@2@XZ ; Raytracer::MManager::NewKdTreeNodePair
	mov	edi, eax

; 915  : 	int n1count = 0, n2count = 0, total = 0;

	xor	ebx, ebx

; 916  : 	// assign primitives to both sides
; 917  : 	float b1p1 = b1.GetPos().cell[axis];

	mov	eax, DWORD PTR _axis$1$[ebp]
	xor	esi, esi
	mov	DWORD PTR _n1count$1$[ebp], esi
	mov	DWORD PTR _n2count$1$[ebp], ebx
	movss	xmm2, DWORD PTR _b1$[ebp+eax*4]

; 918  : 	float b2p2 = b2.GetPos().cell[axis] + b2.GetSize().cell[axis];

	movss	xmm3, DWORD PTR _b2$[ebp+eax*4]
	movss	xmm1, DWORD PTR _b2$[ebp+eax*4+12]
	addss	xmm1, xmm3

; 919  : 	float b1p2 = b1.GetPos().cell[axis] + b1.GetSize().cell[axis];

	movss	xmm0, DWORD PTR _b1$[ebp+eax*4+12]
	addss	xmm0, xmm2
	movss	DWORD PTR _b1p1$1$[ebp], xmm2
	movss	DWORD PTR _b2p1$1$[ebp], xmm3
	movss	DWORD PTR _b2p2$1$[ebp], xmm1
	movss	DWORD PTR _b1p2$1$[ebp], xmm0

; 921  : 	for ( int i = 0; i < a_Prims; i++ )

	cmp	DWORD PTR _a_Prims$[ebp], ebx
	jle	$LN8@Subdivide
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 212  : 	void SetSplitPos( real a_Pos ) { m_Split = a_Pos; }

	mov	edx, DWORD PTR _eleft$1$[ebp]
	mov	esi, edx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 921  : 	for ( int i = 0; i < a_Prims; i++ )

	mov	ecx, DWORD PTR _parray$1$[ebp]
	mov	eax, DWORD PTR _eright$1$[ebp]
	sub	ecx, edx
	sub	eax, edx
	mov	DWORD PTR tv1461[ebp], ecx
	mov	DWORD PTR tv1459[ebp], eax
$LL10@Subdivide:

; 922  : 	{
; 923  : 		Primitive* p = parray[i];
; 924  : 		total++;
; 925  : 		if ((eleft[i] <= b1p2) && (eright[i] >= b1p1)) if (p->IntersectBox( b1 )) 

	comiss	xmm0, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+ecx]
	jb	SHORT $LN6@Subdivide
	movss	xmm0, DWORD PTR [esi+eax]
	comiss	xmm0, xmm2
	jb	SHORT $LN6@Subdivide
	lea	eax, DWORD PTR _b1$[ebp]
	mov	ecx, ebx
	push	eax
	call	?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z ; Raytracer::Primitive::IntersectBox
	test	al, al
	je	SHORT $LN245@Subdivide

; 948  : 
; 949  : // -----------------------------------------------------------
; 950  : // KdTreeNode class implementation
; 951  : // -----------------------------------------------------------
; 952  : 
; 953  : void KdTreeNode::Add( Primitive* a_Prim )
; 954  : {
; 955  : 	ObjectList* lnode = KdTree::s_MManager->NewObjectList();

	mov	ecx, DWORD PTR ?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A ; Raytracer::KdTree::s_MManager
	call	?NewObjectList@MManager@Raytracer@@QAEPAVObjectList@2@XZ ; Raytracer::MManager::NewObjectList
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 192  : 	void SetPrimitive( Primitive* a_Prim ) { m_Primitive = a_Prim; }

	mov	DWORD PTR [eax], ebx

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	ecx, DWORD PTR [edi+4]
	and	ecx, -8					; fffffff8H

; 194  : 	void SetNext( ObjectList* a_Next ) { m_Next = a_Next; }

	mov	DWORD PTR [eax+4], ecx

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	mov	ecx, DWORD PTR [edi+4]
	and	ecx, 7
	add	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 928  : 			n1count++;

	inc	DWORD PTR _n1count$1$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	mov	DWORD PTR [edi+4], ecx
$LN245@Subdivide:
	mov	eax, DWORD PTR tv1459[ebp]
	movss	xmm3, DWORD PTR _b2p1$1$[ebp]
	movss	xmm1, DWORD PTR _b2p2$1$[ebp]
$LN6@Subdivide:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 930  : 		if ((eleft[i] <= b2p2) && (eright[i] >= b2p1)) if (p->IntersectBox( b2 )) 

	comiss	xmm1, DWORD PTR [esi]
	jb	SHORT $LN250@Subdivide
	movss	xmm0, DWORD PTR [esi+eax]
	comiss	xmm0, xmm3
	jb	SHORT $LN250@Subdivide
	lea	eax, DWORD PTR _b2$[ebp]
	mov	ecx, ebx
	push	eax
	call	?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z ; Raytracer::Primitive::IntersectBox
	test	al, al
	je	SHORT $LN244@Subdivide

; 948  : 
; 949  : // -----------------------------------------------------------
; 950  : // KdTreeNode class implementation
; 951  : // -----------------------------------------------------------
; 952  : 
; 953  : void KdTreeNode::Add( Primitive* a_Prim )
; 954  : {
; 955  : 	ObjectList* lnode = KdTree::s_MManager->NewObjectList();

	mov	ecx, DWORD PTR ?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A ; Raytracer::KdTree::s_MManager
	call	?NewObjectList@MManager@Raytracer@@QAEPAVObjectList@2@XZ ; Raytracer::MManager::NewObjectList
	movss	xmm1, DWORD PTR _b2p2$1$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 192  : 	void SetPrimitive( Primitive* a_Prim ) { m_Primitive = a_Prim; }

	mov	DWORD PTR [eax], ebx

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	ecx, DWORD PTR [edi+12]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 933  : 			n2count++;

	mov	ebx, DWORD PTR _n2count$1$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	and	ecx, -8					; fffffff8H

; 194  : 	void SetNext( ObjectList* a_Next ) { m_Next = a_Next; }

	mov	DWORD PTR [eax+4], ecx

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	mov	ecx, DWORD PTR [edi+12]
	and	ecx, 7
	add	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 933  : 			n2count++;

	inc	ebx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	mov	DWORD PTR [edi+12], ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 933  : 			n2count++;

	mov	DWORD PTR _n2count$1$[ebp], ebx
	jmp	SHORT $LN9@Subdivide
$LN17@Subdivide:

; 878  : 				if (p->IntersectBox( b4 )) splist->n2count++; else pright[i] = false;

	mov	eax, DWORD PTR _pright$1$[ebp]
	mov	BYTE PTR [ebx+eax], 0

; 879  : 		}

	jmp	$LN253@Subdivide
$LN21@Subdivide:

; 880  : 		else splist->n1count++;

	inc	DWORD PTR [edi+4]
	jmp	$LN23@Subdivide
$LN244@Subdivide:
	movss	xmm1, DWORD PTR _b2p2$1$[ebp]
$LN250@Subdivide:
	mov	ebx, DWORD PTR _n2count$1$[ebp]
$LN9@Subdivide:

; 921  : 	for ( int i = 0; i < a_Prims; i++ )

	movss	xmm0, DWORD PTR _b1p2$1$[ebp]
	add	esi, 4
	dec	DWORD PTR _a_Prims$[ebp]
	movss	xmm2, DWORD PTR _b1p1$1$[ebp]
	movss	xmm3, DWORD PTR _b2p1$1$[ebp]
	mov	eax, DWORD PTR tv1459[ebp]
	mov	ecx, DWORD PTR tv1461[ebp]
	jne	$LL10@Subdivide
	mov	esi, DWORD PTR _n1count$1$[ebp]
$LN8@Subdivide:

; 934  : 		}
; 935  : 	}
; 936  : 	delete eleft;

	push	DWORD PTR _eleft$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete

; 937  : 	delete eright;

	push	DWORD PTR _eright$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete

; 938  : 	delete parray;

	push	DWORD PTR _parray$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	eax, DWORD PTR _a_Node$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 938  : 	delete parray;

	add	esp, 12					; 0000000cH

; 939  : 	s_MManager->FreeObjectList( a_Node->GetList() );

	mov	ecx, DWORD PTR ?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A ; Raytracer::KdTree::s_MManager
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	eax, DWORD PTR [eax+4]
	and	eax, -8					; fffffff8H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 939  : 	s_MManager->FreeObjectList( a_Node->GetList() );

	push	eax
	call	?FreeObjectList@MManager@Raytracer@@QAEXPAVObjectList@2@@Z ; Raytracer::MManager::FreeObjectList
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 214  : 	void SetLeft( KdTreeNode* a_Left ) { m_Data = (unsigned long)a_Left + (m_Data & 7); }

	mov	ecx, DWORD PTR _a_Node$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	and	eax, 7
	add	eax, edi

; 215  : 	KdTreeNode* GetLeft() { return (KdTreeNode*)(m_Data&0xfffffff8); }
; 216  : 	KdTreeNode* GetRight() { return ((KdTreeNode*)(m_Data&0xfffffff8)) + 1; }
; 217  : 	void Add( Primitive* a_Prim );
; 218  : 	bool IsLeaf() { return ((m_Data & 4) > 0); }
; 219  : 	void SetLeaf( bool a_Leaf ) { m_Data = (a_Leaf)?(m_Data|4):(m_Data&0xfffffffb); }

	and	eax, -5					; fffffffbH
	mov	DWORD PTR [ecx+4], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 942  : 	if (a_Depth < MAXTREEDEPTH)

	mov	eax, DWORD PTR _a_Depth$[ebp]
	cmp	eax, 20					; 00000014H
	jge	SHORT $LN1@Subdivide

; 943  : 	{
; 944  : 		if (n1count > 2) Subdivide( left, b1, a_Depth + 1, n1count );

	cmp	esi, 2
	jle	SHORT $LN254@Subdivide
	push	esi
	mov	esi, DWORD PTR _this$1$[ebp]
	inc	eax
	push	eax
	lea	eax, DWORD PTR _b1$[ebp]
	mov	ecx, esi
	push	eax
	push	edi
	call	?Subdivide@KdTree@Raytracer@@QAEXPAVKdTreeNode@2@AAVaabb@2@HH@Z ; Raytracer::KdTree::Subdivide
	mov	eax, DWORD PTR _a_Depth$[ebp]
	jmp	SHORT $LN2@Subdivide
$LN254@Subdivide:
	mov	esi, DWORD PTR _this$1$[ebp]
$LN2@Subdivide:

; 945  : 		if (n2count > 2) Subdivide( left + 1, b2, a_Depth + 1, n2count );

	cmp	ebx, 2
	jle	SHORT $LN1@Subdivide
	push	ebx
	inc	eax
	mov	ecx, esi
	push	eax
	lea	eax, DWORD PTR _b2$[ebp]
	push	eax
	lea	eax, DWORD PTR [edi+8]
	push	eax
	call	?Subdivide@KdTree@Raytracer@@QAEXPAVKdTreeNode@2@AAVaabb@2@HH@Z ; Raytracer::KdTree::Subdivide
$LN1@Subdivide:
	pop	edi
	pop	esi
	pop	ebx

; 946  : 	}
; 947  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Subdivide@KdTree@Raytracer@@QAEXPAVKdTreeNode@2@AAVaabb@2@HH@Z ENDP ; Raytracer::KdTree::Subdivide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?InsertSplitPos@KdTree@Raytracer@@QAEXM@Z
_TEXT	SEGMENT
_a_SplitPos$ = 8					; size = 4
?InsertSplitPos@KdTree@Raytracer@@QAEXM@Z PROC		; Raytracer::KdTree::InsertSplitPos, COMDAT
; _this$ = ecx

; 774  : {

	push	ebp
	mov	ebp, esp

; 775  : 	// insert a split position candidate in the list if unique
; 776  : 	SplitList* entry = m_SPool;
; 777  : 	m_SPool = m_SPool->next;
; 778  : 	entry->next = 0;
; 779  : 	entry->splitpos = a_SplitPos;

	movss	xmm1, DWORD PTR _a_SplitPos$[ebp]
	push	edi
	mov	edi, ecx
	mov	edx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edx+12], 0
	movss	DWORD PTR [edx], xmm1

; 780  : 	entry->n1count = 0;

	mov	DWORD PTR [edx+4], 0

; 781  : 	entry->n2count = 0;

	mov	DWORD PTR [edx+8], 0

; 782  : 	if (!m_SList) m_SList = entry; else

	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	je	SHORT $LN18@InsertSpli

; 783  : 	{
; 784  : 		if (a_SplitPos < m_SList->splitpos)

	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@InsertSpli

; 785  : 		{
; 786  : 			entry->next = m_SList;

	mov	DWORD PTR [edx+12], ecx
$LN18@InsertSpli:

; 787  : 			m_SList = entry;

	mov	DWORD PTR [edi+4], edx
	pop	edi

; 809  : 		}
; 810  : 	}
; 811  : }

	pop	ebp
	ret	4
$LN7@InsertSpli:

; 788  : 		}
; 789  : 		else if (a_SplitPos == m_SList->splitpos)

	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@InsertSpli

; 790  : 		{
; 791  : 			entry->next = m_SPool; // redundant; recycle

	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+12], eax

; 792  : 			m_SPool = entry;

	mov	DWORD PTR [edi+8], edx
	pop	edi

; 809  : 		}
; 810  : 	}
; 811  : }

	pop	ebp
	ret	4
$LN5@InsertSpli:

; 793  : 		}
; 794  : 		else
; 795  : 		{
; 796  : 			SplitList* list = m_SList;
; 797  : 			while ((list->next) && (a_SplitPos >= list->next->splitpos)) 

	cmp	DWORD PTR [ecx+12], 0
	push	esi
	je	SHORT $LN2@InsertSpli
$LL3@InsertSpli:
	mov	esi, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm1, xmm0
	jb	SHORT $LN2@InsertSpli

; 798  : 			{
; 799  : 				if (a_SplitPos == list->next->splitpos)

	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@InsertSpli

; 803  : 					return;
; 804  : 				}
; 805  : 				list = list->next;

	mov	ecx, esi
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LL3@InsertSpli
$LN2@InsertSpli:

; 806  : 			}
; 807  : 			entry->next = list->next;

	mov	eax, DWORD PTR [ecx+12]
	pop	esi
	mov	DWORD PTR [edx+12], eax

; 808  : 			list->next = entry;

	mov	DWORD PTR [ecx+12], edx
	pop	edi

; 809  : 		}
; 810  : 	}
; 811  : }

	pop	ebp
	ret	4
$LN13@InsertSpli:

; 800  : 				{
; 801  : 					entry->next = m_SPool; // redundant; recycle

	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+12], eax
	pop	esi

; 802  : 					m_SPool = entry;

	mov	DWORD PTR [edi+8], edx
	pop	edi

; 809  : 		}
; 810  : 	}
; 811  : }

	pop	ebp
	ret	4
?InsertSplitPos@KdTree@Raytracer@@QAEXM@Z ENDP		; Raytracer::KdTree::InsertSplitPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?Build@KdTree@Raytracer@@QAEXPAVScene@2@@Z
_TEXT	SEGMENT
_sbox$ = -28						; size = 24
_p$1$ = -4						; size = 4
_prims$1$ = 8						; size = 4
_a_Scene$ = 8						; size = 4
?Build@KdTree@Raytracer@@QAEXPAVScene@2@@Z PROC		; Raytracer::KdTree::Build, COMDAT
; _this$ = ecx

; 760  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 761  : 	for ( int p = 0; p < a_Scene->GetNrPrimitives(); p++ )

	mov	eax, DWORD PTR _a_Scene$[ebp]
	push	ebx
	mov	ebx, ecx
	xor	ecx, ecx
	push	esi
	push	edi
	mov	DWORD PTR _p$1$[ebp], ecx
	cmp	DWORD PTR [eax], ecx
	jle	SHORT $LN4@Build
$LL6@Build:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 268  : 	Primitive* GetPrimitive( int a_Idx ) { return m_Primitive[a_Idx]; }

	mov	eax, DWORD PTR [eax+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 762  : 		m_Root->Add( a_Scene->GetPrimitive( p ) );

	mov	edi, DWORD PTR [ebx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 268  : 	Primitive* GetPrimitive( int a_Idx ) { return m_Primitive[a_Idx]; }

	mov	esi, DWORD PTR [eax+ecx*4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 955  : 	ObjectList* lnode = KdTree::s_MManager->NewObjectList();

	mov	ecx, DWORD PTR ?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A ; Raytracer::KdTree::s_MManager
	call	?NewObjectList@MManager@Raytracer@@QAEPAVObjectList@2@XZ ; Raytracer::MManager::NewObjectList
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 192  : 	void SetPrimitive( Primitive* a_Prim ) { m_Primitive = a_Prim; }

	mov	DWORD PTR [eax], esi

; 195  : 	ObjectList* GetNext() { return m_Next; }
; 196  : private:
; 197  : 	Primitive* m_Primitive;
; 198  : 	ObjectList* m_Next;
; 199  : };
; 200  : 
; 201  : // -----------------------------------------------------------
; 202  : // KdTree class definition
; 203  : // -----------------------------------------------------------
; 204  : 
; 205  : class MManager;
; 206  : class KdTreeNode
; 207  : {
; 208  : public:
; 209  : 	KdTreeNode() : m_Data( 6 ) {};
; 210  : 	void SetAxis( int a_Axis ) { m_Data = (m_Data & 0xfffffffc) + a_Axis; }
; 211  : 	int GetAxis() { return m_Data & 3; }
; 212  : 	void SetSplitPos( real a_Pos ) { m_Split = a_Pos; }
; 213  : 	real GetSplitPos() { return m_Split; }
; 214  : 	void SetLeft( KdTreeNode* a_Left ) { m_Data = (unsigned long)a_Left + (m_Data & 7); }
; 215  : 	KdTreeNode* GetLeft() { return (KdTreeNode*)(m_Data&0xfffffff8); }
; 216  : 	KdTreeNode* GetRight() { return ((KdTreeNode*)(m_Data&0xfffffff8)) + 1; }
; 217  : 	void Add( Primitive* a_Prim );
; 218  : 	bool IsLeaf() { return ((m_Data & 4) > 0); }
; 219  : 	void SetLeaf( bool a_Leaf ) { m_Data = (a_Leaf)?(m_Data|4):(m_Data&0xfffffffb); }
; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	ecx, DWORD PTR [edi+4]
	and	ecx, -8					; fffffff8H

; 193  : 	Primitive* GetPrimitive() { return m_Primitive; }
; 194  : 	void SetNext( ObjectList* a_Next ) { m_Next = a_Next; }

	mov	DWORD PTR [eax+4], ecx

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	mov	ecx, DWORD PTR [edi+4]
	and	ecx, 7
	add	ecx, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 761  : 	for ( int p = 0; p < a_Scene->GetNrPrimitives(); p++ )

	mov	eax, DWORD PTR _a_Scene$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	mov	DWORD PTR [edi+4], ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 761  : 	for ( int p = 0; p < a_Scene->GetNrPrimitives(); p++ )

	mov	ecx, DWORD PTR _p$1$[ebp]
	inc	ecx
	mov	DWORD PTR _p$1$[ebp], ecx
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LL6@Build
$LN4@Build:

; 764  : 	aabb sbox = a_Scene->GetExtends();

	movdqu	xmm0, XMMWORD PTR [eax+16]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 267  : 	int GetNrPrimitives() { return m_Primitives; }

	mov	esi, DWORD PTR [eax]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 765  : 	m_SPool = new SplitList[prims * 2 + 8];

	xor	ecx, ecx
	mov	edx, 16					; 00000010H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 267  : 	int GetNrPrimitives() { return m_Primitives; }

	mov	DWORD PTR _prims$1$[ebp], esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 764  : 	aabb sbox = a_Scene->GetExtends();

	movdqu	XMMWORD PTR _sbox$[ebp], xmm0
	movq	xmm0, QWORD PTR [eax+32]

; 765  : 	m_SPool = new SplitList[prims * 2 + 8];

	lea	eax, DWORD PTR [esi*2+8]
	mul	edx
	movq	QWORD PTR _sbox$[ebp+16], xmm0
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new

; 767  : 	for (  i = 0; i < (prims * 2 + 6); i++ ) m_SPool[i].next = &m_SPool[i + 1];

	lea	esi, DWORD PTR [esi*2+6]
	mov	DWORD PTR [ebx+8], eax
	add	esp, 4
	xor	edi, edi
	test	esi, esi
	jle	SHORT $LN1@Build
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 267  : 	int GetNrPrimitives() { return m_Primitives; }

	xor	edx, edx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 767  : 	for (  i = 0; i < (prims * 2 + 6); i++ ) m_SPool[i].next = &m_SPool[i + 1];

	mov	edi, esi
	npad	5
$LL3@Build:
	mov	ecx, DWORD PTR [ebx+8]
	lea	eax, DWORD PTR [ecx+16]
	add	eax, edx
	mov	DWORD PTR [ecx+edx+12], eax
	add	edx, 16					; 00000010H
	dec	esi
	jne	SHORT $LL3@Build
$LN1@Build:

; 768  : 	m_SPool[i].next = 0;

	mov	eax, DWORD PTR [ebx+8]
	add	edi, edi

; 769  : 	m_SList = 0;
; 770  : 	Subdivide( m_Root, sbox, 0, prims );

	push	DWORD PTR _prims$1$[ebp]
	mov	ecx, ebx
	push	0
	mov	DWORD PTR [eax+edi*8+12], 0
	lea	eax, DWORD PTR _sbox$[ebp]
	push	eax
	push	DWORD PTR [ebx]
	mov	DWORD PTR [ebx+4], 0
	call	?Subdivide@KdTree@Raytracer@@QAEXPAVKdTreeNode@2@AAVaabb@2@HH@Z ; Raytracer::KdTree::Subdivide
	pop	edi
	pop	esi
	pop	ebx

; 771  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Build@KdTree@Raytracer@@QAEXPAVScene@2@@Z ENDP		; Raytracer::KdTree::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0KdTree@Raytracer@@QAE@XZ
_TEXT	SEGMENT
??0KdTree@Raytracer@@QAE@XZ PROC			; Raytracer::KdTree::KdTree, COMDAT
; _this$ = ecx

; 755  : {

	push	esi

; 756  : 	m_Root = new KdTreeNode();

	push	8
	mov	esi, ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@KdTree
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 209  : 	KdTreeNode() : m_Data( 6 ) {};

	mov	DWORD PTR [eax+4], 6
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 756  : 	m_Root = new KdTreeNode();

	mov	DWORD PTR [esi], eax

; 757  : }

	mov	eax, esi
	pop	esi
	ret	0
$LN3@KdTree:

; 756  : 	m_Root = new KdTreeNode();

	mov	DWORD PTR [esi], 0

; 757  : }

	mov	eax, esi
	pop	esi
	ret	0
??0KdTree@Raytracer@@QAE@XZ ENDP			; Raytracer::KdTree::KdTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetList@KdTreeNode@Raytracer@@QAEXPAVObjectList@2@@Z
_TEXT	SEGMENT
_a_List$ = 8						; size = 4
?SetList@KdTreeNode@Raytracer@@QAEXPAVObjectList@2@@Z PROC ; Raytracer::KdTreeNode::SetList, COMDAT
; _this$ = ecx

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+4]
	and	eax, 7
	add	eax, DWORD PTR _a_List$[ebp]
	mov	DWORD PTR [ecx+4], eax
	pop	ebp
	ret	4
?SetList@KdTreeNode@Raytracer@@QAEXPAVObjectList@2@@Z ENDP ; Raytracer::KdTreeNode::SetList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetList@KdTreeNode@Raytracer@@QAEPAVObjectList@2@XZ
_TEXT	SEGMENT
?GetList@KdTreeNode@Raytracer@@QAEPAVObjectList@2@XZ PROC ; Raytracer::KdTreeNode::GetList, COMDAT
; _this$ = ecx

; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	eax, DWORD PTR [ecx+4]
	and	eax, -8					; fffffff8H
	ret	0
?GetList@KdTreeNode@Raytracer@@QAEPAVObjectList@2@XZ ENDP ; Raytracer::KdTreeNode::GetList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetLeaf@KdTreeNode@Raytracer@@QAEX_N@Z
_TEXT	SEGMENT
_a_Leaf$ = 8						; size = 1
?SetLeaf@KdTreeNode@Raytracer@@QAEX_N@Z PROC		; Raytracer::KdTreeNode::SetLeaf, COMDAT
; _this$ = ecx

; 219  : 	void SetLeaf( bool a_Leaf ) { m_Data = (a_Leaf)?(m_Data|4):(m_Data&0xfffffffb); }

	push	ebp
	mov	ebp, esp
	cmp	BYTE PTR _a_Leaf$[ebp], 0
	je	SHORT $LN3@SetLeaf
	or	DWORD PTR [ecx+4], 4
	pop	ebp
	ret	4
$LN3@SetLeaf:
	and	DWORD PTR [ecx+4], -5			; fffffffbH
	pop	ebp
	ret	4
?SetLeaf@KdTreeNode@Raytracer@@QAEX_N@Z ENDP		; Raytracer::KdTreeNode::SetLeaf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?Add@KdTreeNode@Raytracer@@QAEXPAVPrimitive@2@@Z
_TEXT	SEGMENT
_a_Prim$ = 8						; size = 4
?Add@KdTreeNode@Raytracer@@QAEXPAVPrimitive@2@@Z PROC	; Raytracer::KdTreeNode::Add, COMDAT
; _this$ = ecx

; 954  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 955  : 	ObjectList* lnode = KdTree::s_MManager->NewObjectList();

	mov	ecx, DWORD PTR ?s_MManager@KdTree@Raytracer@@2PAVMManager@2@A ; Raytracer::KdTree::s_MManager
	call	?NewObjectList@MManager@Raytracer@@QAEPAVObjectList@2@XZ ; Raytracer::MManager::NewObjectList
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 192  : 	void SetPrimitive( Primitive* a_Prim ) { m_Primitive = a_Prim; }

	mov	edx, DWORD PTR _a_Prim$[ebp]
	mov	DWORD PTR [eax], edx

; 195  : 	ObjectList* GetNext() { return m_Next; }
; 196  : private:
; 197  : 	Primitive* m_Primitive;
; 198  : 	ObjectList* m_Next;
; 199  : };
; 200  : 
; 201  : // -----------------------------------------------------------
; 202  : // KdTree class definition
; 203  : // -----------------------------------------------------------
; 204  : 
; 205  : class MManager;
; 206  : class KdTreeNode
; 207  : {
; 208  : public:
; 209  : 	KdTreeNode() : m_Data( 6 ) {};
; 210  : 	void SetAxis( int a_Axis ) { m_Data = (m_Data & 0xfffffffc) + a_Axis; }
; 211  : 	int GetAxis() { return m_Data & 3; }
; 212  : 	void SetSplitPos( real a_Pos ) { m_Split = a_Pos; }
; 213  : 	real GetSplitPos() { return m_Split; }
; 214  : 	void SetLeft( KdTreeNode* a_Left ) { m_Data = (unsigned long)a_Left + (m_Data & 7); }
; 215  : 	KdTreeNode* GetLeft() { return (KdTreeNode*)(m_Data&0xfffffff8); }
; 216  : 	KdTreeNode* GetRight() { return ((KdTreeNode*)(m_Data&0xfffffff8)) + 1; }
; 217  : 	void Add( Primitive* a_Prim );
; 218  : 	bool IsLeaf() { return ((m_Data & 4) > 0); }
; 219  : 	void SetLeaf( bool a_Leaf ) { m_Data = (a_Leaf)?(m_Data|4):(m_Data&0xfffffffb); }
; 220  : 	ObjectList* GetList() { return (ObjectList*)(m_Data&0xfffffff8); }

	mov	edx, DWORD PTR [esi+4]
	and	edx, -8					; fffffff8H

; 193  : 	Primitive* GetPrimitive() { return m_Primitive; }
; 194  : 	void SetNext( ObjectList* a_Next ) { m_Next = a_Next; }

	mov	DWORD PTR [eax+4], edx

; 221  : 	void SetList( ObjectList* a_List ) { m_Data = (unsigned long)a_List + (m_Data & 7); }

	mov	ecx, DWORD PTR [esi+4]
	and	ecx, 7
	add	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	pop	esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 959  : }

	pop	ebp
	ret	4
?Add@KdTreeNode@Raytracer@@QAEXPAVPrimitive@2@@Z ENDP	; Raytracer::KdTreeNode::Add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetLeft@KdTreeNode@Raytracer@@QAEXPAV12@@Z
_TEXT	SEGMENT
_a_Left$ = 8						; size = 4
?SetLeft@KdTreeNode@Raytracer@@QAEXPAV12@@Z PROC	; Raytracer::KdTreeNode::SetLeft, COMDAT
; _this$ = ecx

; 214  : 	void SetLeft( KdTreeNode* a_Left ) { m_Data = (unsigned long)a_Left + (m_Data & 7); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+4]
	and	eax, 7
	add	eax, DWORD PTR _a_Left$[ebp]
	mov	DWORD PTR [ecx+4], eax
	pop	ebp
	ret	4
?SetLeft@KdTreeNode@Raytracer@@QAEXPAV12@@Z ENDP	; Raytracer::KdTreeNode::SetLeft
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetSplitPos@KdTreeNode@Raytracer@@QAEXM@Z
_TEXT	SEGMENT
_a_Pos$ = 8						; size = 4
?SetSplitPos@KdTreeNode@Raytracer@@QAEXM@Z PROC		; Raytracer::KdTreeNode::SetSplitPos, COMDAT
; _this$ = ecx

; 212  : 	void SetSplitPos( real a_Pos ) { m_Split = a_Pos; }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a_Pos$[ebp]
	movss	DWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
?SetSplitPos@KdTreeNode@Raytracer@@QAEXM@Z ENDP		; Raytracer::KdTreeNode::SetSplitPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetAxis@KdTreeNode@Raytracer@@QAEHXZ
_TEXT	SEGMENT
?GetAxis@KdTreeNode@Raytracer@@QAEHXZ PROC		; Raytracer::KdTreeNode::GetAxis, COMDAT
; _this$ = ecx

; 211  : 	int GetAxis() { return m_Data & 3; }

	mov	eax, DWORD PTR [ecx+4]
	and	eax, 3
	ret	0
?GetAxis@KdTreeNode@Raytracer@@QAEHXZ ENDP		; Raytracer::KdTreeNode::GetAxis
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetAxis@KdTreeNode@Raytracer@@QAEXH@Z
_TEXT	SEGMENT
_a_Axis$ = 8						; size = 4
?SetAxis@KdTreeNode@Raytracer@@QAEXH@Z PROC		; Raytracer::KdTreeNode::SetAxis, COMDAT
; _this$ = ecx

; 210  : 	void SetAxis( int a_Axis ) { m_Data = (m_Data & 0xfffffffc) + a_Axis; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+4]
	and	eax, -4					; fffffffcH
	add	eax, DWORD PTR _a_Axis$[ebp]
	mov	DWORD PTR [ecx+4], eax
	pop	ebp
	ret	4
?SetAxis@KdTreeNode@Raytracer@@QAEXH@Z ENDP		; Raytracer::KdTreeNode::SetAxis
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ??0KdTreeNode@Raytracer@@QAE@XZ
_TEXT	SEGMENT
??0KdTreeNode@Raytracer@@QAE@XZ PROC			; Raytracer::KdTreeNode::KdTreeNode, COMDAT
; _this$ = ecx

; 209  : 	KdTreeNode() : m_Data( 6 ) {};

	mov	DWORD PTR [ecx+4], 6
	mov	eax, ecx
	ret	0
??0KdTreeNode@Raytracer@@QAE@XZ ENDP			; Raytracer::KdTreeNode::KdTreeNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetNext@ObjectList@Raytracer@@QAEPAV12@XZ
_TEXT	SEGMENT
?GetNext@ObjectList@Raytracer@@QAEPAV12@XZ PROC		; Raytracer::ObjectList::GetNext, COMDAT
; _this$ = ecx

; 195  : 	ObjectList* GetNext() { return m_Next; }

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetNext@ObjectList@Raytracer@@QAEPAV12@XZ ENDP		; Raytracer::ObjectList::GetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetNext@ObjectList@Raytracer@@QAEXPAV12@@Z
_TEXT	SEGMENT
_a_Next$ = 8						; size = 4
?SetNext@ObjectList@Raytracer@@QAEXPAV12@@Z PROC	; Raytracer::ObjectList::SetNext, COMDAT
; _this$ = ecx

; 194  : 	void SetNext( ObjectList* a_Next ) { m_Next = a_Next; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_Next$[ebp]
	mov	DWORD PTR [ecx+4], eax
	pop	ebp
	ret	4
?SetNext@ObjectList@Raytracer@@QAEXPAV12@@Z ENDP	; Raytracer::ObjectList::SetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetPrimitive@ObjectList@Raytracer@@QAEPAVPrimitive@2@XZ
_TEXT	SEGMENT
?GetPrimitive@ObjectList@Raytracer@@QAEPAVPrimitive@2@XZ PROC ; Raytracer::ObjectList::GetPrimitive, COMDAT
; _this$ = ecx

; 193  : 	Primitive* GetPrimitive() { return m_Primitive; }

	mov	eax, DWORD PTR [ecx]
	ret	0
?GetPrimitive@ObjectList@Raytracer@@QAEPAVPrimitive@2@XZ ENDP ; Raytracer::ObjectList::GetPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetPrimitive@ObjectList@Raytracer@@QAEXPAVPrimitive@2@@Z
_TEXT	SEGMENT
_a_Prim$ = 8						; size = 4
?SetPrimitive@ObjectList@Raytracer@@QAEXPAVPrimitive@2@@Z PROC ; Raytracer::ObjectList::SetPrimitive, COMDAT
; _this$ = ecx

; 192  : 	void SetPrimitive( Primitive* a_Prim ) { m_Primitive = a_Prim; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_Prim$[ebp]
	mov	DWORD PTR [ecx], eax
	pop	ebp
	ret	4
?SetPrimitive@ObjectList@Raytracer@@QAEXPAVPrimitive@2@@Z ENDP ; Raytracer::ObjectList::SetPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetVertex@Primitive@Raytracer@@QAEPAVVertex@2@H@Z
_TEXT	SEGMENT
_a_Idx$ = 8						; size = 4
?GetVertex@Primitive@Raytracer@@QAEPAVVertex@2@H@Z PROC	; Raytracer::Primitive::GetVertex, COMDAT
; _this$ = ecx

; 153  : 	Vertex* GetVertex( int a_Idx ) { return m_Vertex[a_Idx]; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_Idx$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+20]
	pop	ebp
	ret	4
?GetVertex@Primitive@Raytracer@@QAEPAVVertex@2@H@Z ENDP	; Raytracer::Primitive::GetVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@XZ PROC	; Raytracer::Primitive::GetNormal, COMDAT
; _this$ = ecx

; 152  : 	vector3 GetNormal() { return m_N; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+16]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	4
?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@XZ ENDP	; Raytracer::Primitive::GetNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetRadius@Primitive@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?GetRadius@Primitive@Raytracer@@QAEMXZ PROC		; Raytracer::Primitive::GetRadius, COMDAT
; _this$ = ecx

; 150  : 	real GetRadius() { return m_Radius; }

	fld	DWORD PTR [ecx+24]
	ret	0
?GetRadius@Primitive@Raytracer@@QAEMXZ ENDP		; Raytracer::Primitive::GetRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetCentre@Primitive@Raytracer@@QAEAAVvector3@2@XZ
_TEXT	SEGMENT
?GetCentre@Primitive@Raytracer@@QAEAAVvector3@2@XZ PROC	; Raytracer::Primitive::GetCentre, COMDAT
; _this$ = ecx

; 148  : 	vector3& GetCentre() { return m_Centre; }

	lea	eax, DWORD PTR [ecx+8]
	ret	0
?GetCentre@Primitive@Raytracer@@QAEAAVvector3@2@XZ ENDP	; Raytracer::Primitive::GetCentre
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?IntersectSphereBox@Primitive@Raytracer@@QAE_NAAVvector3@2@AAVaabb@2@@Z
_TEXT	SEGMENT
_bsize$ = -36						; size = 12
_spos$ = -24						; size = 12
_bpos$ = -12						; size = 12
_a_Centre$ = 8						; size = 4
_a_Box$ = 12						; size = 4
?IntersectSphereBox@Primitive@Raytracer@@QAE_NAAVvector3@2@AAVaabb@2@@Z PROC ; Raytracer::Primitive::IntersectSphereBox, COMDAT
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 373  : 	float dmin = 0;
; 374  : 	vector3 spos = a_Centre;

	mov	eax, DWORD PTR _a_Centre$[ebp]
	mov	edx, ecx

; 375  : 	vector3 bpos = a_Box.GetPos();

	mov	ecx, DWORD PTR _a_Box$[ebp]
	xorps	xmm1, xmm1
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	movq	QWORD PTR _spos$[ebp], xmm0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR _bpos$[ebp], xmm0

; 376  : 	vector3 bsize = a_Box.GetSize();

	movq	xmm0, QWORD PTR [ecx+12]

; 377  : 	for ( int i = 0; i < 3; i++ )
; 378  : 	{
; 379  : 		if (spos.cell[i] < bpos.cell[i]) 

	movss	xmm3, DWORD PTR _bpos$[ebp]
	mov	DWORD PTR _spos$[ebp+8], eax
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR _bsize$[ebp], xmm0
	movss	xmm0, DWORD PTR _spos$[ebp]
	comiss	xmm3, xmm0
	mov	DWORD PTR _bpos$[ebp+8], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _bsize$[ebp+8], eax
	jbe	SHORT $LN3@IntersectS

; 380  : 		{
; 381  : 			dmin = dmin + (spos.cell[i] - bpos.cell[i]) * (spos.cell[i] - bpos.cell[i]);

	subss	xmm0, xmm3
	jmp	SHORT $LN26@IntersectS
$LN3@IntersectS:

; 382  : 		}
; 383  : 		else if (spos.cell[i] > (bpos.cell[i] + bsize.cell[i])) 

	movss	xmm2, DWORD PTR _bsize$[ebp]
	addss	xmm2, xmm3
	comiss	xmm0, xmm2
	jbe	SHORT $LN5@IntersectS

; 384  : 		{
; 385  : 			dmin = dmin + (spos.cell[i] - (bpos.cell[i] + bsize.cell[i])) * (spos.cell[i] - (bpos.cell[i] + bsize.cell[i]));

	subss	xmm0, xmm2
$LN26@IntersectS:
	mulss	xmm0, xmm0
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
$LN5@IntersectS:

; 377  : 	for ( int i = 0; i < 3; i++ )
; 378  : 	{
; 379  : 		if (spos.cell[i] < bpos.cell[i]) 

	movss	xmm3, DWORD PTR _bpos$[ebp+4]
	movss	xmm0, DWORD PTR _spos$[ebp+4]
	comiss	xmm3, xmm0
	jbe	SHORT $LN21@IntersectS

; 380  : 		{
; 381  : 			dmin = dmin + (spos.cell[i] - bpos.cell[i]) * (spos.cell[i] - bpos.cell[i]);

	subss	xmm0, xmm3
	jmp	SHORT $LN27@IntersectS
$LN21@IntersectS:

; 382  : 		}
; 383  : 		else if (spos.cell[i] > (bpos.cell[i] + bsize.cell[i])) 

	movss	xmm2, DWORD PTR _bsize$[ebp+4]
	addss	xmm2, xmm3
	comiss	xmm0, xmm2
	jbe	SHORT $LN22@IntersectS

; 384  : 		{
; 385  : 			dmin = dmin + (spos.cell[i] - (bpos.cell[i] + bsize.cell[i])) * (spos.cell[i] - (bpos.cell[i] + bsize.cell[i]));

	subss	xmm0, xmm2
$LN27@IntersectS:
	mulss	xmm0, xmm0
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
$LN22@IntersectS:

; 377  : 	for ( int i = 0; i < 3; i++ )
; 378  : 	{
; 379  : 		if (spos.cell[i] < bpos.cell[i]) 

	movss	xmm3, DWORD PTR _bpos$[ebp+8]
	movss	xmm0, DWORD PTR _spos$[ebp+8]
	comiss	xmm3, xmm0
	jbe	SHORT $LN24@IntersectS

; 380  : 		{
; 381  : 			dmin = dmin + (spos.cell[i] - bpos.cell[i]) * (spos.cell[i] - bpos.cell[i]);

	subss	xmm0, xmm3
	jmp	SHORT $LN28@IntersectS
$LN24@IntersectS:

; 382  : 		}
; 383  : 		else if (spos.cell[i] > (bpos.cell[i] + bsize.cell[i])) 

	movss	xmm2, DWORD PTR _bsize$[ebp+8]
	addss	xmm2, xmm3
	comiss	xmm0, xmm2
	jbe	SHORT $LN25@IntersectS

; 384  : 		{
; 385  : 			dmin = dmin + (spos.cell[i] - (bpos.cell[i] + bsize.cell[i])) * (spos.cell[i] - (bpos.cell[i] + bsize.cell[i]));

	subss	xmm0, xmm2
$LN28@IntersectS:
	mulss	xmm0, xmm0
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
$LN25@IntersectS:

; 386  : 		}
; 387  : 	}
; 388  : 	return (dmin <= m_SqRadius);

	movss	xmm0, DWORD PTR [edx+20]
	xor	eax, eax
	comiss	xmm0, xmm1
	setae	al

; 389  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IntersectSphereBox@Primitive@Raytracer@@QAE_NAAVvector3@2@AAVaabb@2@@Z ENDP ; Raytracer::Primitive::IntersectSphereBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?IntersectTriBox@Primitive@Raytracer@@QAE_NAAVvector3@2@0000@Z
_TEXT	SEGMENT
$T1 = -96						; size = 12
$T2 = -84						; size = 12
_normal$ = -84						; size = 12
_v0$ = -72						; size = 12
_p2$6$ = -60						; size = 4
_fez$3$ = -56						; size = 4
_fez$2$ = -56						; size = 4
_fey$1$ = -56						; size = 4
_fex$3$ = -52						; size = 4
_fex$2$ = -52						; size = 4
_fex$1$ = -52						; size = 4
_fez$1$ = -48						; size = 4
_fey$3$ = -48						; size = 4
_fey$2$ = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
_max$11$ = -32						; size = 4
$T6 = -28						; size = 4
$T7 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
$T10 = -12						; size = 4
$T11 = -8						; size = 4
$T12 = -4						; size = 4
$T13 = 8						; size = 4
_a_BoxCentre$ = 8					; size = 4
_min$9$ = 12						; size = 4
_min$8$ = 12						; size = 4
_min$7$ = 12						; size = 4
_min$6$ = 12						; size = 4
_min$5$ = 12						; size = 4
_min$4$ = 12						; size = 4
_min$3$ = 12						; size = 4
_min$2$ = 12						; size = 4
_p0$6$ = 12						; size = 4
_a_BoxHalfsize$ = 12					; size = 4
$T14 = 16						; size = 4
_a_V0$ = 16						; size = 4
$T15 = 20						; size = 4
_a_V1$ = 20						; size = 4
$T16 = 24						; size = 4
_a_V2$ = 24						; size = 4
?IntersectTriBox@Primitive@Raytracer@@QAE_NAAVvector3@2@0000@Z PROC ; Raytracer::Primitive::IntersectTriBox, COMDAT
; _this$ = ecx

; 335  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	eax, DWORD PTR _a_V0$[ebp]
	mov	edx, DWORD PTR _a_BoxCentre$[ebp]
	push	esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 335  : {

	mov	esi, ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm4, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [edx+8]
	movss	xmm5, DWORD PTR [eax]
	subss	xmm4, xmm1
	movss	xmm6, DWORD PTR [eax+4]
	movss	xmm3, DWORD PTR [edx]
	movss	xmm2, DWORD PTR [edx+4]
	subss	xmm5, xmm3
	subss	xmm6, xmm2

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T2[ebp+8], xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 338  : 	v0 = a_V0 - a_BoxCentre;

	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR _v0$[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	eax, DWORD PTR _a_V1$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 338  : 	v0 = a_V0 - a_BoxCentre;

	movss	xmm0, xmm5
	unpcklps xmm0, xmm6
	movq	QWORD PTR _v0$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	DWORD PTR _max$11$[ebp], xmm6
	movss	xmm7, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm7, xmm2
	subss	xmm0, xmm3
	movss	DWORD PTR $T13[ebp], xmm7
	movss	xmm7, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _a_V2$[ebp]
	subss	xmm7, xmm1
	movss	DWORD PTR $T14[ebp], xmm0
	movss	DWORD PTR $T12[ebp], xmm7
	movss	xmm7, DWORD PTR [eax]
	subss	xmm7, xmm3
	movss	xmm3, DWORD PTR [eax+4]
	subss	xmm3, xmm2
	movss	xmm2, DWORD PTR [eax+8]
	subss	xmm2, xmm1
	movaps	xmm1, xmm0
	subss	xmm1, xmm5
	movss	DWORD PTR $T15[ebp], xmm7
	movss	DWORD PTR $T5[ebp], xmm3
	movss	DWORD PTR $T16[ebp], xmm2
	movss	DWORD PTR $T8[ebp], xmm1
	movss	xmm1, DWORD PTR $T13[ebp]
	movaps	xmm2, xmm1
	subss	xmm2, xmm6
	movss	DWORD PTR $T3[ebp], xmm2
	movss	xmm2, DWORD PTR $T12[ebp]
	subss	xmm2, xmm4
	movss	DWORD PTR $T10[ebp], xmm2
	movaps	xmm2, xmm7
	subss	xmm2, xmm0
	movaps	xmm0, xmm3
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR $T16[ebp]
	movss	DWORD PTR $T9[ebp], xmm2
	movss	DWORD PTR $T4[ebp], xmm0
	movaps	xmm0, xmm1
	subss	xmm0, DWORD PTR $T12[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movsd	xmm2, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	DWORD PTR $T11[ebp], xmm0
	movaps	xmm0, xmm5
	subss	xmm0, xmm7
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm7, DWORD PTR $T3[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	DWORD PTR $T6[ebp], xmm0
	movaps	xmm0, xmm6
	subss	xmm0, xmm3
	movss	DWORD PTR _p2$6$[ebp], xmm0
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	movss	DWORD PTR $T7[ebp], xmm0
	movss	xmm0, DWORD PTR $T8[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	cvtps2pd xmm0, xmm0
	andpd	xmm0, xmm2
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fex$1$[ebp], xmm0
	cvtps2pd xmm0, xmm7
	andpd	xmm0, xmm2
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fey$1$[ebp], xmm0
	movss	xmm0, DWORD PTR $T10[ebp]
	cvtps2pd xmm0, xmm0
	andpd	xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 345  : 	AXISTEST_X01( e0.cell[2], e0.cell[1], fez, fey );

	movss	xmm2, DWORD PTR $T10[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	cvtpd2ps xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 345  : 	AXISTEST_X01( e0.cell[2], e0.cell[1], fez, fey );

	mulss	xmm2, xmm6
	movss	xmm6, DWORD PTR $T10[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	DWORD PTR _fez$1$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 345  : 	AXISTEST_X01( e0.cell[2], e0.cell[1], fez, fey );

	movaps	xmm0, xmm7
	mulss	xmm0, xmm4
	mulss	xmm6, xmm3
	subss	xmm2, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm1
	subss	xmm6, xmm0
	comiss	xmm6, xmm2
	jbe	SHORT $LN55@IntersectT
	movaps	xmm1, xmm2
	jmp	SHORT $LN54@IntersectT
$LN55@IntersectT:
	movaps	xmm1, xmm6
	movaps	xmm6, xmm2
$LN54@IntersectT:
	mov	ecx, DWORD PTR _a_BoxHalfsize$[ebp]
	movss	xmm7, DWORD PTR [ecx+4]
	movss	xmm2, DWORD PTR [ecx+8]
	movaps	xmm0, xmm7
	mulss	xmm2, DWORD PTR _fey$1$[ebp]
	mulss	xmm0, DWORD PTR _fez$1$[ebp]
	addss	xmm2, xmm0
	comiss	xmm1, xmm2
	ja	$LN52@IntersectT
	movss	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm2, xmm1
	comiss	xmm2, xmm6
	ja	$LN52@IntersectT

; 346  : 	AXISTEST_Y02( e0.cell[2], e0.cell[0], fez, fex );

	movss	xmm3, DWORD PTR $T8[ebp]
	movss	xmm6, DWORD PTR $T10[ebp]
	movaps	xmm2, xmm3
	mulss	xmm3, DWORD PTR $T16[ebp]
	movaps	xmm0, xmm6
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	subss	xmm2, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR $T15[ebp]
	subss	xmm3, xmm0
	comiss	xmm3, xmm2
	jbe	SHORT $LN51@IntersectT
	movss	DWORD PTR _min$2$[ebp], xmm2
	jmp	SHORT $LN50@IntersectT
$LN51@IntersectT:
	movss	DWORD PTR _min$2$[ebp], xmm3
	movaps	xmm3, xmm2
$LN50@IntersectT:
	movss	xmm6, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+8]
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR _fez$1$[ebp]
	mulss	xmm2, DWORD PTR _fex$1$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$2$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT

; 347  : 	AXISTEST_Z12( e0.cell[1], e0.cell[0], fey, fex );

	movss	xmm2, DWORD PTR $T3[ebp]
	movss	xmm0, DWORD PTR $T8[ebp]
	movaps	xmm3, xmm2
	mulss	xmm0, DWORD PTR $T13[ebp]
	mulss	xmm3, DWORD PTR $T14[ebp]
	mulss	xmm2, DWORD PTR $T15[ebp]
	subss	xmm3, xmm0
	movss	xmm0, DWORD PTR $T8[ebp]
	mulss	xmm0, DWORD PTR $T5[ebp]
	subss	xmm2, xmm0
	comiss	xmm3, xmm2
	jbe	SHORT $LN47@IntersectT
	movss	DWORD PTR _min$3$[ebp], xmm2
	jmp	SHORT $LN46@IntersectT
$LN47@IntersectT:
	movss	DWORD PTR _min$3$[ebp], xmm3
	movaps	xmm3, xmm2
$LN46@IntersectT:
	movaps	xmm0, xmm6
	movaps	xmm2, xmm7
	mulss	xmm0, DWORD PTR _fey$1$[ebp]
	mulss	xmm2, DWORD PTR _fex$1$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$3$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT
	movss	xmm0, DWORD PTR $T9[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm3, DWORD PTR $T4[ebp]
	cvtps2pd xmm0, xmm0
	movss	xmm2, DWORD PTR $T11[ebp]
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fex$2$[ebp], xmm0
	cvtps2pd xmm0, xmm3
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fey$2$[ebp], xmm0
	cvtps2pd xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 351  : 	AXISTEST_X01( e1.cell[2], e1.cell[1], fez, fey );

	mulss	xmm2, DWORD PTR _max$11$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fez$2$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 351  : 	AXISTEST_X01( e1.cell[2], e1.cell[1], fez, fey );

	movaps	xmm0, xmm3
	movss	xmm3, DWORD PTR $T11[ebp]
	mulss	xmm3, DWORD PTR $T5[ebp]
	mulss	xmm0, xmm4
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR $T4[ebp]
	mulss	xmm0, DWORD PTR $T16[ebp]
	subss	xmm3, xmm0
	comiss	xmm3, xmm2
	jbe	SHORT $LN43@IntersectT
	movss	DWORD PTR _min$4$[ebp], xmm2
	jmp	SHORT $LN42@IntersectT
$LN43@IntersectT:
	movss	DWORD PTR _min$4$[ebp], xmm3
	movaps	xmm3, xmm2
$LN42@IntersectT:
	movss	xmm2, DWORD PTR [ecx+8]
	movaps	xmm0, xmm7
	mulss	xmm0, DWORD PTR _fez$2$[ebp]
	mulss	xmm2, DWORD PTR _fey$2$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$4$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT

; 352  : 	AXISTEST_Y02( e1.cell[2], e1.cell[0], fez, fex );

	movss	xmm3, DWORD PTR $T9[ebp]
	movss	xmm0, DWORD PTR $T11[ebp]
	movaps	xmm2, xmm3
	mulss	xmm3, DWORD PTR $T16[ebp]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR $T11[ebp]
	mulss	xmm0, DWORD PTR $T15[ebp]
	subss	xmm3, xmm0
	comiss	xmm3, xmm2
	jbe	SHORT $LN39@IntersectT
	movss	DWORD PTR _min$5$[ebp], xmm2
	jmp	SHORT $LN38@IntersectT
$LN39@IntersectT:
	movss	DWORD PTR _min$5$[ebp], xmm3
	movaps	xmm3, xmm2
$LN38@IntersectT:
	movss	xmm2, DWORD PTR [ecx+8]
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR _fez$2$[ebp]
	mulss	xmm2, DWORD PTR _fex$2$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$5$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT

; 353  : 	AXISTEST_Z0 ( e1.cell[1], e1.cell[0], fey, fex );

	movss	xmm3, DWORD PTR $T4[ebp]
	movss	xmm0, DWORD PTR $T9[ebp]
	movaps	xmm2, xmm3
	mulss	xmm0, DWORD PTR _max$11$[ebp]
	mulss	xmm3, DWORD PTR $T14[ebp]
	mulss	xmm2, xmm5
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR $T9[ebp]
	mulss	xmm0, DWORD PTR $T13[ebp]
	subss	xmm3, xmm0
	comiss	xmm3, xmm2
	jbe	SHORT $LN35@IntersectT
	movss	DWORD PTR _min$6$[ebp], xmm2
	jmp	SHORT $LN34@IntersectT
$LN35@IntersectT:
	movss	DWORD PTR _min$6$[ebp], xmm3
	movaps	xmm3, xmm2
$LN34@IntersectT:
	movaps	xmm0, xmm6
	movaps	xmm2, xmm7
	mulss	xmm0, DWORD PTR _fey$2$[ebp]
	mulss	xmm2, DWORD PTR _fex$2$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$6$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT
	movss	xmm0, DWORD PTR $T6[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movss	xmm2, DWORD PTR _p2$6$[ebp]
	cvtps2pd xmm0, xmm0
	movss	xmm3, DWORD PTR $T7[ebp]
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fex$3$[ebp], xmm0
	cvtps2pd xmm0, xmm2
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fey$3$[ebp], xmm0
	cvtps2pd xmm0, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 357  : 	AXISTEST_X2 ( e2.cell[2], e2.cell[1], fez, fey );

	mulss	xmm3, DWORD PTR _max$11$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR _fez$3$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 357  : 	AXISTEST_X2 ( e2.cell[2], e2.cell[1], fez, fey );

	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
	subss	xmm3, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR $T12[ebp]
	movss	DWORD PTR _p0$6$[ebp], xmm3
	movss	xmm3, DWORD PTR $T7[ebp]
	mulss	xmm3, DWORD PTR $T13[ebp]
	subss	xmm3, xmm0
	movss	xmm0, DWORD PTR _p0$6$[ebp]
	comiss	xmm3, xmm0
	jbe	SHORT $LN31@IntersectT
	movss	DWORD PTR _min$7$[ebp], xmm0
	jmp	SHORT $LN30@IntersectT
$LN31@IntersectT:
	movss	DWORD PTR _min$7$[ebp], xmm3
	movaps	xmm3, xmm0
$LN30@IntersectT:
	movss	xmm2, DWORD PTR [ecx+8]
	movaps	xmm0, xmm7
	mulss	xmm0, DWORD PTR _fez$3$[ebp]
	mulss	xmm2, DWORD PTR _fey$3$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$7$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT

; 358  : 	AXISTEST_Y1 ( e2.cell[2], e2.cell[0], fez, fex );

	movss	xmm3, DWORD PTR $T6[ebp]
	movss	xmm0, DWORD PTR $T7[ebp]
	movaps	xmm2, xmm3
	mulss	xmm3, DWORD PTR $T12[ebp]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR $T7[ebp]
	mulss	xmm0, DWORD PTR $T14[ebp]
	subss	xmm3, xmm0
	comiss	xmm3, xmm2
	jbe	SHORT $LN27@IntersectT
	movss	DWORD PTR _min$8$[ebp], xmm2
	jmp	SHORT $LN26@IntersectT
$LN27@IntersectT:
	movss	DWORD PTR _min$8$[ebp], xmm3
	movaps	xmm3, xmm2
$LN26@IntersectT:
	movss	xmm2, DWORD PTR [ecx+8]
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR _fez$3$[ebp]
	mulss	xmm2, DWORD PTR _fex$3$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$8$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT

; 359  : 	AXISTEST_Z12( e2.cell[1], e2.cell[0], fey, fex );

	movss	xmm2, DWORD PTR _p2$6$[ebp]
	movss	xmm0, DWORD PTR $T6[ebp]
	movaps	xmm3, xmm2
	mulss	xmm0, DWORD PTR $T13[ebp]
	mulss	xmm3, DWORD PTR $T14[ebp]
	mulss	xmm2, DWORD PTR $T15[ebp]
	subss	xmm3, xmm0
	movss	xmm0, DWORD PTR $T6[ebp]
	mulss	xmm0, DWORD PTR $T5[ebp]
	subss	xmm2, xmm0
	comiss	xmm3, xmm2
	jbe	SHORT $LN23@IntersectT
	movss	DWORD PTR _min$9$[ebp], xmm2
	jmp	SHORT $LN22@IntersectT
$LN23@IntersectT:
	movss	DWORD PTR _min$9$[ebp], xmm3
	movaps	xmm3, xmm2
$LN22@IntersectT:
	movaps	xmm0, xmm6
	movaps	xmm2, xmm7
	mulss	xmm0, DWORD PTR _fey$3$[ebp]
	mulss	xmm2, DWORD PTR _fex$3$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR _min$9$[ebp]
	comiss	xmm0, xmm2
	ja	$LN52@IntersectT
	xorps	xmm2, xmm1
	comiss	xmm2, xmm3
	ja	$LN52@IntersectT

; 360  : 	FINDMINMAX( v0.cell[0], v1.cell[0], v2.cell[0], min, max );

	movss	xmm2, DWORD PTR $T14[ebp]
	movaps	xmm0, xmm5
	comiss	xmm5, xmm2
	jbe	SHORT $LN19@IntersectT
	movaps	xmm0, xmm2
$LN19@IntersectT:
	comiss	xmm2, xmm5
	jbe	SHORT $LN18@IntersectT
	movaps	xmm5, xmm2
$LN18@IntersectT:
	movss	xmm2, DWORD PTR $T15[ebp]
	comiss	xmm0, xmm2
	jbe	SHORT $LN17@IntersectT
	movaps	xmm0, xmm2
$LN17@IntersectT:
	comiss	xmm2, xmm5
	jbe	SHORT $LN16@IntersectT
	movaps	xmm5, xmm2
$LN16@IntersectT:

; 361  : 	if (min > a_BoxHalfsize.cell[0] || max < -a_BoxHalfsize.cell[0]) return false;

	comiss	xmm0, xmm6
	ja	$LN52@IntersectT
	xorps	xmm6, xmm1
	comiss	xmm6, xmm5
	ja	$LN52@IntersectT

; 362  : 	FINDMINMAX( v0.cell[1], v1.cell[1], v2.cell[1], min, max );

	movss	xmm0, DWORD PTR _max$11$[ebp]
	movss	xmm3, DWORD PTR $T13[ebp]
	movaps	xmm2, xmm0
	comiss	xmm0, xmm3
	jbe	SHORT $LN13@IntersectT
	movaps	xmm2, xmm3
$LN13@IntersectT:
	comiss	xmm3, xmm0
	jbe	SHORT $LN12@IntersectT
	movaps	xmm0, xmm3
$LN12@IntersectT:
	movss	xmm3, DWORD PTR $T5[ebp]
	comiss	xmm2, xmm3
	jbe	SHORT $LN11@IntersectT
	movaps	xmm2, xmm3
$LN11@IntersectT:
	comiss	xmm3, xmm0
	jbe	SHORT $LN10@IntersectT
	movaps	xmm0, xmm3
$LN10@IntersectT:

; 363  : 	if (min > a_BoxHalfsize.cell[1] || max < -a_BoxHalfsize.cell[1]) return false;

	comiss	xmm2, xmm7
	ja	$LN52@IntersectT
	xorps	xmm7, xmm1
	comiss	xmm7, xmm0
	ja	$LN52@IntersectT

; 364  : 	FINDMINMAX( v0.cell[2], v1.cell[2], v2.cell[2], min, max );

	movss	xmm0, DWORD PTR $T12[ebp]
	movaps	xmm2, xmm4
	comiss	xmm4, xmm0
	jbe	SHORT $LN7@IntersectT
	movaps	xmm2, xmm0
$LN7@IntersectT:
	comiss	xmm0, xmm4
	jbe	SHORT $LN6@IntersectT
	movaps	xmm4, xmm0
$LN6@IntersectT:
	movss	xmm0, DWORD PTR $T16[ebp]
	comiss	xmm2, xmm0
	jbe	SHORT $LN5@IntersectT
	movaps	xmm2, xmm0
$LN5@IntersectT:
	comiss	xmm0, xmm4
	jbe	SHORT $LN4@IntersectT
	movaps	xmm4, xmm0
$LN4@IntersectT:

; 365  : 	if (min > a_BoxHalfsize.cell[2] || max < -a_BoxHalfsize.cell[2]) return false;

	movss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm2, xmm0
	ja	SHORT $LN52@IntersectT
	xorps	xmm0, xmm1
	comiss	xmm0, xmm4
	ja	SHORT $LN52@IntersectT
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	movss	xmm4, DWORD PTR $T11[ebp]
	movss	xmm2, DWORD PTR $T4[ebp]
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR $T3[ebp]
	movaps	xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 367  : 	if (!PlaneBoxOverlap( normal, v0, a_BoxHalfsize )) return false;

	push	ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	mulss	xmm0, DWORD PTR $T10[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 367  : 	if (!PlaneBoxOverlap( normal, v0, a_BoxHalfsize )) return false;

	mov	ecx, esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	movss	xmm3, DWORD PTR $T9[ebp]
	mulss	xmm2, DWORD PTR $T8[ebp]
	mulss	xmm4, DWORD PTR $T8[ebp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm3, DWORD PTR $T3[ebp]
	mulss	xmm0, DWORD PTR $T10[ebp]
	subss	xmm2, xmm3
	subss	xmm0, xmm4

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T1[ebp+8], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 366  : 	normal = e0.Cross( e1 );

	mov	eax, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR _normal$[ebp+8], eax

; 367  : 	if (!PlaneBoxOverlap( normal, v0, a_BoxHalfsize )) return false;

	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	eax, DWORD PTR _normal$[ebp]
	unpcklps xmm1, xmm0
	push	eax
	movq	QWORD PTR _normal$[ebp], xmm1
	call	?PlaneBoxOverlap@Primitive@Raytracer@@QAE_NAAVvector3@2@00@Z ; Raytracer::Primitive::PlaneBoxOverlap
	test	al, al
	pop	esi
	setne	al

; 368  : 	return true;
; 369  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN52@IntersectT:

; 345  : 	AXISTEST_X01( e0.cell[2], e0.cell[1], fez, fey );

	xor	al, al
	pop	esi

; 368  : 	return true;
; 369  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?IntersectTriBox@Primitive@Raytracer@@QAE_NAAVvector3@2@0000@Z ENDP ; Raytracer::Primitive::IntersectTriBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?PlaneBoxOverlap@Primitive@Raytracer@@QAE_NAAVvector3@2@00@Z
_TEXT	SEGMENT
_a_Normal$ = 8						; size = 4
_a_Vert$ = 12						; size = 4
_vmin$3$ = 16						; size = 4
_a_MaxBox$ = 16						; size = 4
?PlaneBoxOverlap@Primitive@Raytracer@@QAE_NAAVvector3@2@00@Z PROC ; Raytracer::Primitive::PlaneBoxOverlap, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp

; 318  : 		if (a_Normal.cell[q] > 0.0f)

	mov	edx, DWORD PTR _a_Normal$[ebp]
	xorps	xmm6, xmm6

; 319  : 		{
; 320  : 			vmin.cell[q] = -a_MaxBox.cell[q] - v;

	mov	eax, DWORD PTR _a_MaxBox$[ebp]
	mov	ecx, DWORD PTR _a_Vert$[ebp]
	movss	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR [edx]
	comiss	xmm2, xmm6
	movss	xmm3, DWORD PTR [eax]
	movss	xmm4, DWORD PTR [ecx]
	movaps	xmm0, xmm3
	jbe	SHORT $LN4@PlaneBoxOv
	xorps	xmm0, xmm1

; 321  : 			vmax.cell[q] =  a_MaxBox.cell[q] - v;
; 322  : 		}
; 323  : 		else

	jmp	SHORT $LN27@PlaneBoxOv
$LN4@PlaneBoxOv:

; 326  : 			vmax.cell[q] = -a_MaxBox.cell[q] - v;

	xorps	xmm3, xmm1
$LN27@PlaneBoxOv:

; 314  : 	vector3 vmin, vmax;
; 315  : 	for( int q = 0; q < 3; q++ )
; 316  : 	{
; 317  : 		float v = a_Vert.cell[q];

	movss	xmm5, DWORD PTR [ecx+4]

; 326  : 			vmax.cell[q] = -a_MaxBox.cell[q] - v;

	subss	xmm3, xmm4
	subss	xmm0, xmm4
	movss	xmm4, DWORD PTR [edx+4]
	comiss	xmm4, xmm6
	movss	xmm4, DWORD PTR [eax+4]
	movaps	xmm7, xmm4
	jbe	SHORT $LN22@PlaneBoxOv

; 319  : 		{
; 320  : 			vmin.cell[q] = -a_MaxBox.cell[q] - v;

	xorps	xmm7, xmm1

; 321  : 			vmax.cell[q] =  a_MaxBox.cell[q] - v;
; 322  : 		}
; 323  : 		else

	jmp	SHORT $LN28@PlaneBoxOv
$LN22@PlaneBoxOv:

; 326  : 			vmax.cell[q] = -a_MaxBox.cell[q] - v;

	xorps	xmm4, xmm1
$LN28@PlaneBoxOv:
	subss	xmm4, xmm5
	subss	xmm7, xmm5
	movss	xmm5, DWORD PTR [edx+8]
	comiss	xmm5, xmm6
	movss	xmm5, DWORD PTR [eax+8]
	movaps	xmm6, xmm5
	jbe	SHORT $LN25@PlaneBoxOv

; 319  : 		{
; 320  : 			vmin.cell[q] = -a_MaxBox.cell[q] - v;

	xorps	xmm6, xmm1
	movss	xmm1, xmm6
	movss	DWORD PTR _vmin$3$[ebp], xmm6
	subss	xmm1, DWORD PTR [ecx+8]
	movss	DWORD PTR _vmin$3$[ebp], xmm1

; 321  : 			vmax.cell[q] =  a_MaxBox.cell[q] - v;
; 322  : 		}
; 323  : 		else

	jmp	SHORT $LN29@PlaneBoxOv
$LN25@PlaneBoxOv:

; 324  : 		{
; 325  : 			vmin.cell[q] =  a_MaxBox.cell[q] - v;

	subss	xmm6, DWORD PTR [ecx+8]

; 326  : 			vmax.cell[q] = -a_MaxBox.cell[q] - v;

	xorps	xmm5, xmm1
	movss	DWORD PTR _vmin$3$[ebp], xmm6
$LN29@PlaneBoxOv:
	subss	xmm5, DWORD PTR [ecx+8]

; 327  : 		}
; 328  : 	}
; 329  : 	if (DOT( a_Normal, vmin) > 0.0f) return false;

	movaps	xmm1, xmm2
	xorps	xmm6, xmm6
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, xmm7
	movss	xmm7, DWORD PTR [edx+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, DWORD PTR _vmin$3$[ebp]
	addss	xmm1, xmm0
	comiss	xmm1, xmm6
	jbe	SHORT $LN2@PlaneBoxOv
	xor	al, al

; 331  : 	return false;
; 332  : }

	pop	ebp
	ret	12					; 0000000cH
$LN2@PlaneBoxOv:

; 330  : 	if (DOT( a_Normal, vmax) >= 0.0f) return true;

	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm2, xmm3
	mulss	xmm0, xmm4
	mulss	xmm7, xmm5
	addss	xmm2, xmm0
	addss	xmm2, xmm7
	comiss	xmm2, xmm6
	setae	al

; 331  : 	return false;
; 332  : }

	pop	ebp
	ret	12					; 0000000cH
?PlaneBoxOverlap@Primitive@Raytracer@@QAE_NAAVvector3@2@00@Z ENDP ; Raytracer::Primitive::PlaneBoxOverlap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?GetColor@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 12
$T2 = -40						; size = 12
$T3 = -28						; size = 12
$T4 = -28						; size = 12
$T5 = -28						; size = 12
_v$1$ = -16						; size = 4
tv543 = -12						; size = 4
_vp$3$ = -8						; size = 4
_this$1$ = -4						; size = 4
_vp$2$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vp$1$ = 12						; size = 4
_a_Pos$ = 12						; size = 4
?GetColor@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z PROC ; Raytracer::Primitive::GetColor, COMDAT
; _this$ = ecx

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 62   : 	Texture* GetTexture() { return m_Texture; }

	mov	edi, DWORD PTR [ecx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 249  : {

	mov	DWORD PTR _this$1$[ebp], ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 251  : 	if (!m_Material->GetTexture()) retval = m_Material->GetColor(); else

	cmp	DWORD PTR [edi+36], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [esi+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 251  : 	if (!m_Material->GetTexture()) retval = m_Material->GetColor(); else

	jne	SHORT $LN6@GetColor
	movq	xmm0, QWORD PTR [edi]

; 271  : 		}
; 272  : 	}
; 273  : 	return retval;

	mov	eax, esi
	mov	ecx, DWORD PTR [edi+8]
	movq	QWORD PTR [esi], xmm0
	pop	edi
	mov	DWORD PTR [esi+8], ecx
	pop	esi

; 274  : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN6@GetColor:

; 252  : 	{
; 253  : 		if (m_Type == SPHERE)

	cmp	DWORD PTR [ecx+4], 1
	jne	$LN4@GetColor
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	eax, DWORD PTR _a_Pos$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 255  : 			vector3 vp = (a_Pos - m_Centre) * m_RRadius;

	movss	xmm0, DWORD PTR [ecx+28]

; 256  : 			real phi = _acos( -DOT( vp, m_Vn ) );

	movss	xmm1, DWORD PTR [ecx+48]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm4, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	subss	xmm4, DWORD PTR [ecx+8]
	subss	xmm2, DWORD PTR [ecx+12]
	movss	xmm3, DWORD PTR [eax+8]
	subss	xmm3, DWORD PTR [ecx+16]

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm4, xmm0
	mulss	xmm2, xmm0
	mulss	xmm3, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 256  : 			real phi = _acos( -DOT( vp, m_Vn ) );

	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, xmm4
	mulss	xmm1, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	DWORD PTR _vp$1$[ebp], xmm4
	movss	DWORD PTR _vp$2$[ebp], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 256  : 			real phi = _acos( -DOT( vp, m_Vn ) );

	addss	xmm1, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	DWORD PTR _vp$3$[ebp], xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 256  : 			real phi = _acos( -DOT( vp, m_Vn ) );

	movss	xmm0, DWORD PTR [ecx+52]
	mulss	xmm0, xmm3
	addss	xmm1, xmm0
	xorps	xmm0, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 639  :     return (float)acos(_X);

	cvtss2sd xmm0, xmm1
	call	__libm_sse2_acos_precise
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 258  : 			real theta = (_acos( DOT( m_Ve, vp ) / _sin( phi ))) * (2.0f / PI);

	mov	eax, DWORD PTR _this$1$[ebp]
	xorps	xmm1, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 639  :     return (float)acos(_X);

	cvtsd2ss xmm1, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 257  : 			real u, v = phi * m_Material->GetVScaleReci() * (1.0f / PI);

	movss	xmm0, DWORD PTR [edi+52]

; 258  : 			real theta = (_acos( DOT( m_Ve, vp ) / _sin( phi ))) * (2.0f / PI);

	movss	xmm2, DWORD PTR [eax+36]
	mulss	xmm2, DWORD PTR _vp$2$[ebp]
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3ea2f983
	movss	DWORD PTR _v$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _vp$1$[ebp]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR _vp$3$[ebp]
	addss	xmm2, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 765  :     return (float)sin(_X);

	cvtps2pd xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 258  : 			real theta = (_acos( DOT( m_Ve, vp ) / _sin( phi ))) * (2.0f / PI);

	movss	DWORD PTR tv543[ebp], xmm2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 765  :     return (float)sin(_X);

	call	__libm_sse2_sin_precise
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 258  : 			real theta = (_acos( DOT( m_Ve, vp ) / _sin( phi ))) * (2.0f / PI);

	movss	xmm1, DWORD PTR tv543[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 765  :     return (float)sin(_X);

	cvtsd2ss xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 258  : 			real theta = (_acos( DOT( m_Ve, vp ) / _sin( phi ))) * (2.0f / PI);

	divss	xmm1, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 639  :     return (float)acos(_X);

	cvtps2pd xmm0, xmm1
	call	__libm_sse2_acos_precise
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 259  : 			if (DOT( m_Vc, vp ) >= 0) u = (1.0f - theta) * m_Material->GetUScaleReci();

	mov	eax, DWORD PTR _this$1$[ebp]
	xorps	xmm2, xmm2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 639  :     return (float)acos(_X);

	cvtsd2ss xmm2, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 259  : 			if (DOT( m_Vc, vp ) >= 0) u = (1.0f - theta) * m_Material->GetUScaleReci();

	movss	xmm0, DWORD PTR [eax+56]
	mulss	xmm0, DWORD PTR _vp$1$[ebp]
	movss	xmm1, DWORD PTR [eax+60]
	mulss	xmm1, DWORD PTR _vp$2$[ebp]
	mulss	xmm2, DWORD PTR __real@3f22f983
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [eax+64]
	mulss	xmm0, DWORD PTR _vp$3$[ebp]
	addss	xmm1, xmm0
	xorps	xmm0, xmm0
	comiss	xmm1, xmm0
	jb	SHORT $LN3@GetColor
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm2
	mulss	xmm1, DWORD PTR [edi+48]
	jmp	SHORT $LN2@GetColor
$LN3@GetColor:

; 260  : 								 else u = theta * m_Material->GetUScaleReci();

	movss	xmm1, DWORD PTR [edi+48]
	mulss	xmm1, xmm2
$LN2@GetColor:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 47   : 	Color GetColor() { return m_Color; }

	movq	xmm0, QWORD PTR [edi]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 261  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	sub	esp, 8
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 47   : 	Color GetColor() { return m_Color; }

	mov	eax, DWORD PTR [edi+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 261  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	mov	ecx, DWORD PTR [edi+36]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 47   : 	Color GetColor() { return m_Color; }

	movq	QWORD PTR $T5[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 261  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	movss	xmm0, DWORD PTR _v$1$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 47   : 	Color GetColor() { return m_Color; }

	mov	DWORD PTR $T5[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 261  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	lea	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR [esp+4], xmm0
	movss	DWORD PTR [esp], xmm1
	push	eax
	call	?GetTexel@Texture@Raytracer@@QAE?AVvector3@2@MM@Z ; Raytracer::Texture::GetTexel
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 83   : 	friend vector3 operator * ( const vector3& v1, vector3& v2 ) { return vector3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }

	movss	xmm2, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR $T5[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 263  : 		else

	jmp	$LN64@GetColor
$LN4@GetColor:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 87   : 	real GetU() { return m_U; }

	mov	eax, DWORD PTR [ecx+20]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 270  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	sub	esp, 8
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 88   : 	real GetV() { return m_V; }

	mov	edx, DWORD PTR [ecx+28]

; 47   : 	Color GetColor() { return m_Color; }

	movq	xmm0, QWORD PTR [edi]
	movq	QWORD PTR $T4[ebp], xmm0

; 87   : 	real GetU() { return m_U; }

	movss	xmm5, DWORD PTR [eax+24]

; 88   : 	real GetV() { return m_V; }

	movss	xmm4, DWORD PTR [eax+28]

; 47   : 	Color GetColor() { return m_Color; }

	mov	eax, DWORD PTR [edi+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 269  : 			real v = V1 + m_U * (V2 - V1) + m_V * (V3 - V1);

	movss	xmm0, DWORD PTR [edx+28]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 47   : 	Color GetColor() { return m_Color; }

	mov	DWORD PTR $T4[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 269  : 			real v = V1 + m_U * (V2 - V1) + m_V * (V3 - V1);

	subss	xmm0, xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 88   : 	real GetV() { return m_V; }

	mov	eax, DWORD PTR [ecx+24]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 269  : 			real v = V1 + m_U * (V2 - V1) + m_V * (V3 - V1);

	movss	xmm1, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+36]
	subss	xmm1, xmm4
	mulss	xmm1, DWORD PTR [ecx+32]
	addss	xmm1, xmm4
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [edx+24]
	subss	xmm0, xmm5

; 270  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	movss	DWORD PTR [esp+4], xmm1
	movss	xmm1, DWORD PTR [eax+24]
	lea	eax, DWORD PTR $T1[ebp]
	mulss	xmm0, DWORD PTR [ecx+36]
	subss	xmm1, xmm5
	mulss	xmm1, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edi+36]
	addss	xmm1, xmm5
	addss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	push	eax
	call	?GetTexel@Texture@Raytracer@@QAE?AVvector3@2@MM@Z ; Raytracer::Texture::GetTexel
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 83   : 	friend vector3 operator * ( const vector3& v1, vector3& v2 ) { return vector3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }

	movss	xmm2, DWORD PTR $T4[ebp]
	mulss	xmm2, DWORD PTR [eax]
$LN64@GetColor:
	movss	xmm1, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR $T4[ebp+4]
	pop	edi
	mulss	xmm0, DWORD PTR $T4[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 270  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	unpcklps xmm2, xmm1
	movq	QWORD PTR [esi], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T3[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 270  : 			retval = m_Material->GetTexture()->GetTexel( u, v ) * m_Material->GetColor();

	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [esi+8], eax

; 271  : 		}
; 272  : 	}
; 273  : 	return retval;

	mov	eax, esi
	pop	esi

; 274  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetColor@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z ENDP ; Raytracer::Primitive::GetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z
_TEXT	SEGMENT
_N$4$ = -48						; size = 4
_N$5$ = -44						; size = 4
_N$6$ = -40						; size = 8
_N3$1 = -40						; size = 12
_N1$2 = -24						; size = 12
_N$3 = -12						; size = 12
_N2$4 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_a_Pos$ = 12						; size = 4
?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z PROC ; Raytracer::Primitive::GetNormal, COMDAT
; _this$ = ecx

; 232  : { 

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 48					; 00000030H

; 233  : 	if (m_Type == SPHERE) 

	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN2@GetNormal
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	eax, DWORD PTR _a_Pos$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 235  : 		return (a_Pos - m_Centre) * m_RRadius; 

	movss	xmm0, DWORD PTR [ecx+28]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm1, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm3, DWORD PTR [eax+8]
	subss	xmm1, DWORD PTR [ecx+8]
	subss	xmm2, DWORD PTR [ecx+12]
	subss	xmm3, DWORD PTR [ecx+16]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 80   : 	friend vector3 operator + ( const vector3& v1, vector3* v2 ) { return vector3( v1.x + v2->x, v1.y + v2->y, v1.z + v2->z ); }
; 81   : 	friend vector3 operator - ( const vector3& v1, vector3* v2 ) { return vector3( v1.x - v2->x, v1.y - v2->y, v1.z - v2->z ); }
; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm1, xmm0
	mulss	xmm2, xmm0
	mulss	xmm3, xmm0

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm1
	movss	DWORD PTR [eax+4], xmm2
	movss	DWORD PTR [eax+8], xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 246  : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN2@GetNormal:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 89   : 	vector3& GetNormal() { return m_Normal; }

	mov	eax, DWORD PTR [ecx+20]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 239  : 		vector3 N1 = m_Vertex[0]->GetNormal();

	movq	xmm0, QWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+20]
	movq	QWORD PTR _N1$2[esp+48], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm6, DWORD PTR _N1$2[esp+48]
	movss	xmm5, DWORD PTR _N1$2[esp+52]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 239  : 		vector3 N1 = m_Vertex[0]->GetNormal();

	mov	DWORD PTR _N1$2[esp+56], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 89   : 	vector3& GetNormal() { return m_Normal; }

	mov	eax, DWORD PTR [ecx+24]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm4, DWORD PTR _N1$2[esp+56]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 240  : 		vector3 N2 = m_Vertex[1]->GetNormal();

	movq	xmm0, QWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+20]
	movq	QWORD PTR _N2$4[esp+48], xmm0
	mov	DWORD PTR _N2$4[esp+56], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 89   : 	vector3& GetNormal() { return m_Normal; }

	mov	eax, DWORD PTR [ecx+28]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm3, DWORD PTR _N2$4[esp+56]
	subss	xmm3, xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 241  : 		vector3 N3 = m_Vertex[2]->GetNormal();

	movq	xmm0, QWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+20]
	movq	QWORD PTR _N3$1[esp+48], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm2, DWORD PTR _N3$1[esp+48]
	movss	xmm1, DWORD PTR _N3$1[esp+52]
	subss	xmm2, xmm6
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 242  : 		vector3 N = N1 + m_U * (N2 - N1) + m_V * (N3 - N1);

	movss	xmm0, DWORD PTR [ecx+36]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	subss	xmm1, xmm5
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 241  : 		vector3 N3 = m_Vertex[2]->GetNormal();

	mov	DWORD PTR _N3$1[esp+56], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm7, DWORD PTR _N3$1[esp+56]
	subss	xmm7, xmm4

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm2, xmm0
	mulss	xmm1, xmm0
	movq	QWORD PTR _N$6$[esp+48], xmm2

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm2, DWORD PTR _N2$4[esp+52]

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	DWORD PTR _N$4$[esp+48], xmm1

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	subss	xmm2, xmm5
	movss	xmm1, DWORD PTR _N2$4[esp+48]

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm7, xmm0

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	subss	xmm1, xmm6
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 242  : 		vector3 N = N1 + m_U * (N2 - N1) + m_V * (N3 - N1);

	movss	xmm0, DWORD PTR [ecx+32]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm2, xmm0
	mulss	xmm1, xmm0
	mulss	xmm3, xmm0

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm2, xmm5
	movss	xmm0, DWORD PTR _N$4$[esp+48]
	addss	xmm1, xmm6
	addss	xmm3, xmm4
	movq	xmm4, QWORD PTR _N$6$[esp+48]
	addss	xmm0, xmm2
	addss	xmm4, xmm1
	addss	xmm7, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 243  : 		NORMALIZE( N );

	movaps	xmm1, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	DWORD PTR _N$4$[esp+48], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 243  : 		NORMALIZE( N );

	mulss	xmm1, xmm0
	movaps	xmm0, xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movq	QWORD PTR _N$6$[esp+48], xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 243  : 		NORMALIZE( N );

	mulss	xmm0, xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	DWORD PTR _N$5$[esp+48], xmm7
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 243  : 		NORMALIZE( N );

	addss	xmm1, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm7
	addss	xmm1, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtps2pd xmm0, xmm1
	call	__libm_sse2_sqrt_precise
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 243  : 		NORMALIZE( N );

	movss	xmm1, DWORD PTR __real@3f800000
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtsd2ss xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 244  : 		return N;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm3, QWORD PTR _N$6$[esp+48]
	divss	xmm1, xmm0
	movss	xmm2, DWORD PTR _N$4$[esp+48]
	movss	xmm0, DWORD PTR _N$5$[esp+48]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm1
	mulss	xmm0, xmm1
	unpcklps xmm3, xmm2
	movq	QWORD PTR [eax], xmm3
	movss	DWORD PTR _N$3[esp+56], xmm0
	mov	ecx, DWORD PTR _N$3[esp+56]
	mov	DWORD PTR [eax+8], ecx

; 246  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetNormal@Primitive@Raytracer@@QAE?AVvector3@2@AAV32@@Z ENDP ; Raytracer::Primitive::GetNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?CalculateRange@Primitive@Raytracer@@QAEXAAM0H@Z
_TEXT	SEGMENT
_pos$1 = -12						; size = 12
_pos1$2 = -12						; size = 12
_a_Pos1$ = 8						; size = 4
_a_Pos2$ = 12						; size = 4
_a_Axis$ = 16						; size = 4
?CalculateRange@Primitive@Raytracer@@QAEXAAM0H@Z PROC	; Raytracer::Primitive::CalculateRange, COMDAT
; _this$ = ecx

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 406  : 	if (m_Type == SPHERE)

	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN7@CalculateR

; 407  : 	{
; 408  : 		a_Pos1 = m_Centre.cell[a_Axis] - m_Radius;

	mov	edx, DWORD PTR _a_Axis$[ebp]
	mov	eax, DWORD PTR _a_Pos1$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*4+8]
	subss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [eax], xmm0

; 409  : 		a_Pos2 = m_Centre.cell[a_Axis] + m_Radius;

	movss	xmm0, DWORD PTR [ecx+edx*4+8]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _a_Pos2$[ebp]
	movss	DWORD PTR [eax], xmm0

; 420  : 		}
; 421  : 	}
; 422  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@CalculateR:

; 410  : 	}
; 411  : 	else
; 412  : 	{
; 413  : 		vector3 pos1 = m_Vertex[0]->GetPos();

	mov	eax, DWORD PTR [ecx+20]

; 414  : 		a_Pos1 = pos1.cell[a_Axis], a_Pos2 = pos1.cell[a_Axis];

	mov	edx, DWORD PTR _a_Pos2$[ebp]
	push	esi
	mov	esi, DWORD PTR _a_Pos1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	push	edi
	mov	edi, DWORD PTR _a_Axis$[ebp]
	mov	DWORD PTR _pos1$2[ebp+8], eax

; 415  : 		for ( int i = 1; i < 3; i++ )
; 416  : 		{
; 417  : 			vector3 pos = m_Vertex[i]->GetPos();

	mov	eax, DWORD PTR [ecx+24]
	movq	QWORD PTR _pos1$2[ebp], xmm0
	movss	xmm0, DWORD PTR _pos1$2[ebp+edi*4]
	movss	DWORD PTR [esi], xmm0
	movss	DWORD PTR [edx], xmm0
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	movq	QWORD PTR _pos$1[ebp], xmm0

; 418  : 			if (pos.cell[a_Axis] < a_Pos1) a_Pos1 = pos.cell[a_Axis];

	movss	xmm0, DWORD PTR [esi]
	mov	DWORD PTR _pos$1[ebp+8], eax
	movss	xmm1, DWORD PTR _pos$1[ebp+edi*4]
	comiss	xmm0, xmm1
	jbe	SHORT $LN2@CalculateR
	movss	DWORD PTR [esi], xmm1
$LN2@CalculateR:

; 419  : 			if (pos.cell[a_Axis] > a_Pos2) a_Pos2 = pos.cell[a_Axis];

	comiss	xmm1, DWORD PTR [edx]
	jbe	SHORT $LN4@CalculateR
	movss	DWORD PTR [edx], xmm1
$LN4@CalculateR:

; 415  : 		for ( int i = 1; i < 3; i++ )
; 416  : 		{
; 417  : 			vector3 pos = m_Vertex[i]->GetPos();

	mov	eax, DWORD PTR [ecx+28]
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	movq	QWORD PTR _pos$1[ebp], xmm0

; 418  : 			if (pos.cell[a_Axis] < a_Pos1) a_Pos1 = pos.cell[a_Axis];

	movss	xmm0, DWORD PTR [esi]
	mov	DWORD PTR _pos$1[ebp+8], eax
	movss	xmm1, DWORD PTR _pos$1[ebp+edi*4]
	comiss	xmm0, xmm1
	jbe	SHORT $LN22@CalculateR
	movss	DWORD PTR [esi], xmm1
$LN22@CalculateR:

; 419  : 			if (pos.cell[a_Axis] > a_Pos2) a_Pos2 = pos.cell[a_Axis];

	comiss	xmm1, DWORD PTR [edx]
	pop	edi
	pop	esi
	jbe	SHORT $LN23@CalculateR
	movss	DWORD PTR [edx], xmm1
$LN23@CalculateR:

; 420  : 		}
; 421  : 	}
; 422  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CalculateRange@Primitive@Raytracer@@QAEXAAM0H@Z ENDP	; Raytracer::Primitive::CalculateRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z
_TEXT	SEGMENT
_bsize$1 = -36						; size = 12
$T2 = -36						; size = 12
_spos$3 = -24						; size = 12
$T4 = -24						; size = 12
_bpos$5 = -12						; size = 12
_a_Box$ = 8						; size = 4
?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z PROC ; Raytracer::Primitive::IntersectBox, COMDAT
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	mov	edx, ecx
	sub	esp, 36					; 00000024H

; 393  : 	if (m_Type == SPHERE)

	cmp	DWORD PTR [edx+4], 1
	jne	$LN2@IntersectB

; 375  : 	vector3 bpos = a_Box.GetPos();

	mov	ecx, DWORD PTR _a_Box$[ebp]
	xorps	xmm1, xmm1

; 374  : 	vector3 spos = a_Centre;

	movq	xmm0, QWORD PTR [edx+8]
	mov	eax, DWORD PTR [edx+16]
	movq	QWORD PTR _spos$3[ebp], xmm0

; 375  : 	vector3 bpos = a_Box.GetPos();

	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR _bpos$5[ebp], xmm0

; 376  : 	vector3 bsize = a_Box.GetSize();

	movq	xmm0, QWORD PTR [ecx+12]

; 377  : 	for ( int i = 0; i < 3; i++ )
; 378  : 	{
; 379  : 		if (spos.cell[i] < bpos.cell[i]) 

	movss	xmm3, DWORD PTR _bpos$5[ebp]
	mov	DWORD PTR _spos$3[ebp+8], eax
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR _bsize$1[ebp], xmm0
	movss	xmm0, DWORD PTR _spos$3[ebp]
	comiss	xmm3, xmm0
	mov	DWORD PTR _bpos$5[ebp+8], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _bsize$1[ebp+8], eax
	jbe	SHORT $LN7@IntersectB

; 380  : 		{
; 381  : 			dmin = dmin + (spos.cell[i] - bpos.cell[i]) * (spos.cell[i] - bpos.cell[i]);

	subss	xmm0, xmm3
	jmp	SHORT $LN54@IntersectB
$LN7@IntersectB:

; 382  : 		}
; 383  : 		else if (spos.cell[i] > (bpos.cell[i] + bsize.cell[i])) 

	movss	xmm2, DWORD PTR _bsize$1[ebp]
	addss	xmm2, xmm3
	comiss	xmm0, xmm2
	jbe	SHORT $LN9@IntersectB

; 384  : 		{
; 385  : 			dmin = dmin + (spos.cell[i] - (bpos.cell[i] + bsize.cell[i])) * (spos.cell[i] - (bpos.cell[i] + bsize.cell[i]));

	subss	xmm0, xmm2
$LN54@IntersectB:
	mulss	xmm0, xmm0
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
$LN9@IntersectB:

; 377  : 	for ( int i = 0; i < 3; i++ )
; 378  : 	{
; 379  : 		if (spos.cell[i] < bpos.cell[i]) 

	movss	xmm3, DWORD PTR _bpos$5[ebp+4]
	movss	xmm0, DWORD PTR _spos$3[ebp+4]
	comiss	xmm3, xmm0
	jbe	SHORT $LN49@IntersectB

; 380  : 		{
; 381  : 			dmin = dmin + (spos.cell[i] - bpos.cell[i]) * (spos.cell[i] - bpos.cell[i]);

	subss	xmm0, xmm3
	jmp	SHORT $LN55@IntersectB
$LN49@IntersectB:

; 382  : 		}
; 383  : 		else if (spos.cell[i] > (bpos.cell[i] + bsize.cell[i])) 

	movss	xmm2, DWORD PTR _bsize$1[ebp+4]
	addss	xmm2, xmm3
	comiss	xmm0, xmm2
	jbe	SHORT $LN50@IntersectB

; 384  : 		{
; 385  : 			dmin = dmin + (spos.cell[i] - (bpos.cell[i] + bsize.cell[i])) * (spos.cell[i] - (bpos.cell[i] + bsize.cell[i]));

	subss	xmm0, xmm2
$LN55@IntersectB:
	mulss	xmm0, xmm0
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
$LN50@IntersectB:

; 377  : 	for ( int i = 0; i < 3; i++ )
; 378  : 	{
; 379  : 		if (spos.cell[i] < bpos.cell[i]) 

	movss	xmm3, DWORD PTR _bpos$5[ebp+8]
	movss	xmm0, DWORD PTR _spos$3[ebp+8]
	comiss	xmm3, xmm0
	jbe	SHORT $LN52@IntersectB

; 380  : 		{
; 381  : 			dmin = dmin + (spos.cell[i] - bpos.cell[i]) * (spos.cell[i] - bpos.cell[i]);

	subss	xmm0, xmm3
	jmp	SHORT $LN56@IntersectB
$LN52@IntersectB:

; 382  : 		}
; 383  : 		else if (spos.cell[i] > (bpos.cell[i] + bsize.cell[i])) 

	movss	xmm2, DWORD PTR _bsize$1[ebp+8]
	addss	xmm2, xmm3
	comiss	xmm0, xmm2
	jbe	SHORT $LN53@IntersectB

; 384  : 		{
; 385  : 			dmin = dmin + (spos.cell[i] - (bpos.cell[i] + bsize.cell[i])) * (spos.cell[i] - (bpos.cell[i] + bsize.cell[i]));

	subss	xmm0, xmm2
$LN56@IntersectB:
	mulss	xmm0, xmm0
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
$LN53@IntersectB:

; 386  : 		}
; 387  : 	}
; 388  : 	return (dmin <= m_SqRadius);

	movss	xmm0, DWORD PTR [edx+20]
	xor	eax, eax
	comiss	xmm0, xmm1
	setae	al

; 401  : 	}
; 402  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@IntersectB:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 196  : 	vector3& GetSize() { return m_Size; }

	mov	eax, DWORD PTR _a_Box$[ebp]

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm4, DWORD PTR __real@3f000000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 400  : 								m_Vertex[0]->GetPos(), m_Vertex[1]->GetPos(), m_Vertex[2]->GetPos() );

	push	DWORD PTR [edx+28]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [eax+12]
	movss	xmm1, DWORD PTR [eax+12]
	mulss	xmm0, xmm4
	movss	xmm2, DWORD PTR [eax+16]
	movss	xmm3, DWORD PTR [eax+20]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T2[ebp], xmm0

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, xmm4
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 400  : 								m_Vertex[0]->GetPos(), m_Vertex[1]->GetPos(), m_Vertex[2]->GetPos() );

	push	DWORD PTR [edx+24]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm1, xmm4

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T2[ebp+4], xmm0

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [eax+20]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 400  : 								m_Vertex[0]->GetPos(), m_Vertex[1]->GetPos(), m_Vertex[2]->GetPos() );

	push	DWORD PTR [edx+20]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm0, xmm4
	mulss	xmm2, xmm4

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T2[ebp+8], xmm0

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, xmm1

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm3, xmm4

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T4[ebp], xmm0

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, xmm2

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T4[ebp+4], xmm0

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm0, DWORD PTR [eax+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 400  : 								m_Vertex[0]->GetPos(), m_Vertex[1]->GetPos(), m_Vertex[2]->GetPos() );

	lea	eax, DWORD PTR $T2[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm0, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 400  : 								m_Vertex[0]->GetPos(), m_Vertex[1]->GetPos(), m_Vertex[2]->GetPos() );

	push	eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T4[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 400  : 								m_Vertex[0]->GetPos(), m_Vertex[1]->GetPos(), m_Vertex[2]->GetPos() );

	call	?IntersectTriBox@Primitive@Raytracer@@QAE_NAAVvector3@2@0000@Z ; Raytracer::Primitive::IntersectTriBox

; 401  : 	}
; 402  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IntersectBox@Primitive@Raytracer@@QAE_NAAVaabb@2@@Z ENDP ; Raytracer::Primitive::IntersectBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?Intersect@Primitive@Raytracer@@QAEHAAVRay@2@AAM@Z
_TEXT	SEGMENT
_b$1$ = -40						; size = 4
_D$1 = -36						; size = 12
_O$2 = -24						; size = 12
_A$3 = -12						; size = 12
_a_Ray$ = 8						; size = 4
_a_Dist$ = 12						; size = 4
?Intersect@Primitive@Raytracer@@QAEHAAVRay@2@AAM@Z PROC	; Raytracer::Primitive::Intersect, COMDAT
; _this$ = ecx

; 177  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 44					; 0000002cH
	mov	edx, ecx

; 178  : 	if (m_Type == SPHERE)

	cmp	DWORD PTR [edx+4], 1
	push	esi
	jne	$LN13@Intersect
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	eax, DWORD PTR _a_Ray$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 183  : 		int retval = MISS;

	xor	esi, esi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm2, DWORD PTR [eax]
	movss	xmm3, DWORD PTR [eax+4]
	subss	xmm3, DWORD PTR [edx+12]
	subss	xmm2, DWORD PTR [edx+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 181  : 		real b = -DOT( v, a_Ray.GetDirection() );

	movss	xmm0, DWORD PTR [eax+12]
	movss	xmm4, DWORD PTR [eax+16]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm1, DWORD PTR [eax+8]
	subss	xmm1, DWORD PTR [edx+16]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 181  : 		real b = -DOT( v, a_Ray.GetDirection() );

	mulss	xmm0, xmm2
	mulss	xmm4, xmm3

; 182  : 		real det = (b * b) - DOT( v, v ) + m_SqRadius;

	mulss	xmm3, xmm3
	addss	xmm4, xmm0
	mulss	xmm2, xmm2
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, xmm1
	addss	xmm3, xmm2
	mulss	xmm1, xmm1
	addss	xmm4, xmm0
	addss	xmm3, xmm1
	xorps	xmm4, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm0, xmm4
	movss	DWORD PTR _b$1$[esp+48], xmm4
	mulss	xmm0, xmm4
	subss	xmm0, xmm3
	addss	xmm0, DWORD PTR [edx+20]

; 184  : 		if (det > 0)

	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN7@Intersect
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtps2pd xmm0, xmm0
	call	__libm_sse2_sqrt_precise
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 187  : 			real i1 = b - det;

	movss	xmm2, DWORD PTR _b$1$[esp+48]
	xorps	xmm1, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtsd2ss xmm1, xmm0
	xorps	xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 187  : 			real i1 = b - det;

	subss	xmm2, xmm1

; 188  : 			real i2 = b + det;

	addss	xmm1, DWORD PTR _b$1$[esp+48]

; 189  : 			if (i2 > 0)

	comiss	xmm1, xmm0
	jbe	SHORT $LN7@Intersect

; 190  : 			{
; 191  : 				if (i1 < 0) 
; 192  : 				{
; 193  : 					if (i2 < a_Dist) 

	mov	eax, DWORD PTR _a_Dist$[ebp]
	comiss	xmm0, xmm2
	movss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN10@Intersect
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@Intersect

; 194  : 					{
; 195  : 						a_Dist = i2;
; 196  : 						retval = INPRIM;

	or	esi, -1
	movss	DWORD PTR [eax], xmm1

; 205  : 					}
; 206  : 				}
; 207  : 			}
; 208  : 		}
; 209  : 		return retval;

	mov	eax, esi

; 228  : 	}
; 229  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@Intersect:

; 197  : 					}
; 198  : 				}
; 199  : 				else
; 200  : 				{
; 201  : 					if (i1 < a_Dist)

	comiss	xmm0, xmm2
	jbe	SHORT $LN7@Intersect

; 202  : 					{
; 203  : 						a_Dist = i1;

	movss	DWORD PTR [eax], xmm2

; 204  : 						retval = HIT;

	mov	esi, 1
$LN7@Intersect:

; 205  : 					}
; 206  : 				}
; 207  : 			}
; 208  : 		}
; 209  : 		return retval;

	mov	eax, esi

; 228  : 	}
; 229  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
$LN13@Intersect:

; 210  : 	}
; 211  : 	else
; 212  : 	{
; 213  : 		#define ku modulo[k + 1]
; 214  : 		#define kv modulo[k + 2]
; 215  : 		vector3 O = a_Ray.GetOrigin(), D = a_Ray.GetDirection(), A = m_Vertex[0]->GetPos();

	mov	ecx, DWORD PTR _a_Ray$[ebp]

; 216  : 		const real lnd = 1.0f / (D.cell[k] + nu * D.cell[ku] + nv * D.cell[kv]);

	movss	xmm1, DWORD PTR [edx+40]
	movss	xmm7, DWORD PTR __real@3f800000
	movaps	xmm6, xmm7
	mov	eax, DWORD PTR [ecx+8]
	movq	xmm0, QWORD PTR [ecx]
	mov	DWORD PTR _O$2[esp+56], eax
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR _O$2[esp+48], xmm0
	movq	xmm0, QWORD PTR [ecx+12]
	mov	DWORD PTR _D$1[esp+56], eax
	mov	eax, DWORD PTR [edx+20]
	movq	QWORD PTR _D$1[esp+48], xmm0
	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _A$3[esp+56], eax

; 217  : 		const real t = (nd - O.cell[k] - nu * O.cell[ku] - nv * O.cell[kv]) * lnd;

	mov	eax, DWORD PTR [edx+52]
	movq	QWORD PTR _A$3[esp+48], xmm0
	movss	xmm0, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR ?modulo@Raytracer@@3PAIA[eax*4+4]
	mov	esi, DWORD PTR ?modulo@Raytracer@@3PAIA[eax*4+8]
	movss	xmm4, DWORD PTR _D$1[esp+ecx*4+48]
	movss	xmm5, DWORD PTR _D$1[esp+esi*4+48]
	mulss	xmm1, xmm4
	mulss	xmm0, xmm5
	addss	xmm1, DWORD PTR _D$1[esp+eax*4+48]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR _O$2[esp+ecx*4+48]
	mulss	xmm0, DWORD PTR [edx+40]
	divss	xmm6, xmm1
	movss	xmm1, DWORD PTR [edx+48]
	subss	xmm1, DWORD PTR _O$2[esp+eax*4+48]

; 218  : 		if (!(a_Dist > t && t > 0)) return MISS;

	mov	eax, DWORD PTR _a_Dist$[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _O$2[esp+esi*4+48]
	mulss	xmm0, DWORD PTR [edx+44]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm6, xmm1
	comiss	xmm0, xmm6
	jbe	$LN4@Intersect
	xorps	xmm3, xmm3
	comiss	xmm6, xmm3
	jbe	$LN4@Intersect

; 219  : 		real hu = O.cell[ku] + t * D.cell[ku] - A.cell[ku];
; 220  : 		real hv = O.cell[kv] + t * D.cell[kv] - A.cell[kv];
; 221  : 		real beta = m_U = hv * bnu + hu * bnv;

	movss	xmm2, DWORD PTR [edx+56]
	movss	xmm0, DWORD PTR [edx+60]
	mulss	xmm4, xmm6
	mulss	xmm5, xmm6
	addss	xmm4, DWORD PTR _O$2[esp+ecx*4+48]
	addss	xmm5, DWORD PTR _O$2[esp+esi*4+48]
	subss	xmm4, DWORD PTR _A$3[esp+ecx*4+48]
	subss	xmm5, DWORD PTR _A$3[esp+esi*4+48]
	mulss	xmm0, xmm4
	mulss	xmm2, xmm5
	addss	xmm2, xmm0

; 222  : 		if (beta < 0) return MISS;

	comiss	xmm3, xmm2
	movss	DWORD PTR [edx+32], xmm2
	ja	SHORT $LN4@Intersect

; 223  : 		real gamma = m_V = hu * cnu + hv * cnv;

	movss	xmm1, DWORD PTR [edx+68]
	movss	xmm0, DWORD PTR [edx+64]
	mulss	xmm1, xmm5
	mulss	xmm0, xmm4
	addss	xmm1, xmm0

; 224  : 		if (gamma < 0) return MISS;

	comiss	xmm3, xmm1
	movss	DWORD PTR [edx+36], xmm1
	ja	SHORT $LN4@Intersect

; 225  : 		if ((m_U + m_V) > 1) return MISS;

	addss	xmm1, xmm2
	comiss	xmm1, xmm7
	ja	SHORT $LN4@Intersect

; 226  : 		a_Dist = t;

	movss	DWORD PTR [eax], xmm6

; 227  : 		return (DOT( D, m_N ) > 0)?INPRIM:HIT;

	xor	eax, eax
	movss	xmm0, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR _D$1[esp+48]
	mulss	xmm1, DWORD PTR _D$1[esp+52]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR _D$1[esp+56]
	addss	xmm1, xmm0
	comiss	xmm1, xmm3
	setbe	al
	lea	eax, DWORD PTR [eax*2-1]

; 228  : 	}
; 229  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@Intersect:

; 218  : 		if (!(a_Dist > t && t > 0)) return MISS;

	xor	eax, eax

; 228  : 	}
; 229  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?Intersect@Primitive@Raytracer@@QAEHAAVRay@2@AAM@Z ENDP	; Raytracer::Primitive::Intersect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetType@Primitive@Raytracer@@QAEHXZ
_TEXT	SEGMENT
?GetType@Primitive@Raytracer@@QAEHXZ PROC		; Raytracer::Primitive::GetType, COMDAT
; _this$ = ecx

; 137  : 	int GetType() { return m_Type; }

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetType@Primitive@Raytracer@@QAEHXZ ENDP		; Raytracer::Primitive::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetMaterial@Primitive@Raytracer@@QAEXPAVMaterial@2@@Z
_TEXT	SEGMENT
_a_Mat$ = 8						; size = 4
?SetMaterial@Primitive@Raytracer@@QAEXPAVMaterial@2@@Z PROC ; Raytracer::Primitive::SetMaterial, COMDAT
; _this$ = ecx

; 136  : 	void SetMaterial( Material* a_Mat ) { m_Material = a_Mat; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_Mat$[ebp]
	mov	DWORD PTR [ecx], eax
	pop	ebp
	ret	4
?SetMaterial@Primitive@Raytracer@@QAEXPAVMaterial@2@@Z ENDP ; Raytracer::Primitive::SetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetMaterial@Primitive@Raytracer@@QAEPAVMaterial@2@XZ
_TEXT	SEGMENT
?GetMaterial@Primitive@Raytracer@@QAEPAVMaterial@2@XZ PROC ; Raytracer::Primitive::GetMaterial, COMDAT
; _this$ = ecx

; 135  : 	Material* GetMaterial() { return m_Material; }

	mov	eax, DWORD PTR [ecx]
	ret	0
?GetMaterial@Primitive@Raytracer@@QAEPAVMaterial@2@XZ ENDP ; Raytracer::Primitive::GetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??1Primitive@Raytracer@@QAE@XZ
_TEXT	SEGMENT
??1Primitive@Raytracer@@QAE@XZ PROC			; Raytracer::Primitive::~Primitive, COMDAT
; _this$ = ecx

; 172  : 	if (m_Type == SPHERE) delete m_Material;

	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN1@Primitive
	push	DWORD PTR [ecx]
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
$LN1@Primitive:

; 173  : }

	ret	0
??1Primitive@Raytracer@@QAE@XZ ENDP			; Raytracer::Primitive::~Primitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z
_TEXT	SEGMENT
tv617 = -60						; size = 4
tv583 = -60						; size = 4
tv619 = -56						; size = 4
tv621 = -52						; size = 4
_A$ = -48						; size = 12
_b$ = -36						; size = 12
_B$ = -36						; size = 12
$T1 = -24						; size = 12
_C$ = -24						; size = 12
_c$ = -12						; size = 12
_a_Type$ = 8						; size = 4
_a_V1$ = 12						; size = 4
_a_V2$ = 16						; size = 4
_a_V3$ = 20						; size = 4
??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z PROC	; Raytracer::Primitive::Primitive, COMDAT
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 64					; 00000040H

; 128  : 	m_Type = a_Type;

	mov	eax, DWORD PTR _a_Type$[ebp]
	mov	edx, DWORD PTR _a_V3$[ebp]
	push	esi
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR _a_V2$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [edi+8], 0
	mov	DWORD PTR [edi+12], 0
	mov	DWORD PTR [edi+16], 0
	mov	DWORD PTR [edi+32], 0
	mov	DWORD PTR [edi+36], 0
	mov	DWORD PTR [edi+40], 0
	mov	DWORD PTR [edi+44], 0
	mov	DWORD PTR [edi+48], 0
	mov	DWORD PTR [edi+52], 0
	mov	DWORD PTR [edi+56], 0
	mov	DWORD PTR [edi+60], 0
	mov	DWORD PTR [edi+64], 0
	mov	DWORD PTR [edi+8], 0
	mov	DWORD PTR [edi+12], 0
	mov	DWORD PTR [edi+16], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 128  : 	m_Type = a_Type;

	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR _a_V1$[ebp]

; 129  : 	m_Material = 0;

	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [edi+24], ecx
	mov	DWORD PTR [edi+28], edx

; 134  : 	vector3 A = m_Vertex[0]->GetPos();

	movq	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	movq	QWORD PTR _A$[esp+72], xmm0

; 135  : 	vector3 B = m_Vertex[1]->GetPos();

	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR _B$[esp+72], xmm0

; 136  : 	vector3 C = m_Vertex[2]->GetPos();

	movq	xmm0, QWORD PTR [edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm6, DWORD PTR _B$[esp+76]
	subss	xmm6, DWORD PTR _A$[esp+76]
	movss	xmm7, DWORD PTR _B$[esp+72]
	subss	xmm7, DWORD PTR _A$[esp+72]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 136  : 	vector3 C = m_Vertex[2]->GetPos();

	movq	QWORD PTR _C$[esp+72], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm3, DWORD PTR _C$[esp+76]
	subss	xmm3, DWORD PTR _A$[esp+76]
	movss	xmm5, DWORD PTR _C$[esp+72]
	subss	xmm5, DWORD PTR _A$[esp+72]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 134  : 	vector3 A = m_Vertex[0]->GetPos();

	mov	DWORD PTR _A$[esp+80], eax

; 135  : 	vector3 B = m_Vertex[1]->GetPos();

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _B$[esp+80], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	movaps	xmm1, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 136  : 	vector3 C = m_Vertex[2]->GetPos();

	mov	eax, DWORD PTR [edx+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm4, DWORD PTR _B$[esp+80]
	subss	xmm4, DWORD PTR _A$[esp+80]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 136  : 	vector3 C = m_Vertex[2]->GetPos();

	mov	DWORD PTR _C$[esp+80], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm2, DWORD PTR _C$[esp+80]
	subss	xmm2, DWORD PTR _A$[esp+80]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR _b$[esp+72], xmm5

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	mulss	xmm1, xmm4

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR _b$[esp+76], xmm3

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	movaps	xmm0, xmm2

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR _b$[esp+80], xmm2

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	mulss	xmm0, xmm6
	mulss	xmm2, xmm7
	subss	xmm1, xmm0
	mulss	xmm3, xmm7
	movaps	xmm0, xmm5

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR _c$[esp+72], xmm7

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	mulss	xmm0, xmm4
	mulss	xmm5, xmm6
	subss	xmm2, xmm0

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR _c$[esp+76], xmm6
	movss	DWORD PTR _c$[esp+80], xmm4

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	subss	xmm5, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 139  : 	m_N = b.Cross( c );

	unpcklps xmm1, xmm2
	movq	QWORD PTR [edi+8], xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	movsd	xmm1, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T1[esp+80], xmm5
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 139  : 	m_N = b.Cross( c );

	mov	eax, DWORD PTR $T1[esp+80]
	mov	DWORD PTR [edi+16], eax
	movss	xmm0, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	cvtps2pd xmm0, xmm0
	andpd	xmm0, xmm1
	cvtpd2ps xmm2, xmm0
	movss	xmm0, DWORD PTR [edi+12]
	cvtps2pd xmm0, xmm0
	andpd	xmm0, xmm1
	cvtpd2ps xmm3, xmm0
	movss	xmm0, DWORD PTR [edi+16]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 141  : 	if (_fabs( m_N.x ) > _fabs( m_N.y))

	comiss	xmm2, xmm3
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 687  :     return (float)fabs(_X);

	cvtps2pd xmm0, xmm0
	andpd	xmm0, xmm1
	cvtpd2ps xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 141  : 	if (_fabs( m_N.x ) > _fabs( m_N.y))

	jbe	SHORT $LN6@Primitive

; 142  : 	{
; 143  : 		if (_fabs( m_N.x ) > _fabs( m_N.z )) k = 0; else k = 2;

	comiss	xmm2, xmm0
	jbe	SHORT $LN2@Primitive
	mov	DWORD PTR [edi+52], 0

; 144  : 	}
; 145  : 	else

	jmp	SHORT $LN1@Primitive
$LN6@Primitive:

; 146  : 	{
; 147  : 		if (_fabs( m_N.y ) > _fabs( m_N.z )) k = 1; else k = 2;

	comiss	xmm3, xmm0
	jbe	SHORT $LN2@Primitive
	mov	DWORD PTR [edi+52], 1
	jmp	SHORT $LN1@Primitive
$LN2@Primitive:
	mov	DWORD PTR [edi+52], 2
$LN1@Primitive:

; 148  : 	}
; 149  : 	u = (k + 1) % 3;

	mov	ecx, DWORD PTR [edi+52]
	mov	esi, 3

; 150  : 	v = (k + 2) % 3;
; 151  : 	// precomp
; 152  : 	real krec = 1.0f / m_N.cell[k];

	movss	xmm7, DWORD PTR __real@3f800000
	mov	DWORD PTR tv583[esp+72], esi
	movaps	xmm2, xmm7
	lea	eax, DWORD PTR [ecx+1]
	cdq
	idiv	esi
	divss	xmm2, DWORD PTR [edi+ecx*4+8]
	mov	esi, edx
	lea	eax, DWORD PTR [ecx+2]
	cdq
	idiv	DWORD PTR tv583[esp+72]

; 153  : 	nu = m_N.cell[u] * krec;

	movss	xmm0, DWORD PTR [edi+esi*4+8]
	mulss	xmm0, xmm2

; 157  : 	real reci = 1.0f / (b.cell[u] * c.cell[v] - b.cell[v] * c.cell[u]);

	movss	xmm3, DWORD PTR _b$[esp+esi*4+72]
	movss	xmm5, DWORD PTR _c$[esp+esi*4+72]
	movss	DWORD PTR [edi+40], xmm0
	movss	xmm0, DWORD PTR [edi+edx*4+8]
	mulss	xmm0, xmm2
	movss	xmm6, DWORD PTR _c$[esp+edx*4+72]
	movss	xmm4, DWORD PTR _b$[esp+edx*4+72]
	movss	DWORD PTR [edi+44], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }

	movss	xmm1, DWORD PTR [edi+12]
	mulss	xmm1, DWORD PTR _A$[esp+76]
	movss	xmm0, DWORD PTR [edi+8]
	mulss	xmm0, DWORD PTR _A$[esp+72]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [edi+16]
	mulss	xmm0, DWORD PTR _A$[esp+80]
	addss	xmm1, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 157  : 	real reci = 1.0f / (b.cell[u] * c.cell[v] - b.cell[v] * c.cell[u]);

	movaps	xmm0, xmm5
	mulss	xmm0, xmm4
	mulss	xmm1, xmm2
	movaps	xmm2, xmm7
	movss	DWORD PTR [edi+48], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm6
	subss	xmm1, xmm0
	divss	xmm2, xmm1

; 158  : 	bnu = b.cell[u] * reci;
; 159  : 	bnv = -b.cell[v] * reci;

	mulss	xmm4, xmm2

; 160  : 	// second line equation
; 161  : 	cnu = c.cell[v] * reci;
; 162  : 	cnv = -c.cell[u] * reci;

	mulss	xmm5, xmm2
	xorps	xmm4, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm3, xmm2
	xorps	xmm5, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm6, xmm2
	movss	DWORD PTR [edi+56], xmm3
	movss	DWORD PTR [edi+60], xmm4
	movss	DWORD PTR [edi+64], xmm6
	movss	DWORD PTR [edi+68], xmm5
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }

	movss	xmm0, DWORD PTR [edi+8]
	movss	xmm3, DWORD PTR [edi+12]
	movaps	xmm1, xmm0
	movss	xmm2, DWORD PTR [edi+16]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv617[esp+72], xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm3
	movss	DWORD PTR tv619[esp+72], xmm3
	movss	DWORD PTR tv621[esp+72], xmm2
	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtps2pd xmm0, xmm1
	call	__libm_sse2_sqrt_precise
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }

	movss	xmm1, DWORD PTR __real@3f800000
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtsd2ss xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }

	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv617[esp+72]
	mulss	xmm0, xmm1
	movss	DWORD PTR [edi+8], xmm0
	movss	xmm0, DWORD PTR tv619[esp+72]
	mulss	xmm0, xmm1
	movss	DWORD PTR [edi+12], xmm0
	movss	xmm0, DWORD PTR tv621[esp+72]
	mulss	xmm0, xmm1
	movss	DWORD PTR [edi+16], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 93   : 	void SetNormal( vector3& a_N ) { m_Normal = a_N; }

	mov	ecx, DWORD PTR [edi+20]
	movq	xmm0, QWORD PTR [edi+8]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR [edi+24]
	movq	xmm0, QWORD PTR [edi+8]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR [edi+28]
	movq	xmm0, QWORD PTR [edi+8]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [ecx+20], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 168  : }

	mov	eax, edi
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Primitive@Raytracer@@QAE@HPAVVertex@1@00@Z ENDP	; Raytracer::Primitive::Primitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z
_TEXT	SEGMENT
$T1 = -20						; size = 12
$T2 = -20						; size = 12
$T3 = -20						; size = 12
$T4 = -8						; size = 8
_a_Type$ = 8						; size = 4
_a_Centre$ = 12						; size = 4
_a_Radius$ = 16						; size = 4
??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z PROC	; Raytracer::Primitive::Primitive, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 114  : 	m_Centre = a_Centre;

	mov	eax, DWORD PTR _a_Centre$[ebp]

; 115  : 	m_SqRadius = a_Radius * a_Radius;

	movss	xmm1, DWORD PTR _a_Radius$[ebp]
	push	esi
	mov	esi, ecx

; 119  : 	m_Material = new Material();

	push	56					; 00000038H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+44], 0
	mov	DWORD PTR [esi+48], 0
	mov	DWORD PTR [esi+52], 0
	mov	DWORD PTR [esi+56], 0
	mov	DWORD PTR [esi+60], 0
	mov	DWORD PTR [esi+64], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 114  : 	m_Centre = a_Centre;

	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [esi+8], xmm0

; 115  : 	m_SqRadius = a_Radius * a_Radius;

	movaps	xmm0, xmm1
	mov	eax, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	mov	DWORD PTR [esi+16], eax

; 116  : 	m_Radius = a_Radius;
; 117  : 	m_RRadius = 1.0f / a_Radius;
; 118  : 	m_Type = a_Type;

	mov	eax, DWORD PTR _a_Type$[ebp]
	movss	DWORD PTR [esi+24], xmm1
	movss	DWORD PTR [esi+20], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movq	QWORD PTR $T4[ebp], xmm0
	divss	xmm0, xmm1
	mov	DWORD PTR [esi+4], eax
	movss	DWORD PTR [esi+28], xmm0

; 119  : 	m_Material = new Material();

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Primitive
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR [eax], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [eax+4], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [eax+8], 1045220557		; 3e4ccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 88   : {

	mov	DWORD PTR [eax+12], 0
	mov	DWORD PTR [eax+20], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [eax+24], 1061997773		; 3f4ccccdH
	mov	DWORD PTR [eax+28], 0
	mov	DWORD PTR [eax+32], 1069547520		; 3fc00000H
	mov	DWORD PTR [eax+36], 0
	mov	DWORD PTR [eax+40], 1065353216		; 3f800000H
	mov	DWORD PTR [eax+44], 1065353216		; 3f800000H

; 119  : 	m_Material = new Material();

	jmp	SHORT $LN4@Primitive
$LN3@Primitive:
	xor	eax, eax
$LN4@Primitive:

; 121  : 	m_Vn = vector3( 0, 1, 0 );

	movq	xmm1, QWORD PTR $T4[ebp]
	xorps	xmm4, xmm4
	mov	DWORD PTR [esi], eax
	movss	xmm0, xmm4
	unpcklps xmm0, xmm1
	movq	QWORD PTR [esi+44], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T3[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 121  : 	m_Vn = vector3( 0, 1, 0 );

	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [esi+52], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T2[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 122  : 	m_Ve = vector3( 1, 0, 0 );

	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm4
	movq	QWORD PTR [esi+32], xmm1
	mov	DWORD PTR [esi+40], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	movss	xmm2, DWORD PTR [esi+52]
	movss	xmm3, DWORD PTR [esi+48]
	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
	mulss	xmm3, xmm4
	subss	xmm3, xmm0
	movss	xmm0, DWORD PTR [esi+44]
	mulss	xmm0, xmm4
	subss	xmm2, xmm0
	subss	xmm0, DWORD PTR [esi+48]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 123  : 	m_Vc = m_Vn.Cross( m_Ve );

	unpcklps xmm3, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T1[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 123  : 	m_Vc = m_Vn.Cross( m_Ve );

	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [esi+56], xmm3
	mov	DWORD PTR [esi+64], eax

; 124  : }

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Primitive@Raytracer@@QAE@HAAVvector3@1@M@Z ENDP	; Raytracer::Primitive::Primitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0Light@Raytracer@@QAE@HAAVvector3@1@000@Z
_TEXT	SEGMENT
$T1 = -20						; size = 12
$T2 = -20						; size = 12
$T3 = -20						; size = 12
$T4 = -20						; size = 12
$T5 = -20						; size = 12
$T6 = -20						; size = 12
$T7 = -20						; size = 12
$T8 = -20						; size = 12
$T9 = -20						; size = 12
$T10 = -20						; size = 12
$T11 = -20						; size = 12
$T12 = -20						; size = 12
$T13 = -20						; size = 12
$T14 = -20						; size = 12
$T15 = -20						; size = 12
$T16 = -20						; size = 12
$T17 = -20						; size = 12
$T18 = -20						; size = 12
$T19 = -20						; size = 12
$T20 = -20						; size = 12
$T21 = -8						; size = 8
_a_Type$ = 8						; size = 4
_a_P1$ = 12						; size = 4
_a_P2$ = 16						; size = 4
_a_P3$ = 20						; size = 4
_a_Color$ = 24						; size = 4
??0Light@Raytracer@@QAE@HAAVvector3@1@000@Z PROC	; Raytracer::Light::Light, COMDAT
; _this$ = ecx

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 430  : 	m_Type = a_Type;

	mov	eax, DWORD PTR _a_Type$[ebp]
	xorps	xmm0, xmm0
	push	esi
	mov	esi, ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	movq	QWORD PTR $T21[ebp], xmm0
	push	edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 432  : 	m_Grid = new vector3[16];

	push	192					; 000000c0H
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+44], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 430  : 	m_Type = a_Type;

	mov	DWORD PTR [esi+48], eax

; 431  : 	m_Color = a_Color;

	mov	eax, DWORD PTR _a_Color$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [esi+36], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+44], eax

; 432  : 	m_Grid = new vector3[16];

	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN6@Light
	mov	edx, 15					; 0000000fH
	lea	ecx, DWORD PTR [edi+8]
	npad	8
$LL18@Light:
	dec	edx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx-8], 0
	mov	DWORD PTR [ecx-4], 0
	lea	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx-12], 0
	jns	SHORT $LL18@Light
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 432  : 	m_Grid = new vector3[16];

	jmp	SHORT $LN7@Light
$LN6@Light:
	xor	edi, edi
$LN7@Light:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm2, DWORD PTR __real@3f800000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 433  : 	m_Grid[ 0] = vector3( 1, 2, 0 );

	movss	xmm7, DWORD PTR __real@40000000
	movss	xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	xmm1, DWORD PTR __real@40400000
	mov	DWORD PTR [esi+52], edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 435  : 	m_Grid[ 2] = vector3( 2, 0, 0 );

	movq	xmm3, QWORD PTR $T21[ebp]
	unpcklps xmm0, xmm7
	movq	QWORD PTR [edi], xmm0
	movss	xmm0, xmm1
	unpcklps xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T20[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 433  : 	m_Grid[ 0] = vector3( 1, 2, 0 );

	mov	eax, DWORD PTR $T20[ebp+8]
	mov	DWORD PTR [edi+8], eax

; 434  : 	m_Grid[ 1] = vector3( 3, 3, 0 );

	mov	ecx, DWORD PTR [esi+52]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T19[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 434  : 	m_Grid[ 1] = vector3( 3, 3, 0 );

	mov	eax, DWORD PTR $T19[ebp+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T18[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 434  : 	m_Grid[ 1] = vector3( 3, 3, 0 );

	movq	QWORD PTR [ecx+12], xmm0

; 435  : 	m_Grid[ 2] = vector3( 2, 0, 0 );

	movss	xmm0, xmm7
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T18[ebp+8]
	unpcklps xmm0, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T17[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 435  : 	m_Grid[ 2] = vector3( 2, 0, 0 );

	movq	QWORD PTR [ecx+24], xmm0

; 436  : 	m_Grid[ 3] = vector3( 0, 1, 0 );

	movss	xmm0, xmm3
	mov	DWORD PTR [ecx+32], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T17[ebp+8]
	unpcklps xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T16[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 436  : 	m_Grid[ 3] = vector3( 0, 1, 0 );

	movq	QWORD PTR [ecx+36], xmm0

; 437  : 	m_Grid[ 4] = vector3( 2, 3, 0 );

	movss	xmm0, xmm7
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T16[ebp+8]
	unpcklps xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T15[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 437  : 	m_Grid[ 4] = vector3( 2, 3, 0 );

	movq	QWORD PTR [ecx+48], xmm0

; 438  : 	m_Grid[ 5] = vector3( 0, 3, 0 );

	movss	xmm0, xmm3
	mov	DWORD PTR [ecx+56], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T15[ebp+8]
	unpcklps xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T14[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 438  : 	m_Grid[ 5] = vector3( 0, 3, 0 );

	movq	QWORD PTR [ecx+60], xmm0

; 439  : 	m_Grid[ 6] = vector3( 0, 0, 0 );

	movss	xmm0, xmm3
	mov	DWORD PTR [ecx+68], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T14[ebp+8]
	unpcklps xmm0, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T13[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 439  : 	m_Grid[ 6] = vector3( 0, 0, 0 );

	movq	QWORD PTR [ecx+72], xmm0

; 440  : 	m_Grid[ 7] = vector3( 2, 2, 0 );

	movss	xmm0, xmm7
	mov	DWORD PTR [ecx+80], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T13[ebp+8]
	unpcklps xmm0, xmm7
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T12[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 440  : 	m_Grid[ 7] = vector3( 2, 2, 0 );

	movq	QWORD PTR [ecx+84], xmm0

; 441  : 	m_Grid[ 8] = vector3( 3, 1, 0 );

	movss	xmm0, xmm1
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T12[ebp+8]
	unpcklps xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T11[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 441  : 	m_Grid[ 8] = vector3( 3, 1, 0 );

	movq	QWORD PTR [ecx+96], xmm0

; 442  : 	m_Grid[ 9] = vector3( 1, 3, 0 );

	movss	xmm0, xmm2
	mov	DWORD PTR [ecx+104], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T11[ebp+8]
	unpcklps xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T10[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 442  : 	m_Grid[ 9] = vector3( 1, 3, 0 );

	movq	QWORD PTR [ecx+108], xmm0

; 443  : 	m_Grid[10] = vector3( 1, 0, 0 );

	movss	xmm0, xmm2
	mov	DWORD PTR [ecx+116], eax
	mov	ecx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR $T10[ebp+8]
	unpcklps xmm0, xmm3
	movq	QWORD PTR [ecx+120], xmm0
	mov	DWORD PTR [ecx+128], eax

; 444  : 	m_Grid[11] = vector3( 3, 2, 0 );

	mov	ecx, DWORD PTR [esi+52]
	movss	xmm0, xmm1
	unpcklps xmm0, xmm7
	xor	edx, edx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	edi, DWORD PTR _a_P1$[ebp]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T9[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 444  : 	m_Grid[11] = vector3( 3, 2, 0 );

	mov	eax, DWORD PTR $T9[ebp+8]
	movq	QWORD PTR [ecx+132], xmm0

; 445  : 	m_Grid[12] = vector3( 2, 1, 0 );

	movss	xmm0, xmm7
	mov	DWORD PTR [ecx+140], eax
	mov	ecx, DWORD PTR [esi+52]
	unpcklps xmm0, xmm2

; 446  : 	m_Grid[13] = vector3( 3, 0, 0 );

	unpcklps xmm1, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T8[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 445  : 	m_Grid[12] = vector3( 2, 1, 0 );

	mov	eax, DWORD PTR $T8[ebp+8]
	movq	QWORD PTR [ecx+144], xmm0
	mov	DWORD PTR [ecx+152], eax

; 446  : 	m_Grid[13] = vector3( 3, 0, 0 );

	mov	ecx, DWORD PTR [esi+52]

; 447  : 	m_Grid[14] = vector3( 1, 1, 0 );

	unpcklps xmm2, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T7[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 446  : 	m_Grid[13] = vector3( 3, 0, 0 );

	mov	eax, DWORD PTR $T7[ebp+8]
	movq	QWORD PTR [ecx+156], xmm1
	mov	DWORD PTR [ecx+164], eax

; 447  : 	m_Grid[14] = vector3( 1, 1, 0 );

	mov	ecx, DWORD PTR [esi+52]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T6[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 447  : 	m_Grid[14] = vector3( 1, 1, 0 );

	mov	eax, DWORD PTR $T6[ebp+8]

; 448  : 	m_Grid[15] = vector3( 0, 2, 0 );

	unpcklps xmm3, xmm7
	movq	QWORD PTR [ecx+168], xmm2
	mov	DWORD PTR [ecx+176], eax
	mov	ecx, DWORD PTR [esi+52]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR $T5[ebp+8], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 448  : 	m_Grid[15] = vector3( 0, 2, 0 );

	mov	eax, DWORD PTR $T5[ebp+8]
	movq	QWORD PTR [ecx+180], xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm3, DWORD PTR __real@3e800000
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 448  : 	m_Grid[15] = vector3( 0, 2, 0 );

	mov	DWORD PTR [ecx+188], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	eax, DWORD PTR _a_P2$[ebp]
	movss	xmm2, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [eax+4]
	subss	xmm2, DWORD PTR [edi]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm1, DWORD PTR [edi+4]
	subss	xmm0, DWORD PTR [edi+8]

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm2, xmm3
	mulss	xmm1, xmm3
	mulss	xmm0, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 449  : 	m_CellX = (a_P2 - a_P1) * 0.25f;

	unpcklps xmm2, xmm1
	movq	QWORD PTR [esi+12], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T4[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 449  : 	m_CellX = (a_P2 - a_P1) * 0.25f;

	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [esi+20], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	mov	eax, DWORD PTR _a_P3$[ebp]
	movss	xmm2, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm2, DWORD PTR [edi]
	subss	xmm1, DWORD PTR [edi+4]
	subss	xmm0, DWORD PTR [edi+8]

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm2, xmm3
	mulss	xmm1, xmm3
	mulss	xmm0, xmm3
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 450  : 	m_CellY = (a_P3 - a_P1) * 0.25f;

	unpcklps xmm2, xmm1
	movq	QWORD PTR [esi+24], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T3[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 450  : 	m_CellY = (a_P3 - a_P1) * 0.25f;

	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [esi+32], eax
	npad	7
$LL3@Light:

; 452  : 		m_Grid[i] = m_Grid[i].cell[0] * m_CellX + m_Grid[i].cell[1] * m_CellY + a_P1;

	mov	ecx, DWORD PTR [esi+52]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm3, DWORD PTR [esi+24]
	movss	xmm4, DWORD PTR [esi+28]
	movss	xmm5, DWORD PTR [esi+32]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 452  : 		m_Grid[i] = m_Grid[i].cell[0] * m_CellX + m_Grid[i].cell[1] * m_CellY + a_P1;

	movss	xmm0, DWORD PTR [ecx+edx+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm6, DWORD PTR [esi+12]
	movss	xmm1, DWORD PTR [esi+16]
	movss	xmm2, DWORD PTR [esi+20]
	mulss	xmm3, xmm0
	mulss	xmm4, xmm0
	mulss	xmm5, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 452  : 		m_Grid[i] = m_Grid[i].cell[0] * m_CellX + m_Grid[i].cell[1] * m_CellY + a_P1;

	movss	xmm0, DWORD PTR [ecx+edx]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm6, xmm0
	mulss	xmm1, xmm0
	mulss	xmm2, xmm0

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm6, xmm3
	movss	xmm0, DWORD PTR [edi+4]
	addss	xmm1, xmm4
	addss	xmm2, xmm5
	addss	xmm6, DWORD PTR [edi]
	addss	xmm0, xmm1
	addss	xmm2, DWORD PTR [edi+8]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 452  : 		m_Grid[i] = m_Grid[i].cell[0] * m_CellX + m_Grid[i].cell[1] * m_CellY + a_P1;

	unpcklps xmm6, xmm0
	movq	QWORD PTR [ecx+edx], xmm6
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T2[ebp+8], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 452  : 		m_Grid[i] = m_Grid[i].cell[0] * m_CellX + m_Grid[i].cell[1] * m_CellY + a_P1;

	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+edx+8], eax
	add	edx, 12					; 0000000cH
	cmp	edx, 192				; 000000c0H
	jl	$LL3@Light
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm3, DWORD PTR __real@40000000
	movss	xmm0, DWORD PTR [esi+12]
	movss	xmm5, DWORD PTR [esi+24]
	movss	xmm6, DWORD PTR [esi+28]
	movss	xmm1, DWORD PTR [esi+16]
	movss	xmm2, DWORD PTR [esi+20]

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm4, DWORD PTR [edi]

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm0, xmm3
	mulss	xmm5, xmm7
	mulss	xmm6, xmm7

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm4, xmm0

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm7, DWORD PTR [esi+32]

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm0, DWORD PTR [edi+8]

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm1, xmm3
	mulss	xmm2, xmm3

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm4, xmm5

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm7, xmm3

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm3, DWORD PTR [edi+4]
	addss	xmm0, xmm2
	addss	xmm3, xmm1
	pop	edi
	addss	xmm0, xmm7
	addss	xmm3, xmm6

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T1[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 453  : 	m_Pos = a_P1 + 2 * m_CellX + 2 * m_CellY;

	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm4, xmm3
	movq	QWORD PTR [esi], xmm4
	mov	DWORD PTR [esi+8], eax

; 454  : }

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0Light@Raytracer@@QAE@HAAVvector3@1@000@Z ENDP	; Raytracer::Light::Light
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ??0Light@Raytracer@@QAE@HAAVvector3@1@0@Z
_TEXT	SEGMENT
_a_Type$ = 8						; size = 4
_a_Pos$ = 12						; size = 4
_a_Color$ = 16						; size = 4
??0Light@Raytracer@@QAE@HAAVvector3@1@0@Z PROC		; Raytracer::Light::Light, COMDAT
; _this$ = ecx

; 108  : 	Light( int a_Type, vector3& a_Pos, Color& a_Color ) : m_Type( a_Type ), m_Pos( a_Pos ), m_Color( a_Color ), m_Grid( 0 ) {};

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_Pos$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _a_Color$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 108  : 	Light( int a_Type, vector3& a_Pos, Color& a_Color ) : m_Type( a_Type ), m_Pos( a_Pos ), m_Color( a_Color ), m_Grid( 0 ) {};

	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+36], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+44], eax
	mov	eax, DWORD PTR _a_Type$[ebp]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx+52], 0
	pop	ebp
	ret	12					; 0000000cH
??0Light@Raytracer@@QAE@HAAVvector3@1@0@Z ENDP		; Raytracer::Light::Light
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetNormal@Vertex@Raytracer@@QAEXAAVvector3@2@@Z
_TEXT	SEGMENT
_a_N$ = 8						; size = 4
?SetNormal@Vertex@Raytracer@@QAEXAAVvector3@2@@Z PROC	; Raytracer::Vertex::SetNormal, COMDAT
; _this$ = ecx

; 93   : 	void SetNormal( vector3& a_N ) { m_Normal = a_N; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_N$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax
	pop	ebp
	ret	4
?SetNormal@Vertex@Raytracer@@QAEXAAVvector3@2@@Z ENDP	; Raytracer::Vertex::SetNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetUV@Vertex@Raytracer@@QAEXMM@Z
_TEXT	SEGMENT
_a_U$ = 8						; size = 4
_a_V$ = 12						; size = 4
?SetUV@Vertex@Raytracer@@QAEXMM@Z PROC			; Raytracer::Vertex::SetUV, COMDAT
; _this$ = ecx

; 91   : 	void SetUV( real a_U, real a_V ) { m_U = a_U; m_V = a_V; }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a_U$[ebp]
	movss	DWORD PTR [ecx+24], xmm0
	movss	xmm0, DWORD PTR _a_V$[ebp]
	movss	DWORD PTR [ecx+28], xmm0
	pop	ebp
	ret	8
?SetUV@Vertex@Raytracer@@QAEXMM@Z ENDP			; Raytracer::Vertex::SetUV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetPos@Vertex@Raytracer@@QAEAAVvector3@2@XZ
_TEXT	SEGMENT
?GetPos@Vertex@Raytracer@@QAEAAVvector3@2@XZ PROC	; Raytracer::Vertex::GetPos, COMDAT
; _this$ = ecx

; 90   : 	vector3& GetPos() { return m_Pos; }

	mov	eax, ecx
	ret	0
?GetPos@Vertex@Raytracer@@QAEAAVvector3@2@XZ ENDP	; Raytracer::Vertex::GetPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetNormal@Vertex@Raytracer@@QAEAAVvector3@2@XZ
_TEXT	SEGMENT
?GetNormal@Vertex@Raytracer@@QAEAAVvector3@2@XZ PROC	; Raytracer::Vertex::GetNormal, COMDAT
; _this$ = ecx

; 89   : 	vector3& GetNormal() { return m_Normal; }

	lea	eax, DWORD PTR [ecx+12]
	ret	0
?GetNormal@Vertex@Raytracer@@QAEAAVvector3@2@XZ ENDP	; Raytracer::Vertex::GetNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetV@Vertex@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?GetV@Vertex@Raytracer@@QAEMXZ PROC			; Raytracer::Vertex::GetV, COMDAT
; _this$ = ecx

; 88   : 	real GetV() { return m_V; }

	fld	DWORD PTR [ecx+28]
	ret	0
?GetV@Vertex@Raytracer@@QAEMXZ ENDP			; Raytracer::Vertex::GetV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetU@Vertex@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?GetU@Vertex@Raytracer@@QAEMXZ PROC			; Raytracer::Vertex::GetU, COMDAT
; _this$ = ecx

; 87   : 	real GetU() { return m_U; }

	fld	DWORD PTR [ecx+24]
	ret	0
?GetU@Vertex@Raytracer@@QAEMXZ ENDP			; Raytracer::Vertex::GetU
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ??0Vertex@Raytracer@@QAE@Vvector3@1@MM@Z
_TEXT	SEGMENT
_a_Pos$ = 8						; size = 12
_a_U$ = 20						; size = 4
_a_V$ = 24						; size = 4
??0Vertex@Raytracer@@QAE@Vvector3@1@MM@Z PROC		; Raytracer::Vertex::Vertex, COMDAT
; _this$ = ecx

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	push	ebp
	mov	ebp, esp
	movq	xmm0, QWORD PTR _a_Pos$[ebp]
	mov	eax, DWORD PTR _a_Pos$[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _a_U$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h

; 86   : 	Vertex( vector3 a_Pos, real a_U, real a_V ) : m_Pos( a_Pos ), m_U( a_U ), m_V( a_V ) {};

	movss	DWORD PTR [ecx+24], xmm0
	movss	xmm0, DWORD PTR _a_V$[ebp]
	movss	DWORD PTR [ecx+28], xmm0
	pop	ebp
	ret	20					; 00000014H
??0Vertex@Raytracer@@QAE@Vvector3@1@MM@Z ENDP		; Raytracer::Vertex::Vertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetVScaleReci@Material@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?GetVScaleReci@Material@Raytracer@@QAEMXZ PROC		; Raytracer::Material::GetVScaleReci, COMDAT
; _this$ = ecx

; 67   : 	real GetVScaleReci() { return m_RVScale; }

	fld	DWORD PTR [ecx+52]
	ret	0
?GetVScaleReci@Material@Raytracer@@QAEMXZ ENDP		; Raytracer::Material::GetVScaleReci
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetUScaleReci@Material@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?GetUScaleReci@Material@Raytracer@@QAEMXZ PROC		; Raytracer::Material::GetUScaleReci, COMDAT
; _this$ = ecx

; 66   : 	real GetUScaleReci() { return m_RUScale; }

	fld	DWORD PTR [ecx+48]
	ret	0
?GetUScaleReci@Material@Raytracer@@QAEMXZ ENDP		; Raytracer::Material::GetUScaleReci
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?SetUVScale@Material@Raytracer@@QAEXMM@Z
_TEXT	SEGMENT
_a_UScale$ = 8						; size = 4
_a_VScale$ = 12						; size = 4
?SetUVScale@Material@Raytracer@@QAEXMM@Z PROC		; Raytracer::Material::SetUVScale, COMDAT
; _this$ = ecx

; 92   : { 

	push	ebp
	mov	ebp, esp

; 93   : 	m_UScale = a_UScale; 
; 94   : 	m_VScale = a_VScale; 
; 95   : 	m_RUScale = 1.0f / a_UScale;

	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR _a_UScale$[ebp]
	movaps	xmm0, xmm1
	movss	xmm3, DWORD PTR _a_VScale$[ebp]
	divss	xmm0, xmm2

; 96   : 	m_RVScale = 1.0f / a_VScale;

	divss	xmm1, xmm3
	movss	DWORD PTR [ecx+40], xmm2
	movss	DWORD PTR [ecx+44], xmm3
	movss	DWORD PTR [ecx+48], xmm0
	movss	DWORD PTR [ecx+52], xmm1

; 97   : }

	pop	ebp
	ret	8
?SetUVScale@Material@Raytracer@@QAEXMM@Z ENDP		; Raytracer::Material::SetUVScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetTexture@Material@Raytracer@@QAEPAVTexture@2@XZ
_TEXT	SEGMENT
?GetTexture@Material@Raytracer@@QAEPAVTexture@2@XZ PROC	; Raytracer::Material::GetTexture, COMDAT
; _this$ = ecx

; 62   : 	Texture* GetTexture() { return m_Texture; }

	mov	eax, DWORD PTR [ecx+36]
	ret	0
?GetTexture@Material@Raytracer@@QAEPAVTexture@2@XZ ENDP	; Raytracer::Material::GetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?SetRefrIndex@Material@Raytracer@@QAEXM@Z
_TEXT	SEGMENT
_a_Refr$ = 8						; size = 4
?SetRefrIndex@Material@Raytracer@@QAEXM@Z PROC		; Raytracer::Material::SetRefrIndex, COMDAT
; _this$ = ecx

; 57   : 	void SetRefrIndex( real a_Refr ) { m_RIndex = a_Refr; }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a_Refr$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
?SetRefrIndex@Material@Raytracer@@QAEXM@Z ENDP		; Raytracer::Material::SetRefrIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?SetParameters@Material@Raytracer@@QAEXMMAAVvector3@2@MM@Z
_TEXT	SEGMENT
_a_Refl$ = 8						; size = 4
_a_Refr$ = 12						; size = 4
_a_Col$ = 16						; size = 4
_a_Diff$ = 20						; size = 4
_a_Spec$ = 24						; size = 4
?SetParameters@Material@Raytracer@@QAEXMMAAVvector3@2@MM@Z PROC ; Raytracer::Material::SetParameters, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp

; 101  : 	m_Refl = a_Refl;

	movss	xmm0, DWORD PTR _a_Refl$[ebp]

; 102  : 	m_Refr = a_Refr;
; 103  : 	m_Color = a_Col;

	mov	eax, DWORD PTR _a_Col$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR _a_Refr$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]

; 104  : 	m_Diff = a_Diff;

	movss	xmm0, DWORD PTR _a_Diff$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 105  : 	m_Spec = a_Spec;

	movss	xmm0, DWORD PTR _a_Spec$[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR [ecx+24], xmm0

; 106  : }

	pop	ebp
	ret	20					; 00000014H
?SetParameters@Material@Raytracer@@QAEXMMAAVvector3@2@MM@Z ENDP ; Raytracer::Material::SetParameters
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.h
;	COMDAT ?GetColor@Material@Raytracer@@QAE?AVvector3@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetColor@Material@Raytracer@@QAE?AVvector3@2@XZ PROC	; Raytracer::Material::GetColor, COMDAT
; _this$ = ecx

; 47   : 	Color GetColor() { return m_Color; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	4
?GetColor@Material@Raytracer@@QAE?AVvector3@2@XZ ENDP	; Raytracer::Material::GetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0Material@Raytracer@@QAE@XZ
_TEXT	SEGMENT
??0Material@Raytracer@@QAE@XZ PROC			; Raytracer::Material::Material, COMDAT
; _this$ = ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR [ecx], 1045220557		; 3e4ccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 89   : }

	mov	eax, ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR [ecx+4], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [ecx+8], 1045220557		; 3e4ccccdH
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 88   : {

	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+20], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [ecx+24], 1061997773		; 3f4ccccdH
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 1069547520		; 3fc00000H
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+44], 1065353216		; 3f800000H

; 89   : }

	ret	0
??0Material@Raytracer@@QAE@XZ ENDP			; Raytracer::Material::Material
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ?GetTexel@Texture@Raytracer@@QAE?AVvector3@2@MM@Z
_TEXT	SEGMENT
_c1$ = -60						; size = 12
_c2$ = -48						; size = 12
_c3$ = -36						; size = 12
_c4$ = -24						; size = 12
tv464 = -20						; size = 8
tv458 = -20						; size = 8
tv454 = -20						; size = 8
tv448 = -20						; size = 8
$T1 = -12						; size = 4
tv285 = -12						; size = 4
$T2 = -8						; size = 4
_u2$1$ = -8						; size = 4
$T3 = -4						; size = 4
_u1$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_w1$1$ = 12						; size = 4
_a_U$ = 12						; size = 4
$T4 = 16						; size = 4
_a_V$ = 16						; size = 4
?GetTexel@Texture@Raytracer@@QAE?AVvector3@2@MM@Z PROC	; Raytracer::Texture::GetTexel, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 56   : 	real fu = (a_U + 1000.5f) * m_Width;

	movss	xmm1, DWORD PTR _a_U$[ebp]
	addss	xmm1, DWORD PTR __real@447a2000
	push	ebx
	mov	ebx, ecx

; 57   : 	real fv = (a_V + 1000.0f) * m_Width;

	movss	xmm2, DWORD PTR _a_V$[ebp]
	addss	xmm2, DWORD PTR __real@447a0000
	push	esi
	movss	DWORD PTR _a_U$[ebp], xmm1
	mov	ecx, DWORD PTR [ebx+4]
	push	edi
	movss	DWORD PTR _a_V$[ebp], xmm2
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	sub	esp, 8
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 56   : 	real fu = (a_U + 1000.5f) * m_Width;

	mov	DWORD PTR tv285[ebp], ecx
	movd	xmm0, ecx
	cvtdq2ps xmm0, xmm0
	mulss	xmm1, xmm0

; 57   : 	real fv = (a_V + 1000.0f) * m_Width;

	mulss	xmm2, xmm0

; 58   : 	int u1 = ((int)fu) % m_Width;

	cvttss2si eax, xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	cvtps2pd xmm0, xmm1
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 58   : 	int u1 = ((int)fu) % m_Width;

	cdq
	idiv	ecx

; 59   : 	int v1 = ((int)fv) % m_Height;

	cvttss2si eax, xmm2
	mov	edi, edx
	mov	DWORD PTR _u1$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	movsd	QWORD PTR tv464[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 59   : 	int v1 = ((int)fv) % m_Height;

	cdq
	idiv	DWORD PTR [ebx+8]

; 60   : 	int u2 = (u1 + 1) % m_Width;

	lea	eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	fld	QWORD PTR tv464[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 59   : 	int v1 = ((int)fv) % m_Height;

	mov	esi, edx
	movss	DWORD PTR _a_U$[ebp], xmm1

; 60   : 	int u2 = (u1 + 1) % m_Width;

	cdq
	idiv	ecx

; 61   : 	int v2 = (v1 + 1) % m_Height;

	lea	eax, DWORD PTR [esi+1]
	movss	DWORD PTR _a_V$[ebp], xmm2
	mov	DWORD PTR _u2$1$[ebp], edx
	cdq
	idiv	DWORD PTR [ebx+8]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	fstp	QWORD PTR [esp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 61   : 	int v2 = (v1 + 1) % m_Height;

	mov	edi, edx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	call	_floor
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 63   : 	real fracu = fu - _floor( fu );

	movss	xmm1, DWORD PTR _a_U$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	fstp	QWORD PTR tv458[ebp]
	movsd	xmm0, QWORD PTR tv458[ebp]
	cvtpd2ps xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 63   : 	real fracu = fu - _floor( fu );

	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _a_V$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	cvtps2pd xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 63   : 	real fracu = fu - _floor( fu );

	movss	DWORD PTR _a_U$[ebp], xmm1
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	movsd	QWORD PTR tv454[ebp], xmm0
	fld	QWORD PTR tv454[ebp]
	fstp	QWORD PTR [esp]
	call	_floor
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 64   : 	real fracv = fv - _floor( fv );

	movss	xmm2, DWORD PTR _a_V$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	add	esp, 8
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 71   : 	Color c1 = m_Bitmap[u1 + v1 * m_Width];

	mov	ecx, DWORD PTR [ebx+4]
	movss	xmm1, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR [ebx]
	movaps	xmm3, xmm1
	mov	ebx, DWORD PTR _u1$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 701  :     return (float)floor(_X);

	fstp	QWORD PTR tv448[ebp]
	movsd	xmm0, QWORD PTR tv448[ebp]
	cvtpd2ps xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 71   : 	Color c1 = m_Bitmap[u1 + v1 * m_Width];

	imul	ecx, esi

; 72   : 	Color c2 = m_Bitmap[u2 + v1 * m_Width];

	mov	esi, DWORD PTR _u2$1$[ebp]
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR _a_U$[ebp]
	subss	xmm1, xmm0
	subss	xmm3, xmm2
	movaps	xmm5, xmm1
	lea	eax, DWORD PTR [ecx+ebx]
	lea	eax, DWORD PTR [eax+eax*2]
	mulss	xmm1, xmm2
	mulss	xmm5, xmm3
	mulss	xmm3, xmm0
	mulss	xmm2, xmm0
	movq	xmm0, QWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+eax*4+8]
	movss	DWORD PTR _w1$1$[ebp], xmm5
	movq	QWORD PTR _c1$[ebp], xmm0
	mov	DWORD PTR _c1$[ebp+8], eax
	lea	eax, DWORD PTR [ecx+esi]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm4, DWORD PTR _c1$[ebp+4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 73   : 	Color c3 = m_Bitmap[u1 + v2 * m_Width];

	mov	ecx, DWORD PTR tv285[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	movq	xmm0, QWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+eax*4+8]
	imul	ecx, edi
	movq	QWORD PTR _c2$[ebp], xmm0
	mov	DWORD PTR _c2$[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm4, xmm5
	pop	edi
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 73   : 	Color c3 = m_Bitmap[u1 + v2 * m_Width];

	lea	eax, DWORD PTR [ecx+ebx]
	lea	eax, DWORD PTR [eax+eax*2]
	movq	xmm0, QWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+eax*4+8]
	movq	QWORD PTR _c3$[ebp], xmm0
	mov	DWORD PTR _c3$[ebp+8], eax

; 74   : 	Color c4 = m_Bitmap[u2 + v2 * m_Width];

	lea	eax, DWORD PTR [ecx+esi]
	lea	eax, DWORD PTR [eax+eax*2]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm6, DWORD PTR _c3$[ebp]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 74   : 	Color c4 = m_Bitmap[u2 + v2 * m_Width];

	movq	xmm0, QWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edx+eax*4+8]
	movq	QWORD PTR _c4$[ebp], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR _c4$[ebp]
	mulss	xmm0, xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 74   : 	Color c4 = m_Bitmap[u2 + v2 * m_Width];

	mov	DWORD PTR _c4$[ebp+8], eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm7, DWORD PTR _c3$[ebp+4]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _c4$[ebp+4]
	mulss	xmm0, xmm2
	pop	esi
	mulss	xmm6, xmm1
	pop	ebx
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _c4$[ebp+8]
	mulss	xmm0, xmm2
	movss	xmm2, DWORD PTR _c2$[ebp+8]
	mulss	xmm7, xmm1
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _c3$[ebp+8]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _c2$[ebp+4]
	mulss	xmm1, xmm3
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR _c2$[ebp]
	mulss	xmm2, xmm3

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm4, xmm1

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	mulss	xmm0, xmm3
	movss	xmm3, DWORD PTR _c1$[ebp]
	mulss	xmm3, xmm5

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm4, xmm7

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm5, DWORD PTR _c1$[ebp+8]
	mulss	xmm5, DWORD PTR _w1$1$[ebp]

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm4, DWORD PTR $T2[ebp]
	addss	xmm3, xmm0
	addss	xmm5, xmm2

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+4], xmm4

; 64   : 	void Set( real a_X, real a_Y, real a_Z ) { x = a_X; y = a_Y; z = a_Z; }
; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }
; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }
; 67   : 	real SqrLength() { return x * x + y * y + z * z; }
; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }
; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }
; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }
; 71   : 	void operator += ( vector3* a_V ) { x += a_V->x; y += a_V->y; z += a_V->z; }
; 72   : 	void operator -= ( vector3& a_V ) { x -= a_V.x; y -= a_V.y; z -= a_V.z; }
; 73   : 	void operator -= ( vector3* a_V ) { x -= a_V->x; y -= a_V->y; z -= a_V->z; }
; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }
; 75   : 	void operator *= ( vector3& a_V ) { x *= a_V.x; y *= a_V.y; z *= a_V.z; }
; 76   : 	void operator *= ( vector3* a_V ) { x *= a_V->x; y *= a_V->y; z *= a_V->z; }
; 77   : 	vector3 operator- () const { return vector3( -x, -y, -z ); }
; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	addss	xmm3, xmm6
	addss	xmm5, DWORD PTR $T4[ebp]
	addss	xmm3, DWORD PTR $T1[ebp]
	addss	xmm5, DWORD PTR $T3[ebp]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm3
	movss	DWORD PTR [eax+8], xmm5
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 77   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetTexel@Texture@Raytracer@@QAE?AVvector3@2@MM@Z ENDP	; Raytracer::Texture::GetTexel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0Texture@Raytracer@@QAE@PAD@Z
_TEXT	SEGMENT
$T1 = -40						; size = 12
_t$1$ = -28						; size = 4
_buffer$2 = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_a_File$ = 8						; size = 4
??0Texture@Raytracer@@QAE@PAD@Z PROC			; Raytracer::Texture::Texture, COMDAT
; _this$ = ecx

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _a_File$[ebp]
	push	esi
	push	edi

; 30   : 	FILE* f = fopen( a_File, "rb" );

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	ebx
	mov	edi, ecx
	call	_fopen
	mov	esi, eax
	add	esp, 8

; 31   : 	if (f)

	test	esi, esi
	je	$LN26@Texture

; 32   : 	{
; 33   : 		// extract width and height from file header
; 34   : 		unsigned char buffer[20];
; 35   : 		fread( buffer, 1, 20, f );

	push	esi
	push	20					; 00000014H
	lea	eax, DWORD PTR _buffer$2[ebp]
	push	1
	push	eax
	call	_fread

; 36   : 		m_Width = *(buffer + 12) + 256 * *(buffer + 13);

	movzx	ecx, BYTE PTR _buffer$2[ebp+13]
	movzx	eax, BYTE PTR _buffer$2[ebp+12]
	shl	ecx, 8
	add	ecx, eax

; 37   : 		m_Height = *(buffer + 14) + 256 * *(buffer + 15);

	movzx	eax, BYTE PTR _buffer$2[ebp+14]
	mov	DWORD PTR [edi+4], ecx
	movzx	ecx, BYTE PTR _buffer$2[ebp+15]
	shl	ecx, 8
	add	ecx, eax

; 38   : 		fclose( f );

	push	esi
	mov	DWORD PTR [edi+8], ecx
	call	_fclose

; 39   : 		// read pixel data
; 40   : 		f = fopen( a_File, "rb" );

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	ebx
	call	_fopen
	mov	esi, eax

; 41   : 		unsigned char* t = new unsigned char[m_Width * m_Height * 3 + 1024];

	mov	eax, DWORD PTR [edi+8]
	imul	eax, DWORD PTR [edi+4]
	lea	eax, DWORD PTR [eax+eax*2]
	add	eax, 1024				; 00000400H
	push	eax
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax

; 42   : 		fread( t, 1, m_Width * m_Height * 3 + 1024, f );

	mov	eax, DWORD PTR [edi+8]
	imul	eax, DWORD PTR [edi+4]
	push	esi
	mov	DWORD PTR _t$1$[ebp], ecx
	lea	eax, DWORD PTR [eax+eax*2]
	add	eax, 1024				; 00000400H
	push	eax
	push	1
	push	ecx
	call	_fread

; 43   : 		fclose( f );

	push	esi
	call	_fclose

; 45   : 		m_Bitmap = new Color[m_Width * m_Height];

	mov	esi, DWORD PTR [edi+8]
	xor	ecx, ecx
	imul	esi, DWORD PTR [edi+4]
	mov	edx, 12					; 0000000cH
	mov	eax, esi
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	edx, eax
	add	esp, 56					; 00000038H
	test	edx, edx
	je	SHORT $LN7@Texture
	lea	ecx, DWORD PTR [esi-1]
	test	ecx, ecx
	js	SHORT $LN8@Texture
	lea	eax, DWORD PTR [edx+8]
	npad	4
$LL11@Texture:
	dec	ecx
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [eax-8], 0
	mov	DWORD PTR [eax-4], 0
	lea	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [eax-12], 0
	jns	SHORT $LL11@Texture
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 45   : 		m_Bitmap = new Color[m_Width * m_Height];

	jmp	SHORT $LN8@Texture
$LN7@Texture:
	xor	edx, edx
$LN8@Texture:

; 47   : 		for ( int size = m_Width * m_Height, i = 0; i < size; i++ )

	mov	esi, DWORD PTR [edi+8]
	imul	esi, DWORD PTR [edi+4]
	mov	DWORD PTR [edi], edx
	test	esi, esi
	jle	SHORT $LN1@Texture

; 45   : 		m_Bitmap = new Color[m_Width * m_Height];

	mov	edx, DWORD PTR _t$1$[ebp]
	xor	ebx, ebx
	movss	xmm3, DWORD PTR __real@3b800000
	add	edx, 19					; 00000013H
	npad	4
$LL3@Texture:
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movzx	eax, BYTE PTR [edx+1]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 47   : 		for ( int size = m_Width * m_Height, i = 0; i < size; i++ )

	lea	edx, DWORD PTR [edx+3]

; 48   : 			m_Bitmap[i] = Color( t[i * 3 + 20] * rec, t[i * 3 + 19] * rec, t[i * 3 + 18] * rec );

	mov	ecx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebx+12]
	movd	xmm2, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movzx	eax, BYTE PTR [edx-3]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 48   : 			m_Bitmap[i] = Color( t[i * 3 + 20] * rec, t[i * 3 + 19] * rec, t[i * 3 + 18] * rec );

	cvtdq2ps xmm2, xmm2
	movd	xmm1, eax
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movzx	eax, BYTE PTR [edx-4]
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 48   : 			m_Bitmap[i] = Color( t[i * 3 + 20] * rec, t[i * 3 + 19] * rec, t[i * 3 + 18] * rec );

	mulss	xmm2, xmm3
	cvtdq2ps xmm1, xmm1
	movd	xmm0, eax
	mulss	xmm1, xmm3
	cvtdq2ps xmm0, xmm0
	unpcklps xmm2, xmm1
	mulss	xmm0, xmm3
	movq	QWORD PTR [ecx+ebx-12], xmm2
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR $T1[ebp+8], xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp

; 48   : 			m_Bitmap[i] = Color( t[i * 3 + 20] * rec, t[i * 3 + 19] * rec, t[i * 3 + 18] * rec );

	mov	eax, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [ecx+ebx-4], eax
	dec	esi
	jne	SHORT $LL3@Texture
$LN1@Texture:

; 49   : 		delete t;

	push	DWORD PTR _t$1$[ebp]
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN26@Texture:

; 50   : 	}
; 51   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, edi
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0Texture@Raytracer@@QAE@PAD@Z ENDP			; Raytracer::Texture::Texture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\scene.cpp
;	COMDAT ??0Texture@Raytracer@@QAE@PAVvector3@1@HH@Z
_TEXT	SEGMENT
_a_Bitmap$ = 8						; size = 4
_a_Width$ = 12						; size = 4
_a_Height$ = 16						; size = 4
??0Texture@Raytracer@@QAE@PAVvector3@1@HH@Z PROC	; Raytracer::Texture::Texture, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_Bitmap$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a_Width$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _a_Height$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 26   : }

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0Texture@Raytracer@@QAE@PAVvector3@1@HH@Z ENDP	; Raytracer::Texture::Texture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\raytracer.h
;	COMDAT ?GetDirection@Ray@Raytracer@@QAEAAVvector3@2@XZ
_TEXT	SEGMENT
?GetDirection@Ray@Raytracer@@QAEAAVvector3@2@XZ PROC	; Raytracer::Ray::GetDirection, COMDAT
; _this$ = ecx

; 25   : 	vector3& GetDirection() { return m_Direction; }

	lea	eax, DWORD PTR [ecx+12]
	ret	0
?GetDirection@Ray@Raytracer@@QAEAAVvector3@2@XZ ENDP	; Raytracer::Ray::GetDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\raytracer.h
;	COMDAT ?GetOrigin@Ray@Raytracer@@QAEAAVvector3@2@XZ
_TEXT	SEGMENT
?GetOrigin@Ray@Raytracer@@QAEAAVvector3@2@XZ PROC	; Raytracer::Ray::GetOrigin, COMDAT
; _this$ = ecx

; 24   : 	vector3& GetOrigin() { return m_Origin; }

	mov	eax, ecx
	ret	0
?GetOrigin@Ray@Raytracer@@QAEAAVvector3@2@XZ ENDP	; Raytracer::Ray::GetOrigin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?d@aabb@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?d@aabb@Raytracer@@QAEMXZ PROC				; Raytracer::aabb::d, COMDAT
; _this$ = ecx

; 214  : 	real d() { return m_Size.z; }

	fld	DWORD PTR [ecx+20]
	ret	0
?d@aabb@Raytracer@@QAEMXZ ENDP				; Raytracer::aabb::d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?h@aabb@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?h@aabb@Raytracer@@QAEMXZ PROC				; Raytracer::aabb::h, COMDAT
; _this$ = ecx

; 213  : 	real h() { return m_Size.y; }

	fld	DWORD PTR [ecx+16]
	ret	0
?h@aabb@Raytracer@@QAEMXZ ENDP				; Raytracer::aabb::h
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?w@aabb@Raytracer@@QAEMXZ
_TEXT	SEGMENT
?w@aabb@Raytracer@@QAEMXZ PROC				; Raytracer::aabb::w, COMDAT
; _this$ = ecx

; 212  : 	real w() { return m_Size.x; }

	fld	DWORD PTR [ecx+12]
	ret	0
?w@aabb@Raytracer@@QAEMXZ ENDP				; Raytracer::aabb::w
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?GetSize@aabb@Raytracer@@QAEAAVvector3@2@XZ
_TEXT	SEGMENT
?GetSize@aabb@Raytracer@@QAEAAVvector3@2@XZ PROC	; Raytracer::aabb::GetSize, COMDAT
; _this$ = ecx

; 196  : 	vector3& GetSize() { return m_Size; }

	lea	eax, DWORD PTR [ecx+12]
	ret	0
?GetSize@aabb@Raytracer@@QAEAAVvector3@2@XZ ENDP	; Raytracer::aabb::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?GetPos@aabb@Raytracer@@QAEAAVvector3@2@XZ
_TEXT	SEGMENT
?GetPos@aabb@Raytracer@@QAEAAVvector3@2@XZ PROC		; Raytracer::aabb::GetPos, COMDAT
; _this$ = ecx

; 195  : 	vector3& GetPos() { return m_Pos; }

	mov	eax, ecx
	ret	0
?GetPos@aabb@Raytracer@@QAEAAVvector3@2@XZ ENDP		; Raytracer::aabb::GetPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??0aabb@Raytracer@@QAE@AAVvector3@1@0@Z
_TEXT	SEGMENT
_a_Pos$ = 8						; size = 4
_a_Size$ = 12						; size = 4
??0aabb@Raytracer@@QAE@AAVvector3@1@0@Z PROC		; Raytracer::aabb::aabb, COMDAT
; _this$ = ecx

; 194  : 	aabb( vector3& a_Pos, vector3& a_Size ) : m_Pos( a_Pos ), m_Size( a_Size ) {};

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_Pos$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _a_Size$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0aabb@Raytracer@@QAE@AAVvector3@1@0@Z ENDP		; Raytracer::aabb::aabb
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??0aabb@Raytracer@@QAE@XZ
_TEXT	SEGMENT
??0aabb@Raytracer@@QAE@XZ PROC				; Raytracer::aabb::aabb, COMDAT
; _this$ = ecx

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR [ecx], 0

; 193  : 	aabb() : m_Pos( vector3( 0, 0, 0 ) ), m_Size( vector3( 0, 0, 0 ) ) {};

	mov	eax, ecx

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0

; 193  : 	aabb() : m_Pos( vector3( 0, 0, 0 ) ), m_Size( vector3( 0, 0, 0 ) ) {};

	ret	0
??0aabb@Raytracer@@QAE@XZ ENDP				; Raytracer::aabb::aabb
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??DRaytracer@@YA?AVvector3@0@MABV10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
_v$ = 16						; size = 4
??DRaytracer@@YA?AVvector3@0@MABV10@@Z PROC		; Raytracer::operator*, COMDAT

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR _f$[ebp]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm0

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+4], xmm0

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+8], xmm0

; 84   : 	friend vector3 operator * ( real f, const vector3& v ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	pop	ebp
	ret	0
??DRaytracer@@YA?AVvector3@0@MABV10@@Z ENDP		; Raytracer::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??DRaytracer@@YA?AVvector3@0@ABV10@AAV10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??DRaytracer@@YA?AVvector3@0@ABV10@AAV10@@Z PROC	; Raytracer::operator*, COMDAT

; 83   : 	friend vector3 operator * ( const vector3& v1, vector3& v2 ) { return vector3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 83   : 	friend vector3 operator * ( const vector3& v1, vector3& v2 ) { return vector3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }

	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm0

; 83   : 	friend vector3 operator * ( const vector3& v1, vector3& v2 ) { return vector3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }

	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+4], xmm0

; 83   : 	friend vector3 operator * ( const vector3& v1, vector3& v2 ) { return vector3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }

	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+8], xmm0

; 83   : 	friend vector3 operator * ( const vector3& v1, vector3& v2 ) { return vector3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }

	pop	ebp
	ret	0
??DRaytracer@@YA?AVvector3@0@ABV10@AAV10@@Z ENDP	; Raytracer::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??DRaytracer@@YA?AVvector3@0@ABV10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_f$ = 16						; size = 4
??DRaytracer@@YA?AVvector3@0@ABV10@M@Z PROC		; Raytracer::operator*, COMDAT

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR _f$[ebp]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm0

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+4], xmm0

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, xmm1

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+8], xmm0

; 82   : 	friend vector3 operator * ( const vector3& v, real f ) { return vector3( v.x * f, v.y * f, v.z * f ); }

	pop	ebp
	ret	0
??DRaytracer@@YA?AVvector3@0@ABV10@M@Z ENDP		; Raytracer::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??GRaytracer@@YA?AVvector3@0@ABV10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??GRaytracer@@YA?AVvector3@0@ABV10@0@Z PROC		; Raytracer::operator-, COMDAT

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [ecx]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm0

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [ecx+4]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+4], xmm0

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [ecx+8]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+8], xmm0

; 79   : 	friend vector3 operator - ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }

	pop	ebp
	ret	0
??GRaytracer@@YA?AVvector3@0@ABV10@0@Z ENDP		; Raytracer::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??HRaytracer@@YA?AVvector3@0@ABV10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??HRaytracer@@YA?AVvector3@0@ABV10@0@Z PROC		; Raytracer::operator+, COMDAT

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [ecx]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm0

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [ecx+4]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+4], xmm0

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [ecx+8]

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+8], xmm0

; 78   : 	friend vector3 operator + ( const vector3& v1, const vector3& v2 ) { return vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }

	pop	ebp
	ret	0
??HRaytracer@@YA?AVvector3@0@ABV10@0@Z ENDP		; Raytracer::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??Xvector3@Raytracer@@QAEXM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
??Xvector3@Raytracer@@QAEXM@Z PROC			; Raytracer::vector3::operator*=, COMDAT
; _this$ = ecx

; 74   : 	void operator *= ( real f ) { x *= f; y *= f; z *= f; }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR _f$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??Xvector3@Raytracer@@QAEXM@Z ENDP			; Raytracer::vector3::operator*=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??Yvector3@Raytracer@@QAEXAAV01@@Z
_TEXT	SEGMENT
_a_V$ = 8						; size = 4
??Yvector3@Raytracer@@QAEXAAV01@@Z PROC			; Raytracer::vector3::operator+=, COMDAT
; _this$ = ecx

; 70   : 	void operator += ( vector3& a_V ) { x += a_V.x; y += a_V.y; z += a_V.z; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a_V$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??Yvector3@Raytracer@@QAEXAAV01@@Z ENDP			; Raytracer::vector3::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?Cross@vector3@Raytracer@@QAE?AV12@V12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_b$ = 12						; size = 12
?Cross@vector3@Raytracer@@QAE?AV12@V12@@Z PROC		; Raytracer::vector3::Cross, COMDAT
; _this$ = ecx

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	push	ebp
	mov	ebp, esp
	movss	xmm6, DWORD PTR [ecx+4]
	movss	xmm5, DWORD PTR [ecx+8]
	movaps	xmm1, xmm6
	mulss	xmm1, DWORD PTR _b$[ebp+8]
	movaps	xmm0, xmm5

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	mulss	xmm0, DWORD PTR _b$[ebp+4]
	movss	xmm3, DWORD PTR [ecx]
	mulss	xmm5, DWORD PTR _b$[ebp]
	mulss	xmm6, DWORD PTR _b$[ebp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm3, DWORD PTR _b$[ebp+4]
	mulss	xmm0, DWORD PTR _b$[ebp+8]
	subss	xmm3, xmm6

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax], xmm1

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	subss	xmm5, xmm0

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	movss	DWORD PTR [eax+8], xmm3
	movss	DWORD PTR [eax+4], xmm5

; 69   : 	vector3 Cross( vector3 b ) { return vector3( y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x ); }

	pop	ebp
	ret	16					; 00000010H
?Cross@vector3@Raytracer@@QAE?AV12@V12@@Z ENDP		; Raytracer::vector3::Cross
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?Dot@vector3@Raytracer@@QAEMV12@@Z
_TEXT	SEGMENT
_a_V$ = 8						; size = 12
tv137 = 16						; size = 4
?Dot@vector3@Raytracer@@QAEMV12@@Z PROC			; Raytracer::vector3::Dot, COMDAT
; _this$ = ecx

; 68   : 	real Dot( vector3 a_V ) { return x * a_V.x + y * a_V.y + z * a_V.z; }

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _a_V$[ebp]
	mulss	xmm1, DWORD PTR _a_V$[ebp+4]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _a_V$[ebp+8]
	addss	xmm1, xmm0
	movss	DWORD PTR tv137[ebp], xmm1
	fld	DWORD PTR tv137[ebp]
	pop	ebp
	ret	12					; 0000000cH
?Dot@vector3@Raytracer@@QAEMV12@@Z ENDP			; Raytracer::vector3::Dot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?Length@vector3@Raytracer@@QAEMXZ
_TEXT	SEGMENT
tv131 = -4						; size = 4
?Length@vector3@Raytracer@@QAEMXZ PROC			; Raytracer::vector3::Length, COMDAT
; _this$ = ecx

; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtps2pd xmm0, xmm2
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }

	movss	DWORD PTR tv131[esp+8], xmm0
	fld	DWORD PTR tv131[esp+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@vector3@Raytracer@@QAEMXZ ENDP			; Raytracer::vector3::Length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ?Normalize@vector3@Raytracer@@QAEXXZ
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv135 = -8						; size = 4
tv137 = -4						; size = 4
?Normalize@vector3@Raytracer@@QAEXXZ PROC		; Raytracer::vector3::Normalize, COMDAT
; _this$ = ecx

; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	esi
	mov	esi, ecx

; 66   : 	real Length() { return (real)sqrt( x * x + y * y + z * z ); }

	movss	xmm0, DWORD PTR [esi]
	movss	xmm3, DWORD PTR [esi+4]
	movaps	xmm1, xmm0
	movss	xmm2, DWORD PTR [esi+8]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv130[esp+16], xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm3
	movss	DWORD PTR tv135[esp+16], xmm3
	movss	DWORD PTR tv137[esp+16], xmm2
	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
	xorps	xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtss2sd xmm0, xmm1
	call	__libm_sse2_sqrt_precise
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }

	movss	xmm1, DWORD PTR __real@3f800000
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h

; 775  :     return (float)sqrt(_X);

	cvtsd2ss xmm0, xmm0
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h

; 65   : 	void Normalize() { real l = 1.0f / Length(); x *= l; y *= l; z *= l; }

	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv130[esp+16]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi], xmm0
	movss	xmm0, DWORD PTR tv135[esp+16]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi+4], xmm0
	movss	xmm0, DWORD PTR tv137[esp+16]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi+8], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@vector3@Raytracer@@QAEXXZ ENDP		; Raytracer::vector3::Normalize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??0vector3@Raytracer@@QAE@MMM@Z
_TEXT	SEGMENT
_a_X$ = 8						; size = 4
_a_Y$ = 12						; size = 4
_a_Z$ = 16						; size = 4
??0vector3@Raytracer@@QAE@MMM@Z PROC			; Raytracer::vector3::vector3, COMDAT
; _this$ = ecx

; 63   : 	vector3( real a_X, real a_Y, real a_Z ) : x( a_X ), y( a_Y ), z( a_Z ) {};

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _a_X$[ebp]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _a_Y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _a_Z$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0vector3@Raytracer@@QAE@MMM@Z ENDP			; Raytracer::vector3::vector3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\common.h
;	COMDAT ??0vector3@Raytracer@@QAE@XZ
_TEXT	SEGMENT
??0vector3@Raytracer@@QAE@XZ PROC			; Raytracer::vector3::vector3, COMDAT
; _this$ = ecx

; 62   : 	vector3() : x( 0.0f ), y( 0.0f ), z( 0.0f ) {};

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0vector3@Raytracer@@QAE@XZ ENDP			; Raytracer::vector3::vector3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 1136 :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	movss	xmm0, DWORD PTR __X$[ebp]

; 775  :     return (float)sqrt(_X);

	cvtps2pd xmm0, xmm0
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0

; 1136 :         {return (sqrtf(_X)); }

	movss	DWORD PTR tv65[esp+8], xmm0
	fld	DWORD PTR tv65[esp+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	movss	xmm0, DWORD PTR __X$[ebp]

; 775  :     return (float)sqrt(_X);

	cvtps2pd xmm0, xmm0
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv68[esp+8], xmm0
	fld	DWORD PTR tv68[esp+8]

; 776  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]

; 765  :     return (float)sin(_X);

	cvtps2pd xmm0, xmm0
	call	__libm_sse2_sin_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 766  : }

	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv69 = -8						; size = 8
tv75 = 8						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 700  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	movss	xmm0, DWORD PTR __X$[ebp]

; 701  :     return (float)floor(_X);

	sub	esp, 8
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR tv69[ebp], xmm0
	fld	QWORD PTR tv69[ebp]
	fstp	QWORD PTR [esp]
	call	_floor
	fstp	DWORD PTR tv75[ebp]
	fld	DWORD PTR tv75[ebp]
	add	esp, 8

; 702  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]

; 687  :     return (float)fabs(_X);

	cvtps2pd xmm0, xmm0
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 688  : }

	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 638  : {

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]

; 639  :     return (float)acos(_X);

	cvtps2pd xmm0, xmm0
	call	__libm_sse2_acos_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 640  : }

	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___n$[ebp]
	dec	esi
	js	SHORT $LN1@vector
	push	ebx
	mov	ebx, DWORD PTR ___f$[ebp]
	push	edi
	mov	edi, DWORD PTR ___t$[ebp]
$LL2@vector:
	mov	ecx, edi
	call	ebx
	add	edi, DWORD PTR ___s$[ebp]
	dec	esi
	jns	SHORT $LL2@vector
	pop	edi
	pop	ebx
$LN1@vector:
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
