; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	F:\BaiduYunDownload\lab&dom\class\cg\hw2\raytracer7\twister.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?mtRand_xsubi@Raytracer@@3PAGA			; Raytracer::mtRand_xsubi
_DATA	SEGMENT
?mtRand_xsubi@Raytracer@@3PAGA DW 02d3H			; Raytracer::mtRand_xsubi
	DW	07ff9H
	DW	0ad9cH
_DATA	ENDS
PUBLIC	?Seed@Twister@Raytracer@@QAEXK@Z		; Raytracer::Twister::Seed
PUBLIC	?Rand@Twister@Raytracer@@QAEMXZ			; Raytracer::Twister::Rand
PUBLIC	?RandL@Twister@Raytracer@@QAEKXZ		; Raytracer::Twister::RandL
PUBLIC	__real@2f800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@2f800000
CONST	SEGMENT
__real@2f800000 DD 02f800000r			; 2.32831e-010
CONST	ENDS
;	COMDAT ?mag01@?1??RandL@Twister@Raytracer@@QAEKXZ@4PAKA
_DATA	SEGMENT
?mag01@?1??RandL@Twister@Raytracer@@QAEKXZ@4PAKA DD 00H	; `Raytracer::Twister::RandL'::`2'::mag01
	DD	09908b0dfH
_DATA	ENDS
;	COMDAT ?mag01@?1??Rand@Twister@Raytracer@@QAEMXZ@4PAKA
_DATA	SEGMENT
?mag01@?1??Rand@Twister@Raytracer@@QAEMXZ@4PAKA DD 00H	; `Raytracer::Twister::Rand'::`2'::mag01
	DD	09908b0dfH
_DATA	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\twister.cpp
;	COMDAT ?RandL@Twister@Raytracer@@QAEKXZ
_TEXT	SEGMENT
?RandL@Twister@Raytracer@@QAEKXZ PROC			; Raytracer::Twister::RandL, COMDAT
; _this$ = ecx

; 65   : {

	push	esi
	mov	esi, ecx

; 66   :     unsigned long y;
; 67   :     static unsigned long mag01[2] = { 0x0, MATRIX_A };
; 68   :     if (mti >= mtRand_N) 

	cmp	DWORD PTR [esi+2496], 624		; 00000270H
	jl	$LN7@RandL

; 69   : 	{
; 70   :         int kk;
; 71   :         for (kk=0;kk<mtRand_N-M;kk++) 

	xor	edx, edx
	npad	11
$LL6@RandL:

; 72   : 		{
; 73   :             y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

	mov	ecx, DWORD PTR [esi+edx*4+4]
	xor	ecx, DWORD PTR [esi+edx*4]
	and	ecx, 2147483647				; 7fffffffH
	xor	ecx, DWORD PTR [esi+edx*4]

; 74   :             mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, ecx
	shr	ecx, 1
	and	eax, 1
	xor	ecx, DWORD PTR ?mag01@?1??RandL@Twister@Raytracer@@QAEKXZ@4PAKA[eax*4]
	xor	ecx, DWORD PTR [esi+edx*4+1588]
	mov	DWORD PTR [esi+edx*4], ecx
	inc	edx
	cmp	edx, 227				; 000000e3H
	jl	SHORT $LL6@RandL

; 75   :         }
; 76   :         for (;kk<mtRand_N-1;kk++) 

	cmp	edx, 623				; 0000026fH
	jge	SHORT $LN1@RandL
	npad	7
$LL3@RandL:

; 77   : 		{
; 78   :             y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

	mov	ecx, DWORD PTR [esi+edx*4+4]
	xor	ecx, DWORD PTR [esi+edx*4]
	and	ecx, 2147483647				; 7fffffffH
	xor	ecx, DWORD PTR [esi+edx*4]

; 79   :             mt[kk] = mt[kk+(M-mtRand_N)] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, ecx
	shr	ecx, 1
	and	eax, 1
	xor	ecx, DWORD PTR ?mag01@?1??RandL@Twister@Raytracer@@QAEKXZ@4PAKA[eax*4]
	xor	ecx, DWORD PTR [esi+edx*4-908]
	mov	DWORD PTR [esi+edx*4], ecx
	inc	edx
	cmp	edx, 623				; 0000026fH
	jl	SHORT $LL3@RandL
$LN1@RandL:

; 80   :         }
; 81   :         y = (mt[mtRand_N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);

	mov	ecx, DWORD PTR [esi+2492]
	xor	ecx, DWORD PTR [esi]
	and	ecx, 2147483647				; 7fffffffH
	xor	ecx, DWORD PTR [esi+2492]

; 82   :         mt[mtRand_N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, ecx
	shr	ecx, 1
	and	eax, 1
	mov	eax, DWORD PTR ?mag01@?1??RandL@Twister@Raytracer@@QAEKXZ@4PAKA[eax*4]
	xor	eax, DWORD PTR [esi+1584]
	xor	eax, ecx
	mov	DWORD PTR [esi+2492], eax

; 83   :         mti = 0;

	mov	DWORD PTR [esi+2496], 0
$LN7@RandL:

; 84   :     }
; 85   :     y = mt[mti++];

	mov	eax, DWORD PTR [esi+2496]
	mov	ecx, DWORD PTR [esi+eax*4]
	inc	eax
	mov	DWORD PTR [esi+2496], eax

; 86   :     y ^= TEMPERING_SHIFT_U(y);

	mov	eax, ecx
	shr	eax, 11					; 0000000bH
	xor	ecx, eax

; 87   :     y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;

	mov	eax, ecx
	and	eax, -12953427				; ff3a58adH
	shl	eax, 7
	xor	ecx, eax

; 88   :     y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;

	mov	eax, ecx
	and	eax, -8308				; ffffdf8cH
	shl	eax, 15					; 0000000fH
	xor	ecx, eax

; 89   :     y ^= TEMPERING_SHIFT_L(y);

	mov	eax, ecx
	shr	eax, 18					; 00000012H
	xor	eax, ecx
	pop	esi

; 90   :     return y;
; 91   : }

	ret	0
?RandL@Twister@Raytracer@@QAEKXZ ENDP			; Raytracer::Twister::RandL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\twister.cpp
;	COMDAT ?Rand@Twister@Raytracer@@QAEMXZ
_TEXT	SEGMENT
tv650 = -4						; size = 4
?Rand@Twister@Raytracer@@QAEMXZ PROC			; Raytracer::Twister::Rand, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx

; 37   :     unsigned long y;
; 38   :     static unsigned long mag01[2] = {0x0, MATRIX_A};
; 39   :     if (mti >= mtRand_N) 

	cmp	DWORD PTR [esi+2496], 624		; 00000270H
	jl	$LN7@Rand

; 40   : 	{
; 41   :         int kk;
; 42   :         for (kk=0;kk<mtRand_N-M;kk++) 

	xor	edx, edx
	npad	7
$LL6@Rand:

; 43   : 		{
; 44   :             y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

	mov	ecx, DWORD PTR [esi+edx*4+4]
	xor	ecx, DWORD PTR [esi+edx*4]
	and	ecx, 2147483647				; 7fffffffH
	xor	ecx, DWORD PTR [esi+edx*4]

; 45   :             mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, ecx
	shr	ecx, 1
	and	eax, 1
	xor	ecx, DWORD PTR ?mag01@?1??Rand@Twister@Raytracer@@QAEMXZ@4PAKA[eax*4]
	xor	ecx, DWORD PTR [esi+edx*4+1588]
	mov	DWORD PTR [esi+edx*4], ecx
	inc	edx
	cmp	edx, 227				; 000000e3H
	jl	SHORT $LL6@Rand

; 46   :         }
; 47   :         for (;kk<mtRand_N-1;kk++) 

	cmp	edx, 623				; 0000026fH
	jge	SHORT $LN1@Rand
	npad	7
$LL3@Rand:

; 48   : 		{
; 49   :             y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

	mov	ecx, DWORD PTR [esi+edx*4+4]
	xor	ecx, DWORD PTR [esi+edx*4]
	and	ecx, 2147483647				; 7fffffffH
	xor	ecx, DWORD PTR [esi+edx*4]

; 50   :             mt[kk] = mt[kk+(M-mtRand_N)] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, ecx
	shr	ecx, 1
	and	eax, 1
	xor	ecx, DWORD PTR ?mag01@?1??Rand@Twister@Raytracer@@QAEMXZ@4PAKA[eax*4]
	xor	ecx, DWORD PTR [esi+edx*4-908]
	mov	DWORD PTR [esi+edx*4], ecx
	inc	edx
	cmp	edx, 623				; 0000026fH
	jl	SHORT $LL3@Rand
$LN1@Rand:

; 51   :         }
; 52   :         y = (mt[mtRand_N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);

	mov	ecx, DWORD PTR [esi+2492]
	xor	ecx, DWORD PTR [esi]
	and	ecx, 2147483647				; 7fffffffH
	xor	ecx, DWORD PTR [esi+2492]

; 53   :         mt[mtRand_N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

	mov	eax, ecx
	shr	ecx, 1
	and	eax, 1
	mov	eax, DWORD PTR ?mag01@?1??Rand@Twister@Raytracer@@QAEMXZ@4PAKA[eax*4]
	xor	eax, DWORD PTR [esi+1584]
	xor	eax, ecx
	mov	DWORD PTR [esi+2492], eax

; 54   :         mti = 0;

	mov	DWORD PTR [esi+2496], 0
$LN7@Rand:

; 55   :     }
; 56   :     y = mt[mti++];

	mov	eax, DWORD PTR [esi+2496]
	mov	ecx, DWORD PTR [esi+eax*4]
	inc	eax
	mov	DWORD PTR [esi+2496], eax

; 57   :     y ^= TEMPERING_SHIFT_U(y);

	mov	eax, ecx
	shr	eax, 11					; 0000000bH
	xor	ecx, eax

; 58   :     y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;

	mov	eax, ecx
	and	eax, -12953427				; ff3a58adH
	shl	eax, 7
	xor	ecx, eax

; 59   :     y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;

	mov	eax, ecx
	and	eax, -8308				; ffffdf8cH
	shl	eax, 15					; 0000000fH
	xor	ecx, eax

; 60   :     y ^= TEMPERING_SHIFT_L(y);

	mov	eax, ecx
	shr	eax, 18					; 00000012H
	xor	eax, ecx
	pop	esi
	movd	xmm0, eax

; 61   :     return ( (real)y * 2.3283064370807974e-10f );

	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	cvtpd2ps xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@2f800000
	movss	DWORD PTR tv650[ebp], xmm0
	fld	DWORD PTR tv650[ebp]

; 62   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Rand@Twister@Raytracer@@QAEMXZ ENDP			; Raytracer::Twister::Rand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File f:\baiduyundownload\lab&dom\class\cg\hw2\raytracer7\twister.cpp
;	COMDAT ?Seed@Twister@Raytracer@@QAEXK@Z
_TEXT	SEGMENT
_seed$ = 8						; size = 4
?Seed@Twister@Raytracer@@QAEXK@Z PROC			; Raytracer::Twister::Seed, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp

; 24   :     mt[0]= seed & 0xffffffff;

	mov	eax, DWORD PTR _seed$[ebp]
	mov	DWORD PTR [ecx], eax

; 25   :     for ( mti = 1; mti < mtRand_N; mti++ ) mt[mti] = (69069 * mt[mti - 1]) & 0xffffffff;

	mov	DWORD PTR [ecx+2496], 1
	npad	14
$LL6@Seed:
	mov	eax, DWORD PTR [ecx+2496]
	lea	edx, DWORD PTR [ecx+eax*4]
	imul	eax, DWORD PTR [edx-4], 69069
	mov	DWORD PTR [edx], eax
	inc	DWORD PTR [ecx+2496]
	cmp	DWORD PTR [ecx+2496], 624		; 00000270H
	jl	SHORT $LL6@Seed

; 26   :     unsigned long s = 373737;

	push	esi
	mov	esi, 373737				; 0005b3e9H

; 27   :     for ( mti = 1; mti < mtRand_N; mti++ )

	mov	DWORD PTR [ecx+2496], 1
	npad	12
$LL3@Seed:

; 28   :     {
; 29   : 		mt[mti] ^= s;

	mov	eax, DWORD PTR [ecx+2496]
	xor	DWORD PTR [ecx+eax*4], esi
	inc	DWORD PTR [ecx+2496]

; 30   : 		s = s * 5531 + 81547;

	imul	esi, esi, 5531
	add	esi, 81547				; 00013e8bH

; 31   : 		s ^= (s >> 9) ^ (s << 19);

	mov	edx, esi
	mov	eax, esi
	shl	edx, 19					; 00000013H
	shr	eax, 9
	xor	edx, eax
	xor	esi, edx
	cmp	DWORD PTR [ecx+2496], 624		; 00000270H
	jl	SHORT $LL3@Seed
	pop	esi

; 32   :     }
; 33   : }

	pop	ebp
	ret	4
?Seed@Twister@Raytracer@@QAEXK@Z ENDP			; Raytracer::Twister::Seed
_TEXT	ENDS
END
